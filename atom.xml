<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Flandre Scarlet 的小屋</title>
  
  <subtitle>LightningUZ 的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lightninguz2.github.io/"/>
  <updated>2020-02-24T06:53:26.794Z</updated>
  <id>https://lightninguz2.github.io/</id>
  
  <author>
    <name>LightningUZ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>noi.ac 405 bzoj 4403 序列统计 题解</title>
    <link href="https://lightninguz2.github.io/2020/02/24/noi-ac-405-bzoj-4403-%E5%BA%8F%E5%88%97%E7%BB%9F%E8%AE%A1-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/02/24/noi-ac-405-bzoj-4403-序列统计-题解/</id>
    <published>2020-02-24T06:52:31.000Z</published>
    <updated>2020-02-24T06:53:26.794Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>noi.ac再次蒯题，实锤了…</p><p>请你求长度在 $[1,n]$ 范围内，值域在 $[l,r]$ 范围内的序列中，不下降序列有多少个。答案对  $1000003$（是质数）取膜。</p><p>多组数据，数组组数 $T\le 100$ ，每组数据 $n,l,r\le 1e9$ ，并且保证$l\le r$</p><h3 id="思路框架"><a href="#思路框架" class="headerlink" title="思路框架"></a>思路框架</h3><p>首先，在 $[l,r]$ 范围内，和在 $[1,r-l+1]$ 范围内，没有本质上的区别。<br>设 $m=r-l+1$，然后答案就是 $C_{n+m}^{m}-1$</p><h3 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h3><p>我们先求长度固定为 $k$ 的时候，有多少满足条件的序列，然后取遍 $k=1,2\cdots n$ ，求和。</p><h4 id="求有多少固定长度非严格上升子序列"><a href="#求有多少固定长度非严格上升子序列" class="headerlink" title="求有多少固定长度非严格上升子序列"></a>求有多少固定长度非严格上升子序列</h4><h5 id="严格上升怎么做"><a href="#严格上升怎么做" class="headerlink" title="严格上升怎么做"></a>严格上升怎么做</h5><p>长度为 $k$ 的时候，值域在 $[1,m]$ 内的<strong>严格上升</strong>序列的格式就是 $C_{m}^{k}$ 。因为我们只要在 $[1,m]$ 内选出来 $k$ 个数，然后把它排一下序，那就能得到一个长度为 $k$ ，值域在 $[1,m]$ 内的一个<strong>严格上升</strong>序列了。</p><h5 id="如何转化成非严格上升"><a href="#如何转化成非严格上升" class="headerlink" title="如何转化成非严格上升"></a>如何转化成非严格上升</h5><p>我们在选严格上升序列的时候，假设我们当前选到的数为 $x$，那么下一个位置珂以是 $x+1,x+2…m$，有 $m-x$ 种选择。而选非严格上升序列的时候，却有 $m-x+1 $种选择。</p><p>那这个时候，我们只要把 $m$ 变成 $m+1$ ，那答案就和严格上升的时候一样了！！</p><p>序列的长度为 $k$ ，那么我们在选第 $[1,k-1]$这些位置的时候，都要把 $m$ 变成 $m+1$。那一共就是变成 $m+k-1$。</p><p>总结一下，长度为 $k$ 值域在 $[1,m]$ 之间的非严格上升序列个数为 $C_{m+k-1}^{k}$</p><h4 id="优化求和"><a href="#优化求和" class="headerlink" title="优化求和"></a>优化求和</h4><p>我们要求 $\sum\limits_{i=1}^{n} C_{m+i-1}^{i}=C_{m}^1+C_{m+1}^2+C_{m+2}^3…+C_{m+n-1}^{n}$</p><p>显然，$C_{n}^{m}=C_{n-1}^{m}+C_{n-1}^{m-1}$</p><p>那也就是说，我们珂以用两个相邻的 $C_{n}^{xxx}$ 得到一个 $C_{n+1}^{xxx}$。</p><p>那么我们考虑给第一项加上一个 $C_{m}^{0}$，也就是 $1$，然后最后减掉一个 $C_{m}^{0}$。</p><p>那我们开始推式子了，系好安全带（为了方便理解，我拆开$\Sigma$）：<br>原式<br>$=C_{m}^{0}+C_{m}^{1}+C_{m+1}^{2}+C_{m+2}^3…+C_{m+n-1}^n-1$<br>$=C_{m+1}^{1}+C_{m+1}^{2}+C_{m+2}^3+…+C_{m+n-1}^n-1$<br>$=C_{m+2}^{2}+C_{m+2}^{3}+….+C_{m+n-1}^n-1$<br>$=C_{m+n-1}^{n-1}+C_{m+n-1}^{n}-1$<br>$=C_{m+n}^{n}-1$</p><p>所以答案就是 $C_{m+n}^{n}-1$。预处理阶乘（逆元）+Lucas定理。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> mod 1000003</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N (mod&lt;&lt;1)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        F(i,<span class="number">1</span>,cnt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> fac[N],ifac[N];</span><br><span class="line">    <span class="comment">//阶乘，和阶乘的逆元</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        F(i,<span class="number">1</span>,mod<span class="number">-1</span>) fac[i]=fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">        ifac[mod<span class="number">-1</span>]=mod<span class="number">-1</span>;</span><br><span class="line">       <span class="comment">//mod是质数，那么(mod-1)! %mod=mod-1，这个是Wilson定理</span></span><br><span class="line">       <span class="comment">//然后mod-1的逆元，显然是mod-1</span></span><br><span class="line">        D(i,mod<span class="number">-2</span>,<span class="number">0</span>) ifac[i]=ifac[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n,l,r;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Rd(<span class="number">3</span>,&amp;n,&amp;l,&amp;r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span> <span class="comment">//Lucas定理</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m&gt;n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (n&lt;mod <span class="keyword">and</span> m&lt;mod)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> fac[n]*ifac[m]%mod*ifac[n-m]%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> C(n/mod,m/mod)*C(n%mod,m%mod)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=r-l+<span class="number">1</span>; <span class="comment">//len就是m了</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(C(n+len,len)+mod<span class="number">-1</span>)%mod);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Init();</span><br><span class="line">        <span class="keyword">int</span> t;R1(t);</span><br><span class="line">        F(i,<span class="number">1</span>,t)</span><br><span class="line">        &#123;</span><br><span class="line">            Input();</span><br><span class="line">            Soviet();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> int <span class="comment">//long long </span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="思维" scheme="https://lightninguz2.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="组合数学" scheme="https://lightninguz2.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
      <category term="毒瘤" scheme="https://lightninguz2.github.io/tags/%E6%AF%92%E7%98%A4/"/>
    
  </entry>
  
  <entry>
    <title>noi.ac 716 答案是整数 题解</title>
    <link href="https://lightninguz2.github.io/2020/02/23/noi-ac-716-%E7%AD%94%E6%A1%88%E6%98%AF%E6%95%B4%E6%95%B0-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/02/23/noi-ac-716-答案是整数-题解/</id>
    <published>2020-02-23T13:27:33.000Z</published>
    <updated>2020-02-23T13:37:17.746Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>求<br>$\sum\limits_{i=1}^{n}\sum\limits_{j=1}^{n}\dfrac{ij}{\gcd (i,j)}$。</p><p>对 $998244353$ 取模。$n&lt;=10^7,m&lt;=10^{14}$。</p><p>注：空间限制只有64MB，只够开 $10^7$ 的<code>int</code>型数组。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h4 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h4><p>设 $n\le m$，因为 $n,m$ 对称。<br>设 $g=\gcd(i,j)$ （简写）<br>$\sum\limits_{i=1}^{n}\sum\limits_{j=1}^{m} \dfrac{ij}{g^2}$<br>$\sum\limits_{d=1}^{n}\sum\limits_{i=1}^{n/d}\sum\limits_{j=1}^{m/d}[g=1]ij$ （枚举$\gcd$）<br>$\sum\limits_{q=1}^{n}\mu(q)\sum\limits_{d=1}^{n}\sum\limits_{i=1}^{n/d}\sum\limits_{j=1}^{m/d}[q|g]ij$<br>$\sum\limits_{q=1}^{n}\mu(q)\sum\limits_{d=1}^{n}\sum\limits_{i=1}^{n/dq}\sum\limits_{j=1}^{m/dq}iq\times jq$<br>$\sum\limits_{q=1}^{n}\mu(q)q^2\sum\limits_{d=1}^{n}\sum\limits_{i=1}^{n/dq}\sum\limits_{j=1}^{m/dq}ij$<br>设 $s(x)=\sum\limits_{i=1}^x i$<br>原式化为：<br>$\sum\limits_{q=1}^n\mu(q)q^2\sum\limits_{d=1}^{n}s(n/dq)s(m/dq)$<br>我们发现， $dq&gt;n$ 时，$s(n/dq)=0$，也就不会有贡献了。那么我们珂以缩小 $d$ 的范围：<br>$\sum\limits_{q=1}^{n}\mu(q)q^2\sum\limits_{d=1}^{n/q}s(n/dq)s(m/dq)$</p><p>整除分块两次，是 $O(n)$ 的（？）。</p><p>但是似乎这个复杂度还和 $m$ 有点关系，我不是很清楚…总之，它TLE了，只有 $80$ 分。（亲测）</p><p>那么我们考虑枚举 $q\times d$，设为 $T$。它的贡献就是 $s(n/T)s(m/T)$ 。而它被算到的此时，显然， $T=dq$ 是 $q$ 的倍数，所以 $q$ 是 $T=dq$ 的因数。那 $dq=T$ 被算到的次数就是 $\sum\limits_{q|T} \mu(q)q^2$。将这个值设为 $f(T)$。</p><p>式子化一下，变成：$\sum\limits_{T=1}^{n}f(T)\times s(n/T)\times s(m/T)$。</p><p>那么问题就在于我们怎么筛这个 $f(T)$ ，还要严格线性，因为 $n&lt;=10^7$。</p><h4 id="如何筛f函数"><a href="#如何筛f函数" class="headerlink" title="如何筛f函数"></a>如何筛f函数</h4><p>显然，$f(1)=1$，而且当 $p$ 和 $q$ 互质时，$f(p\times q)=f(p)\times f(q)$。这说明它也许能线性筛。</p><p>考虑质数情况。当 $p$ 为质数时，$f(p)=1-p^2$。</p><p>接着，$f(p^k)=\sum\limits_{d|p^k}\mu(d)d^2$。显然，$p^k$ 的因数只有 $p^0,p^1\cdots p^k$。而对于 $p^j$ （$2\le j \le k$），显然，$\mu(p^j)=0$，也就不会有贡献了。因此，有贡献的只有 $p^0$ 和 $p^1$ 。</p><p>那也就是说，$f(p^k)=f(p)$！！！（换句话说，同一个质因子乘多少遍都不会改变 $f$ 的值）</p><p>那么我们在线性筛的时候有这样一步：枚举 $i$，找一个质数 $u$。如果 $u$ 不是 $i$ 的因数，那么显然 $i$ 和 $u$ 互质，$f(i\times u)=f(i)\times f(u)$。否则 $u$ 是 $i$ 的质因子，然后我们要计算 $f(i\times u)$ 的值，并 <code>break</code>。</p><p>由上面那个性质得，$u$ 是 $i$ 的质因子，而我们又把它乘了一遍，并不会改变 $f$ 的值。也就是 $f(i\times u)=f(i)\times f(u)$。</p><p>知道了这些，就能线性筛这个 $f$ 函数了！！！</p><p>线性筛出来了 $f$ 之后，整除分块都不用，直接 $O(n)$ 暴力就能求出原式的值了。而且是很稳的 $O(n)$ 哦！</p><h3 id="极-限-卡-常"><a href="#极-限-卡-常" class="headerlink" title="极 限 卡 常"></a>极 限 卡 常</h3><p>上面说了，空间限制只有 64MB ，只能开的下一个 $10^7$ 个<code>int</code>数组，两个就不行了。</p><p>说的具体点，能开的下 $16 777 216$个 <code>int</code>。</p><p>但是我们常见的线性筛，需要一个<code>int primes[1e7]</code>保存质数，还有一个<code>bool notp[1e7]</code>标记是否不是素数，然后才是我们的<code>f</code>数组。这可怎么办呢？</p><p>首先，$[1,n]$ 中的质数个数和 $n$ 绝对不是同一个级别。具体的说，大概是 $\dfrac{n}{\ln(n)}$ 级别的。$[1,1e7]$ 中的质数，经过测试，还不足 $10^6$ 个。那么我们的 <code>primes</code> 数组就珂以开的小一点了。</p><p>接着，<code>bool notp[1e7]</code> 珂以用一个 <code>bitset</code> 存储，空间直接少掉 $32$ 倍，你说爽不爽。</p><p>然后我们就能卡进空间常数了！nice！</p><p>还有，记得不要全开<code>long long</code> 啊！</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 10000007    </span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> mod 998244353ll</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> i6  166374059ll</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> i2  499122177ll</span></span><br><span class="line">    <span class="comment">// 模数，2的逆元，6的逆元 </span></span><br><span class="line">    <span class="comment">// 只是打个板子，并不是所有的数都有用上</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="comment">//并不想用快读，数据小</span></span><br><span class="line"></span><br><span class="line">    ll n,m;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> f[N];</span><br><span class="line">    <span class="keyword">int</span> primes[N/<span class="number">10</span>]; <span class="comment">//N/10足够了</span></span><br><span class="line">    <span class="built_in">bitset</span>&lt;N&gt; notp; <span class="comment">//STL万岁</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> &amp;cnt=primes[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> n=<span class="number">1e7</span>;</span><br><span class="line">        f[<span class="number">1</span>]=notp[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        F(i,<span class="number">2</span>,n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!notp[i])</span><br><span class="line">            &#123;</span><br><span class="line">                f[i]=(mod+<span class="number">1</span><span class="number">-1l</span>l*i*i%mod)%mod;</span><br><span class="line">                <span class="comment">// 上面说了，i为质数的时候，f[i]=1-i*i</span></span><br><span class="line">                <span class="comment">// 别忘了取模啊</span></span><br><span class="line">                primes[++cnt]=i;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt <span class="keyword">and</span> i*primes[j]&lt;=n;++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> u=primes[j];</span><br><span class="line">                notp[i*u]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (i%u!=<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    f[i*u]=<span class="number">1l</span>l*f[i]*f[u]%mod;</span><br><span class="line">                    <span class="comment">//利用积性性质，f[i*u]=f[i]*f[u]</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    f[i*u]=f[i];</span><br><span class="line">                    <span class="comment">//上面特意讲了，此时f[i*u]=f[i]</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">s</span><span class="params">(ll x)</span></span>&#123;x%=mod;<span class="keyword">return</span> x*(x+<span class="number">1</span>)%mod*i2%mod;&#125;</span><br><span class="line">    <span class="comment">//计算1+2+3...+x的和，也就是x*(x+1)/2</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n&gt;m) swap(n,m);</span><br><span class="line">        <span class="comment">//令n&lt;=m</span></span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        F(i,<span class="number">1</span>,n)</span><br><span class="line">        &#123;</span><br><span class="line">            ans+=<span class="number">1l</span>l*f[i]*s(n/i)%mod*s(m/i)%mod;</span><br><span class="line">            <span class="comment">//每次ans+=f[i]*s(n/i)*s(m/i)</span></span><br><span class="line">            <span class="comment">//别忘了取模啊！</span></span><br><span class="line">            ans%=mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Init();</span><br><span class="line">        Input();</span><br><span class="line">        Soviet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="毒瘤" scheme="https://lightninguz2.github.io/tags/%E6%AF%92%E7%98%A4/"/>
    
      <category term="莫比乌斯反演" scheme="https://lightninguz2.github.io/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 1304E 1-Trees and Queries 题解</title>
    <link href="https://lightninguz2.github.io/2020/02/21/Codeforces-1304E-1-Trees-and-Queries-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/02/21/Codeforces-1304E-1-Trees-and-Queries-题解/</id>
    <published>2020-02-21T01:16:23.000Z</published>
    <updated>2020-02-21T07:45:31.230Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>$n$ 个节点的树，每条边权都是 $1$。有 $q$ 个询问，每次给定 $x,y,a,b,k$，表示你在树上加一条边 $(x\leftrightarrow y)$ ，并求从 $a$ 到 $b$ 走 $k$ 条边的最短路。其中每条边和点都允许<strong>重复经过</strong>。求完询问后，把 $(x\leftarrow y)$ 这条边删掉（即：询问之间都是独立的）。</p><p>$n\le 1e5; q\le 1e5; 1\le x,y,a,b \le n; 1\le k \le 1e9$</p><h3 id="思路框架"><a href="#思路框架" class="headerlink" title="思路框架"></a>思路框架</h3><p>首先倍增LCA维护两点之间的最短路。</p><p>由于边能重复经过，参考今年普及 T4 的思路，我们只要找一条长度 $\le k$ 并且和 $k$ 同奇偶的路即可。</p><p>原先$a,b$之间的最短路只能有一条。但是加上边 $x,y$ 之后，就多了两条：<br>$a\rightarrow x \rightarrow y \rightarrow b$，长度为 $Q(a,x)+1+Q(y,b)$<br>$a\rightarrow y \rightarrow x \rightarrow b$，长度为 $Q(a,y)+1+Q(x,b)$<br>（其中 $Q(u,v)$ 表示 $u$ 到 $v$ 的最短路，代码里叫<code>PathLen</code>）<br>这三条里面判断一下，哪条能满足：长度 $\le k$ 且长度和$k$同奇偶</p><p>有一个就输出<code>YES</code>，否则<code>NO</code>。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 155555</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        F(i,<span class="number">1</span>,cnt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">            <span class="keyword">int</span> head[N];</span><br><span class="line">            <span class="keyword">int</span> EdgeCount;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">            &#123;</span></span><br><span class="line">                <span class="keyword">int</span> To,Label,Next;</span><br><span class="line">            &#125;Ed[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">int</span> _V=N,<span class="keyword">int</span> _E=N&lt;&lt;<span class="number">1</span>)</span> </span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="built_in">memset</span>(Ed,<span class="number">-1</span>,<span class="keyword">sizeof</span>(Edge)*(_E));</span><br><span class="line">                <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(_V));</span><br><span class="line">                EdgeCount=<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                Ed[++EdgeCount]=(Edge)&#123;v,w,head[u]&#125;;</span><br><span class="line">                head[u]=EdgeCount;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">Add2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w=<span class="number">1</span>)</span> </span>&#123;AddEdge(u,v,w);AddEdge(v,u,w);&#125;</span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">Start</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;<span class="keyword">return</span> head[u];&#125;</span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">To</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">return</span> Ed[u].To;&#125;</span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">Label</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">return</span> Ed[u].Label;&#125;</span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">Next</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">return</span> Ed[u].Next;&#125;</span><br><span class="line">    &#125;G;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        R1(n);</span><br><span class="line">        G.clear();</span><br><span class="line">        F(i,<span class="number">1</span>,n<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u,v;Rd(<span class="number">2</span>,&amp;u,&amp;v);</span><br><span class="line">            G.Add2(u,v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> fa[N][<span class="number">22</span>],deep[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        deep[u]=(u==f)?<span class="number">0</span>:deep[f]+<span class="number">1</span>; <span class="comment">//deep[i] 表示从 i 到根经过的 **边数** </span></span><br><span class="line">        <span class="comment">//所以 deep[根] 是 0 哦</span></span><br><span class="line">        fa[u][<span class="number">0</span>]=f; </span><br><span class="line">        F(i,<span class="number">1</span>,<span class="number">20</span>) fa[u][i]=fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">        Tra(i,u)</span><br><span class="line">        &#123;<span class="keyword">int</span> v=__v;</span><br><span class="line">            <span class="keyword">if</span> (v!=f) DFS(v,u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> <span class="comment">//求a,b的LCA</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (deep[a]&lt;deep[b]) swap(a,b);</span><br><span class="line">        D(i,<span class="number">20</span>,<span class="number">0</span>) <span class="keyword">if</span> (deep[fa[a][i]]&gt;=deep[b]) a=fa[a][i];</span><br><span class="line">        <span class="keyword">if</span> (a==b) <span class="keyword">return</span> a;</span><br><span class="line">        D(i,<span class="number">20</span>,<span class="number">0</span>) <span class="keyword">if</span> (fa[a][i]!=fa[b][i]) a=fa[a][i],b=fa[b][i];</span><br><span class="line">        <span class="keyword">return</span> fa[a][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">PathLen</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deep[a]+deep[b]<span class="number">-2</span>*deep[LCA(a,b)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">cxk</span><span class="params">(<span class="keyword">int</span> path,<span class="keyword">int</span> k)</span></span>&#123;<span class="keyword">return</span> path&lt;=k <span class="keyword">and</span> (k-path)%<span class="number">2</span>==<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        DFS(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> q;R1(q);</span><br><span class="line">        F(i,<span class="number">1</span>,q)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> a,b,x,y,k;</span><br><span class="line">            Rd(<span class="number">5</span>,&amp;x,&amp;y,&amp;a,&amp;b,&amp;k);</span><br><span class="line">            <span class="keyword">int</span> path1=PathLen(a,b);</span><br><span class="line">            <span class="keyword">int</span> path2=PathLen(a,x)+<span class="number">1</span>+PathLen(y,b);</span><br><span class="line">            <span class="keyword">int</span> path3=PathLen(a,y)+<span class="number">1</span>+PathLen(x,b); <span class="comment">//上面讨论的三条路</span></span><br><span class="line">            <span class="keyword">if</span> (cxk(path1,k) <span class="keyword">or</span> cxk(path2,k) <span class="keyword">or</span> cxk(path3,k)) <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Input();</span><br><span class="line">        Soviet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后记：-版权问题"><a href="#后记：-版权问题" class="headerlink" title="后记： 版权问题"></a>后记： 版权问题</h3><p>（不想看就算了）<br>考场上，我想出了这个算法（第一个）。然后我把这个算法告诉了我的好朋友<code>lym</code>。他又把这个算法告诉了他的好朋友<code>zhk</code>。</p><p>最近<code>zhk</code>也像我一样搭了一个hexo博客，他就来找我帮他调试博客的功能。然后我发现了他有一篇文章，就是这个的题解，同步发表于洛谷博客的。我一看这思路似乎很眼熟，便去问他你是怎么想出这思路的。</p><p>（开始回溯）他说，是<code>lym</code>告诉他的，<code>lym</code>给了他一张截图。</p><p>截图：<br><img src="https://lightninguz2.github.io/addons/images/Codeforces1304E_1.png" alt></p><p>你们看这个头像和我的是否有几分相像呢（滑稽）。这真是 缘 分 的 天 空 啊。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="思维" scheme="https://lightninguz2.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="树形结构" scheme="https://lightninguz2.github.io/tags/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>noi.ac 307 洛谷 2391 白雪皑皑(flower) 题解</title>
    <link href="https://lightninguz2.github.io/2020/02/19/noi-ac-307-%E6%B4%9B%E8%B0%B7-2391-%E7%99%BD%E9%9B%AA%E7%9A%91%E7%9A%91-flower-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/02/19/noi-ac-307-洛谷-2391-白雪皑皑-flower-题解/</id>
    <published>2020-02-19T12:23:26.000Z</published>
    <updated>2020-02-19T12:25:58.786Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p><del>老铁们，虽然不是同一个题目，但是是一样的题意，今天我来给大家打一个暴力模拟线段树，奥利给</del></p><p>一个长度为 $n$ 的序列，初始全 $0$ 。有 $m$ 次修改操作。给你两个常数 $p,q$，第 $i$ 次操作会把第 $(i\times p+q)\mod n+1$ 和 $(i\times q+p)\mod n+1$ 之间的所有数赋值为 $i$。求出最后$n$个数的状态。</p><p>$n\le 10^6,m\le 10^7$。</p><h3 id="思路框架"><a href="#思路框架" class="headerlink" title="思路框架"></a>思路框架</h3><p>这个是不一样的做法，是线段树+一点点思维优化。</p><p>（大家似乎都是写的链表做法啊…我不会打链表啊…）</p><p>我们发现$(i\times p+q)\mod n+1$这个式子，可以先把$i$对$n$取膜之后再算！！！也就是说，有很多次区间覆盖操作都是覆盖的同一块区间！</p><p>那么本质不同的修改操作就只有$n$个，再加上最后$m\mod n$个除不尽的。</p><p>特判$m&lt;n$的情况。</p><p>无论哪种情况，复杂度都是$O(n \log n)$的。对于$n\le 10^6$的数据，足够了。</p><h3 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h3><p>显然，在同一个同余系里，最后面那次覆盖的颜色是答案。那么我们把$m$次操作，每$n$个分一块（除不尽的先不管）。显然，最后一块的操作可以把前面几块的操作全部都覆盖掉。所以最后一块是唯一有用的一块。</p><p>$m$除以$n$，可以画出这样的图：</p><p><img src="https://i.loli.net/2020/02/18/XlqZi1oEI9UYnsN.jpg" alt></p><p><code>last</code>指针表示最后一块有用的区间<strong>前面一个位置</strong>，那么最后一块有用的染色操作就是$i=last+1,last+2\cdots last+n$的时候。</p><p>容易计算出 <code>last</code> 指针为：$n(\lfloor\dfrac{m}{n}\rfloor-1)$</p><p>最后$m\mod n$个特判掉。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 1666666</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        F(i,<span class="number">1</span>,cnt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SegmentTree</span> //线段树，区间覆盖，单点求值</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            <span class="keyword">int</span> l,r,c,s;</span><br><span class="line">        &#125;tree[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> ls index&lt;&lt;1</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rs index&lt;&lt;1|1</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> L tree[index].l</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> R tree[index].r</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> S tree[index].s</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> C tree[index].c</span></span><br><span class="line"> </span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lL tree[ls].l</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lR tree[ls].r</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lS tree[ls].s</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lC tree[ls].c</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rL tree[rs].l</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rR tree[rs].r</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rS tree[rs].s</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rC tree[rs].c</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            L=l,R=r;</span><br><span class="line">            <span class="keyword">if</span> (l==r) &#123;S=C=<span class="number">0</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">            <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            Build(l,mid,ls); Build(mid+<span class="number">1</span>,r,rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">ChangeOne</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            C=S=x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(<span class="keyword">int</span> index=<span class="number">1</span>)</span> </span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (C)</span><br><span class="line">            &#123;</span><br><span class="line">                ChangeOne(C,ls); ChangeOne(C,rs);</span><br><span class="line">                C=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Change</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        <span class="comment">//l到r覆盖上x</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l&gt;R <span class="keyword">or</span> L&gt;r) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> (l&lt;=L <span class="keyword">and</span> R&lt;=r) <span class="keyword">return</span> ChangeOne(x,index);</span><br><span class="line">            PushDown(index);</span><br><span class="line">            Change(l,r,x,ls); Change(l,r,x,rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        <span class="comment">//查询第pos个位置的值</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (pos&lt;L <span class="keyword">or</span> R&lt;pos) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (L==R) <span class="keyword">return</span> S;</span><br><span class="line">            PushDown(index);</span><br><span class="line">            <span class="keyword">return</span> Query(pos,ls)+Query(pos,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;T;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n,m,p,q;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Rd(<span class="number">4</span>,&amp;n,&amp;m,&amp;p,&amp;q);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> ll(i) ((i*p+q)%n+1)</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rr(i) ((i*q+p)%n+1)</span></span><br><span class="line">        T.Build(<span class="number">1</span>,n);</span><br><span class="line">        <span class="keyword">if</span> (m&lt;n) <span class="comment">//m&lt;n直接特判</span></span><br><span class="line">        &#123;</span><br><span class="line">            F(i,<span class="number">1</span>,m) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> l=ll(i),r=rr(i); <span class="keyword">if</span> (l&gt;r) swap(l,r);</span><br><span class="line">                <span class="comment">//记得判断l&gt;r的情况</span></span><br><span class="line">                T.Change(l,r,i);</span><br><span class="line">            &#125;</span><br><span class="line">            F(i,<span class="number">1</span>,n) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,T.Query(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> last=(m/n<span class="number">-1</span>)*n;</span><br><span class="line">            F(i,<span class="number">1</span>,n) <span class="comment">//找到最后一块有用的区间</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> l=ll(i),r=rr(i); <span class="keyword">if</span> (l&gt;r) swap(l,r);</span><br><span class="line">                T.Change(l,r,++last);</span><br><span class="line">            &#125;</span><br><span class="line">            F(i,last+<span class="number">1</span>,m) <span class="comment">//最后m%n个也判掉</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> l=ll(i),r=rr(i); <span class="keyword">if</span> (l&gt;r) swap(l,r);</span><br><span class="line">                T.Change(l,r,i);</span><br><span class="line">            &#125;</span><br><span class="line">            F(i,<span class="number">1</span>,n) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,T.Query(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Input();</span><br><span class="line">        Soviet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="思维" scheme="https://lightninguz2.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="数论" scheme="https://lightninguz2.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="线段树" scheme="https://lightninguz2.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>洛谷 2572 bzoj 1858 [SCOI2010]序列操作 题解</title>
    <link href="https://lightninguz2.github.io/2020/02/17/%E6%B4%9B%E8%B0%B7-2572-bzoj-1858-SCOI2010-%E5%BA%8F%E5%88%97%E6%93%8D%E4%BD%9C-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/02/17/洛谷-2572-bzoj-1858-SCOI2010-序列操作-题解/</id>
    <published>2020-02-17T10:45:21.000Z</published>
    <updated>2020-02-17T11:08:22.410Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>你有一个长度为$n$的01序列，支持$m$个操作，操作分五种，形式分别是：</p><ul><li><code>0 l r</code> 从$l$到$r$都变成$0$</li><li><code>1 l r</code> 从$l$到$r$都变成$1$</li><li><code>2 l r</code> 从$l$到$r$全部取反（$0$变成$1$，$1$变成$0$）</li><li><code>3 l r</code> 询问$l$到$r$有多少$1$</li><li><code>4 l r</code> 询问$l$到$r$最长的连续的$1$有多长</li></ul><h3 id="思路框架"><a href="#思路框架" class="headerlink" title="思路框架"></a>思路框架</h3><p>线段树多标记。</p><h3 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h3><p>线段树，分几个方面讲</p><ol><li>每个节点存什么信息</li><li>如何维护这些信息（<code>Update</code> 函数）</li><li><code>lazytag</code> 的优先级，以及如何单节点修改，还有如何 <code>PushDown</code>。</li></ol><h4 id="节点信息"><a href="#节点信息" class="headerlink" title="节点信息"></a>节点信息</h4><p>我们按操作顺序考虑。首先是区间覆盖的操作，那么我们就要维护一个标记，设为 $cover$ 标记（简记为 $C$）。由于 $C$ 取 $0/1$ 都是有意义的，那么就只好用 $-1$ 表示没有标记了。</p><p>然后还有取反操作。那么我们维护一个 $flip$ 标记（简记为 $F$ ），$F=0/1$ 表示区间被取反了$F$ 次。由于取反两次就相当于没有取反，所以 $F$ 只需要设置为 $0/1$ 即珂。</p><p>然后询问有多少个 $1$。显然我们需要维护区间有多少个 $1$ ，设为 $s[1]$ （$s$ 就是 $sum$ 啦）。然后我们发现，取反完之后， $0$ 变成 $1$，$1$ 变成$0$。所以$1$有的标记，$0$ 都要有。所以我们还有维护区间有多少 $0$，设为 $s[0]$。</p><p>然后询问连续的 $1$ 。这个是套路：我们维护从左边起最大连续的 $0/1$ ，设为 $lc[0/1]$（就是<code>left  consecutive</code>的简写 ），还有从右边起最大连续的 $0/1$，设为 $rc[0/1]$。还有最长的连续 $0/1$，记为$x$。（这个名字是瞎jb取的，因为没有名字了）</p><h4 id="如何维护"><a href="#如何维护" class="headerlink" title="如何维护"></a>如何维护</h4><p>众所周知，<code>update</code> 的时候，<code>lazytag</code> 是不重要的。我们直接将其设置为空标记即珂。</p><p>显然，$s[0/1]$ 就直接左子树+右子树即珂。</p><p>$lc[0/1]$ 就先设置成左子树的 $lc$。如果发现它占满了整个左子树，那就要跨越到右子树去了。此时再加上右子树的 $lc$ 即珂。<br>$rc$ 同理。</p><p>然后 $x$（最长连续的 $0/1$）的维护也很容易，就是左子树连续的 $1$，右子树连续的 $1$，还有左子树的右连续（$rc$）+右子树的左连续（$lc$），三个取 $max$。</p><p>（实现小技巧：我们珂以把节点打个 $struct$，然后封装一个加号）<br>先放个代码上来，方便理解<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> l,r,f,c,lc[<span class="number">2</span>],rc[<span class="number">2</span>],s[<span class="number">2</span>],x[<span class="number">2</span>];&#125;; </span><br><span class="line"><span class="comment">//l,r表示当前节点表示的区间</span></span><br><span class="line"><span class="comment">//f,c是两个tag</span></span><br><span class="line"><span class="comment">//lc,rc,s,x和上面一样，表示左连续，右连续，总计数，最大连续</span></span><br><span class="line">node <span class="keyword">operator</span>+(node ls,node rs)</span><br><span class="line">&#123;</span><br><span class="line">    node ans;</span><br><span class="line">    ans.l=ls.l; ans.r=rs.r; <span class="comment">//这个不用我讲吧...</span></span><br><span class="line">    ans.f=<span class="number">0</span>,ans.c=<span class="number">-1</span>; <span class="comment">//标记</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ans.lc[i]=ls.lc[i]; <span class="keyword">if</span> (ls.lc[i]==ls.r-ls.l+<span class="number">1</span>) ans.lc[i]+=rs.lc[i];</span><br><span class="line">        <span class="comment">//默认直接取左儿子的。如果满了，再加上右儿子的左连续</span></span><br><span class="line">        ans.rc[i]=rs.rc[i]; <span class="keyword">if</span> (rs.rc[i]==rs.r-rs.l+<span class="number">1</span>) ans.rc[i]+=ls.rc[i];</span><br><span class="line">        <span class="comment">//rc同理</span></span><br><span class="line">        ans.s[i]=ls.s[i]+rs.s[i];</span><br><span class="line">        <span class="comment">//总计数比较方便，直接左右加起来即珂</span></span><br><span class="line">        ans.x[i]=max(max(ls.x[i],rs.x[i]),ls.rc[i]+rs.lc[i]);</span><br><span class="line">        <span class="comment">//最长连续要分三种情况讨论</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="lazytag的优先级-amp-如何维护lazytag"><a href="#lazytag的优先级-amp-如何维护lazytag" class="headerlink" title="lazytag的优先级&amp;如何维护lazytag"></a>lazytag的优先级&amp;如何维护lazytag</h4><h5 id="单区间修改"><a href="#单区间修改" class="headerlink" title="单区间修改"></a>单区间修改</h5><ol><li><p>覆盖操作：显然，覆盖的优先级绝对大于取反，所以先令 $F=0$。接着，假设我们都覆盖上了$c$，$c=0/1$。然后 $lc[c],rc[c],s[c],x[c]$ 都等于区间长度，而另一个颜色（$c$ 取反）的$lc,rc,s,x$ 都等于$0$。</p></li><li><p>如果是取反的操作，因为是低优先级的操作，所以直接修改 $F$ 标记即珂。由于取反完之后，$0$ 变成 $1$，$1$ 变成 $0$，所以我们只需要把 $lc,rc,s,x$的$0/1$ 两维交换一下即珂。</p></li></ol><h5 id="PushDown"><a href="#PushDown" class="headerlink" title="PushDown"></a>PushDown</h5><p><code>PushDown</code> 的时候，先操作 $C$ 标记，再操作 $F$ 标记。我们下传标记的时候，只对儿子作修改，而不对本身作修改（因为在 <code>PushDown</code> 前面一次单区间修改的时候，应该已经改过了）。所以如果遇到“先覆盖后翻转”的情况，就不会错误地把 $F$ 标记删掉了。而两个儿子也是 $C$ 标记先到，$F$ 后到，所以儿子节点的 $F$ 标记也不会被错删掉。</p><h4 id="一个小问题：如何写最长连续1的Query函数（代码中的QueryLen）"><a href="#一个小问题：如何写最长连续1的Query函数（代码中的QueryLen）" class="headerlink" title="一个小问题：如何写最长连续1的Query函数（代码中的QueryLen）"></a>一个小问题：如何写最长连续1的Query函数（代码中的QueryLen）</h4><p><code>Query</code> 函数返回一个线段树节点即珂。最后取节点的 $x[1]$ 属性，就是最长连续 $1$ 的长度了。</p><h3 id="完整代码（超长）"><a href="#完整代码（超长）" class="headerlink" title="完整代码（超长）"></a>完整代码（超长）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 155555</span></span><br><span class="line">    <span class="comment">// #define F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="comment">// 为了不和F标记重名，删掉了这个define</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125; <span class="comment">//这些都是次要内容</span></span><br><span class="line">    <span class="comment">//以下正片</span></span><br><span class="line">    <span class="comment">//==============================</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> l,r,f,c,lc[<span class="number">2</span>],rc[<span class="number">2</span>],s[<span class="number">2</span>],x[<span class="number">2</span>];&#125;; </span><br><span class="line">    <span class="comment">//一个线段树节点</span></span><br><span class="line">    node <span class="keyword">operator</span>+(node ls,node rs) <span class="comment">//这一段上面有</span></span><br><span class="line">    &#123;</span><br><span class="line">        node ans;</span><br><span class="line">        ans.l=ls.l; ans.r=rs.r;</span><br><span class="line">        ans.f=<span class="number">0</span>,ans.c=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            ans.lc[i]=ls.lc[i]; <span class="keyword">if</span> (ls.lc[i]==ls.r-ls.l+<span class="number">1</span>) ans.lc[i]+=rs.lc[i];</span><br><span class="line">            ans.rc[i]=rs.rc[i]; <span class="keyword">if</span> (rs.rc[i]==rs.r-rs.l+<span class="number">1</span>) ans.rc[i]+=ls.rc[i];</span><br><span class="line">            ans.s[i]=ls.s[i]+rs.s[i];</span><br><span class="line">            ans.x[i]=max(max(ls.x[i],rs.x[i]),ls.rc[i]+rs.lc[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SegmentTree</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        node tree[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> ls index&lt;&lt;1</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rs index&lt;&lt;1|1</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> LC tree[index].lc</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> RC tree[index].rc</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> S  tree[index].s</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> X  tree[index].x</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> L  tree[index].l</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> R  tree[index].r</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> C  tree[index].c</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> F  tree[index].f</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lLC tree[ls].lc</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lRC tree[ls].rc</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lS  tree[ls].s</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lX  tree[ls].x</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lL  tree[ls].l</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lR  tree[ls].r</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lC  tree[ls].c</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lF  tree[ls].f</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rLC tree[rs].lc</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rRC tree[rs].rc</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rS  tree[rs].s</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rX  tree[rs].x</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rL  tree[rs].l</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rR  tree[rs].r</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rC  tree[rs].c</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rF  tree[rs].f <span class="comment">//中二define，让代码简介一点</span></span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> index=<span class="number">1</span>)</span> <span class="comment">//这个似乎就很好写了对吧</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            tree[index]=tree[ls]+tree[rs];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            L=l,R=r;</span><br><span class="line">            <span class="keyword">if</span> (l==r)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">                C=<span class="number">-1</span>;F=<span class="number">0</span>; <span class="comment">// 注意: C的空标记为-1</span></span><br><span class="line">                S[x]=LC[x]=RC[x]=X[x]=<span class="number">1</span>;</span><br><span class="line">                x^=<span class="number">1</span>;</span><br><span class="line">                S[x]=LC[x]=RC[x]=X[x]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            Build(l,mid,ls); Build(mid+<span class="number">1</span>,r,rs);</span><br><span class="line">            Update(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">FlipOne</span><span class="params">(<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            F^=<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//注意: F^=1即珂</span></span><br><span class="line">            swap(LC[<span class="number">0</span>],LC[<span class="number">1</span>]); </span><br><span class="line">            swap(RC[<span class="number">0</span>],RC[<span class="number">1</span>]); </span><br><span class="line">            swap(S[<span class="number">0</span>],S[<span class="number">1</span>]); </span><br><span class="line">            swap(X[<span class="number">0</span>],X[<span class="number">1</span>]);</span><br><span class="line">            <span class="comment">//把0和1对应的属性换一下</span></span><br><span class="line">        &#125; </span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">ChangeOne</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            F=<span class="number">0</span>; <span class="comment">//清空F标记</span></span><br><span class="line">            C=x; </span><br><span class="line">            S[x]=LC[x]=RC[x]=X[x]=R-L+<span class="number">1</span>; <span class="comment">//x的属性全部设置为区间长度,x^1的属性全部为0</span></span><br><span class="line">            x^=<span class="number">1</span>;</span><br><span class="line">            S[x]=LC[x]=RC[x]=X[x]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//封装单区间修改函数，代码看起来结构清晰些(?)</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">//先传C标记，再传F标记</span></span><br><span class="line">            <span class="keyword">if</span> (~C)</span><br><span class="line">            &#123;</span><br><span class="line">                ChangeOne(C,ls); ChangeOne(C,rs);</span><br><span class="line">                C=<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (F)</span><br><span class="line">            &#123;</span><br><span class="line">                FlipOne(ls); FlipOne(rs);</span><br><span class="line">                F=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Change</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> index=<span class="number">1</span>)</span> <span class="comment">//覆盖[l,r]为x</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l&gt;R <span class="keyword">or</span> L&gt;r) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> (l&lt;=L <span class="keyword">and</span> R&lt;=r) <span class="keyword">return</span> ChangeOne(x,index);</span><br><span class="line">            PushDown(index);</span><br><span class="line">            Change(l,r,x,ls); Change(l,r,x,rs);</span><br><span class="line">            Update(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Flip</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> index=<span class="number">1</span>)</span> <span class="comment">//区间[l,r]翻转</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l&gt;R <span class="keyword">or</span> L&gt;r) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> (l&lt;=L <span class="keyword">and</span> R&lt;=r) <span class="keyword">return</span> FlipOne(index);</span><br><span class="line">            PushDown(index);</span><br><span class="line">            Flip(l,r,ls); Flip(l,r,rs);</span><br><span class="line">            Update(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">Query1</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> index=<span class="number">1</span>)</span> <span class="comment">//询问[l,r]中1的数量</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l&gt;R <span class="keyword">or</span> L&gt;r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (l&lt;=L <span class="keyword">and</span> R&lt;=r) <span class="keyword">return</span> S[<span class="number">1</span>];</span><br><span class="line">            PushDown(index);</span><br><span class="line">            <span class="keyword">return</span> Query1(l,r,ls)+Query1(l,r,rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">node <span class="title">QueryLen</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> index=<span class="number">1</span>)</span> <span class="comment">//询问[l,r]中连续1的长度</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l&lt;=L <span class="keyword">and</span> R&lt;=r) <span class="keyword">return</span> tree[index]; <span class="comment">//返回一个线段树节点</span></span><br><span class="line">            PushDown(index);</span><br><span class="line">            <span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (r&lt;=mid) <span class="keyword">return</span> QueryLen(l,r,ls);</span><br><span class="line">            <span class="keyword">if</span> (l&gt;mid)  <span class="keyword">return</span> QueryLen(l,r,rs);</span><br><span class="line">            <span class="keyword">return</span> QueryLen(l,mid,ls)+QueryLen(mid+<span class="number">1</span>,r,rs); <span class="comment">//这样用节点合并就珂以了，是不是很简单呢</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;T;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Rd(<span class="number">2</span>,&amp;n,&amp;m);</span><br><span class="line">        T.Build(<span class="number">1</span>,n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> o,l,r;Rd(<span class="number">3</span>,&amp;o,&amp;l,&amp;r);</span><br><span class="line">            ++l,++r; <span class="comment">//0编号转1编号</span></span><br><span class="line">            <span class="keyword">if</span> (o==<span class="number">0</span>) T.Change(l,r,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (o==<span class="number">1</span>) T.Change(l,r,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (o==<span class="number">2</span>) T.Flip(l,r);</span><br><span class="line">            <span class="keyword">if</span> (o==<span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,T.Query1(l,r));</span><br><span class="line">            <span class="keyword">if</span> (o==<span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,T.QueryLen(l,r).x[<span class="number">1</span>]); <span class="comment">//取x[1]属性就是答案啦</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Input();</span><br><span class="line">        Soviet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="线段树" scheme="https://lightninguz2.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="毒瘤" scheme="https://lightninguz2.github.io/tags/%E6%AF%92%E7%98%A4/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 1169E And Reachability 题解</title>
    <link href="https://lightninguz2.github.io/2020/02/16/Codeforces-1169E-And-Reachability-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/02/16/Codeforces-1169E-And-Reachability-题解/</id>
    <published>2020-02-16T06:56:26.000Z</published>
    <updated>2020-02-16T06:56:41.881Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>给定$n$个数$a1,a2…an$。如果$i&lt;j$且$a[i]\&amp;a[j]$（$\&amp;$ 是按位与运算）非零，则$i\rightarrow j$连一条有向边。$q$次询问，每次给定$xi$和$yi$，查询$xi$是否能到$yi$。</p><p>每个输入的数都&lt;=3e5，并且1&lt;=xi&lt;yi&lt;=n。</p><h3 id="思路框架"><a href="#思路框架" class="headerlink" title="思路框架"></a>思路框架</h3><p>处理$dp[i][j]$表示$i$往后第一个能到并且包含二进制第$j$位的位置。</p><p>然后看是否存在$k$使得$dp[x][k]&lt;y$即珂。</p><h3 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h3><p>讲讲$nex$如何处理。显然$dp[n+1][x]=n+1$，对于所有$x$。维护$dp$同时维护一个$nex[]$，$nex[j]$表示当前位置往后第一个包含二进制第$j$位的数在哪个位置。</p><p>显然，$i\rightarrow nex[j]$是联通的（$\&amp;$一下，至少还有第$j$位）。<br>然后对于一个$i$，枚举$j$如果$i$包含第$j$位，则对于所有$k$，用$dp[nex[j]][k]$更新$dp[i][k]$的最小值。</p><p>然后我们不是枚举$i$中包含第$j$位么，更新完$dp$之后，更新$nex$：$nex[j]=i$。然后记得$dp[i][j]=i$。（自己也能到自己）</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 1666666</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        F(i,<span class="number">1</span>,cnt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n,q,a[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Rd(<span class="number">2</span>,&amp;n,&amp;q);F(i,<span class="number">1</span>,n) R1(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> dp[N][<span class="number">22</span>];</span><br><span class="line">    <span class="keyword">int</span> nex[<span class="number">22</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        MEM(dp,<span class="number">0x3f</span>);</span><br><span class="line">        F(i,<span class="number">0</span>,<span class="number">20</span>) nex[i]=n+<span class="number">1</span>,dp[n+<span class="number">1</span>][i]=n+<span class="number">1</span>;</span><br><span class="line">        D(i,n,<span class="number">1</span>) F(j,<span class="number">0</span>,<span class="number">20</span>) <span class="keyword">if</span> (a[i]&amp;(<span class="number">1</span>&lt;&lt;j))</span><br><span class="line">        &#123;</span><br><span class="line">            F(k,<span class="number">0</span>,<span class="number">20</span>) dp[i][k]=min(dp[i][k],dp[nex[j]][k]); </span><br><span class="line">            dp[i][j]=i;</span><br><span class="line">            nex[j]=i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        F(i,<span class="number">1</span>,q)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x,y;Rd(<span class="number">2</span>,&amp;x,&amp;y);</span><br><span class="line">            <span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">            F(j,<span class="number">0</span>,<span class="number">20</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((a[y]&amp;(<span class="number">1</span>&lt;&lt;j)) <span class="keyword">and</span> dp[x][j]&lt;=y) &#123;flag=<span class="number">1</span>;<span class="keyword">break</span>;&#125; <span class="comment">//找到一个就有解</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">puts</span>(flag?<span class="string">"Shi"</span>:<span class="string">"Fou"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Input();</span><br><span class="line">        Soviet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="预处理" scheme="https://lightninguz2.github.io/tags/%E9%A2%84%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>洛谷 3660 bzoj 4994 Why Did the Cow Cross the Road III 题解</title>
    <link href="https://lightninguz2.github.io/2020/02/16/%E6%B4%9B%E8%B0%B7-3660-bzoj-4994-Why-Did-the-Cow-Cross-the-Road-III-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/02/16/洛谷-3660-bzoj-4994-Why-Did-the-Cow-Cross-the-Road-III-题解/</id>
    <published>2020-02-16T06:39:23.000Z</published>
    <updated>2020-02-16T06:40:45.324Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>（bzoj，十分简洁，直接蒯来了）<br>给定长度为2N的序列，1~N各处现过2次，i第一次出现位置记为ai，第二次记为bi，求满足ai&lt;aj&lt;bi&lt;bj的对数<br>n&lt;=1e5。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>相当于有$n$个区间$a_i,b_i$，求相交的区间对数。</p><p>那么我们把它转化为，对于每个$a_i,b_i$，统计区间里面包含多少其它区间的左端点或右端点，而它的另一个端点不能出现在$[a_i,b_i]$中。</p><p>那么能否直接求包含的端点数呢？可以！我们把区间按长度从大到小排序，那么已经考虑的区间肯定比当前的区间长，不珂能出现两个端点同时在里面的情况。然后直接用树状数组统计端点数即珂。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;using namespace std;</span></span></span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 155555</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> int long long  <span class="comment">//记得开long long </span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        F(i,<span class="number">1</span>,cnt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BIT</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">            <span class="keyword">int</span> tree[N];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">BuildTree</span><span class="params">(<span class="keyword">int</span> _len)</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                len=_len;</span><br><span class="line">                FK(tree);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> val=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=pos;i&lt;=len;i+=(i&amp;(-i)))</span><br><span class="line">                &#123;</span><br><span class="line">                    tree[i]+=val;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=pos;i&gt;<span class="number">0</span>;i-=(i&amp;(-i)))</span><br><span class="line">                &#123;</span><br><span class="line">                    ans+=tree[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">RQuery</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;<span class="keyword">return</span> Query(r)-Query(l<span class="number">-1</span>);&#125;</span><br><span class="line">    &#125;T;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> l,r;&#125;a[N]; <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(node a,node b)&#123;<span class="keyword">return</span> a.r-a.l&gt;b.r-b.l;&#125; <span class="comment">//从大到小排序</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        MEM(a,<span class="number">-1</span>);</span><br><span class="line">        R1(n);</span><br><span class="line">        F(i,<span class="number">1</span>,<span class="number">2</span>*n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x;R1(x);</span><br><span class="line">            <span class="keyword">if</span> (a[x].l==<span class="number">-1</span>) a[x].l=i;</span><br><span class="line">            <span class="keyword">else</span> a[x].r=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//读入的时候顺便求出n个区间的左端点，右端点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        T.BuildTree(<span class="number">100000</span>);</span><br><span class="line">        F(i,<span class="number">1</span>,n)</span><br><span class="line">        &#123;</span><br><span class="line">            ans+=T.RQuery(a[i].l,a[i].r);</span><br><span class="line">            T.Add(a[i].l,<span class="number">1</span>); T.Add(a[i].r,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Input();</span><br><span class="line">        Soviet();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> int <span class="comment">//long long </span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="思维" scheme="https://lightninguz2.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="树状数组" scheme="https://lightninguz2.github.io/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="枚举顺序" scheme="https://lightninguz2.github.io/tags/%E6%9E%9A%E4%B8%BE%E9%A1%BA%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>bzoj 4373 洛谷 5728 算术天才⑨与等差数列 题解</title>
    <link href="https://lightninguz2.github.io/2020/02/16/bzoj-4373-%E6%B4%9B%E8%B0%B7-5728-%E7%AE%97%E6%9C%AF%E5%A4%A9%E6%89%8D%E2%91%A8%E4%B8%8E%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/02/16/bzoj-4373-洛谷-5728-算术天才⑨与等差数列-题解/</id>
    <published>2020-02-16T06:25:45.000Z</published>
    <updated>2020-02-17T23:46:42.195Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>给定给一个序列，每次支持：</p><ol><li>单点修改</li><li>询问一段区间是否能排列成一个公差为$d$的等差数列<br>（强制在线）</li></ol><p>区间长度$3e5$，其它的值域都在$[0,1e9]$之间。</p><h3 id="思路框架"><a href="#思路框架" class="headerlink" title="思路框架"></a>思路框架</h3><p>维护区间和？显然能构造出一种情况卡掉。</p><p>那怎么办？维护区间平方和！然后看看是否和等差数列的平方和相等即珂。和很容易相等，但是平方和在$1e9$的范围内，就不太容易相等了。然后为了防止溢出，我们把答案对一个大质数取膜。</p><p>然后就是高能线段树+高能数论了。</p><h4 id="求等差数列平方和"><a href="#求等差数列平方和" class="headerlink" title="求等差数列平方和"></a>求等差数列平方和</h4><p>等差数列，首项为$a$，公差为$d$，项数为$n$。</p><p>要求$\sum\limits_{i=0}^{n-1} (a+id)^2$。</p><p>拆开括号，然后把$d$提出来，套各种公式，得到结果为：</p><p>$na^2+2ad\times s(n-1)+d^2s2(n-1)$</p><p>其中$s(n)=1+2+3…+n=n(n+1)/2$，$s_2(n)=1^2+2^2+3^2…+n^2=\dfrac{n(n+1)(2n+1)}{6}$。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 555555</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> mod 2305843009213693967ll</span></span><br><span class="line">    <span class="comment">//这个质数是2^63-1的下一个质数</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> i6  384307168202282328ll</span></span><br><span class="line">    <span class="comment">//6的逆元</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> i2  1152921504606846984ll</span></span><br><span class="line">    <span class="comment">//2的逆元</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        F(i,<span class="number">1</span>,cnt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SegmentTree</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            <span class="keyword">int</span> l,r;</span><br><span class="line">            <span class="keyword">int</span> s,mn,mx;</span><br><span class="line">        &#125;tree[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> ls index&lt;&lt;1</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rs index&lt;&lt;1|1</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> L tree[index].l</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> R tree[index].r</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> S tree[index].s</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> M tree[index].mn</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> X tree[index].mx</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lL tree[ls].l</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lR tree[ls].r</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lS tree[ls].s</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lM tree[ls].mn</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lX tree[ls].mx</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rL tree[rs].l</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rR tree[rs].r</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rS tree[rs].s</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rM tree[rs].mn</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rX tree[rs].mx</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            M=min(lM,rM); X=max(lX,rX);</span><br><span class="line">            S=(lS+rS)%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            L=l,R=r;</span><br><span class="line">            <span class="keyword">if</span> (l==r)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> x;R1(x);S=(x*x)%mod;M=X=x;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            Build(l,mid,ls);</span><br><span class="line">            Build(mid+<span class="number">1</span>,r,rs);</span><br><span class="line">            Update(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Change</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> x,<span class="keyword">int</span> index=<span class="number">1</span>)</span> <span class="comment">//单点修改</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (pos&lt;L <span class="keyword">or</span> R&lt;pos) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> (L==R) &#123;S=(x*x)%mod;M=X=x;<span class="keyword">return</span>;&#125;</span><br><span class="line">            Change(pos,x,ls); Change(pos,x,rs);</span><br><span class="line">            Update(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">QueryMin</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> index=<span class="number">1</span>)</span> </span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l&gt;R <span class="keyword">or</span> L&gt;r) <span class="keyword">return</span> mod; <span class="comment">//INF</span></span><br><span class="line">            <span class="keyword">if</span> (l&lt;=L <span class="keyword">and</span> R&lt;=r) <span class="keyword">return</span> M;</span><br><span class="line">            <span class="keyword">return</span> min(QueryMin(l,r,ls),QueryMin(l,r,rs));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">QueryMax</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l&gt;R <span class="keyword">or</span> L&gt;r) <span class="keyword">return</span> -mod; <span class="comment">//-INF</span></span><br><span class="line">            <span class="keyword">if</span> (l&lt;=L <span class="keyword">and</span> R&lt;=r) <span class="keyword">return</span> X;</span><br><span class="line">            <span class="keyword">return</span> max(QueryMax(l,r,ls),QueryMax(l,r,rs));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">QuerySum</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> index=<span class="number">1</span>)</span> <span class="comment">//最小，最大，平方和</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l&gt;R <span class="keyword">or</span> L&gt;r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (l&lt;=L <span class="keyword">and</span> R&lt;=r) <span class="keyword">return</span> S;</span><br><span class="line">            <span class="keyword">return</span> (QuerySum(l,r,ls)+QuerySum(l,r,rs))%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;T;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n,q;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Rd(<span class="number">2</span>,&amp;n,&amp;q);</span><br><span class="line">        T.Build(<span class="number">1</span>,n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">smul</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> r=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (b&amp;<span class="number">1</span>) r=(r+a)%mod;</span><br><span class="line">            a=(a&lt;&lt;<span class="number">1</span>)%mod;</span><br><span class="line">            b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sqrs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> smul(i6,smul(x,smul(x+<span class="number">1</span>,<span class="number">2</span>*x+<span class="number">1</span>)))%mod;&#125;</span><br><span class="line">    <span class="comment">//1~x的平方和</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">ArethSum</span><span class="params">(<span class="keyword">int</span> a1,<span class="keyword">int</span> d,<span class="keyword">int</span> n)</span> <span class="comment">//首项a1，公差d，项数n的等差数列和</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans1=smul(n,smul(a1,a1))%mod; <span class="comment">//n*a1^2</span></span><br><span class="line">        <span class="keyword">int</span> ans2=smul(a1&lt;&lt;<span class="number">1</span>,smul(d,smul(n,smul(n<span class="number">-1</span>,i2))))%mod;</span><br><span class="line">        <span class="comment">//2ad*n*(n-1)/2</span></span><br><span class="line">        <span class="keyword">int</span> ans3=smul(smul(d,d),sqrs(n<span class="number">-1</span>))%mod; </span><br><span class="line">        <span class="comment">//d^2*sqrs(n-1)</span></span><br><span class="line">        <span class="keyword">return</span> (ans1+ans2+ans3)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> yes_cnt=<span class="number">0</span>;</span><br><span class="line">        F(i,<span class="number">1</span>,q)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> o;R1(o);</span><br><span class="line">            <span class="keyword">if</span> (o==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> pos,x;Rd(<span class="number">2</span>,&amp;pos,&amp;x);</span><br><span class="line">                pos^=yes_cnt; x^=yes_cnt;</span><br><span class="line">                T.Change(pos,x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (o==<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> l,r,d;Rd(<span class="number">3</span>,&amp;l,&amp;r,&amp;d); l^=yes_cnt;r^=yes_cnt;d^=yes_cnt;</span><br><span class="line">                <span class="keyword">int</span> Min=T.QueryMin(l,r),Max=T.QueryMax(l,r),s=T.QuerySum(l,r);</span><br><span class="line">                <span class="keyword">int</span> len=r-l+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (len==<span class="number">1</span>) &#123;<span class="built_in">puts</span>(<span class="string">"Yes"</span>);++yes_cnt;  <span class="keyword">continue</span>;&#125;</span><br><span class="line">                <span class="comment">//这个特判下</span></span><br><span class="line">                <span class="keyword">if</span> (Min+(len<span class="number">-1</span>)*d!=Max) &#123;<span class="built_in">puts</span>(<span class="string">"No"</span>); <span class="keyword">continue</span>;&#125; </span><br><span class="line">                <span class="comment">//这个项数不对的也要特判下</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> ss=ArethSum(Min,d,len);</span><br><span class="line">                <span class="keyword">if</span> (ss==s) <span class="built_in">puts</span>(<span class="string">"Yes"</span>),++yes_cnt;</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Input();</span><br><span class="line">        Soviet();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> int <span class="comment">//long long </span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数论" scheme="https://lightninguz2.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="线段树" scheme="https://lightninguz2.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="毒瘤" scheme="https://lightninguz2.github.io/tags/%E6%AF%92%E7%98%A4/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 1304C Air Conditioner 题解</title>
    <link href="https://lightninguz2.github.io/2020/02/16/Codeforces-1304C-Air-Conditioner-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/02/16/Codeforces-1304C-Air-Conditioner-题解/</id>
    <published>2020-02-16T06:08:32.000Z</published>
    <updated>2020-02-16T06:09:49.373Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>你有一个空调（<del>承太郎</del>），初始温度为$m$，有$n$个客人。第$i$个客人会在$t_i$的时间过来，适应的温度在$[l_i,r_i]$之间。每一个时刻，空调珂以让气温升高$1$（制热），减少$1$（制冷），或者不变（关掉空调）。</p><p>请问你能否满足所有顾客的适应温度？输出$YES/NO$。</p><p>$n&lt;=1e6$，其余输入数据的<strong>绝对值</strong>都$&lt;=1e9$。 （原来是$n&lt;=100$，但是$n&lt;=1e6$也能做）</p><h3 id="思路框架"><a href="#思路框架" class="headerlink" title="思路框架"></a>思路框架</h3><p>首先，将所有的顾客按$t_i$排序（显然）。</p><p>定义两个数$l,r$。初始$l=r=m$。</p><p>然后对于每个顾客，$[l,r]$两端都向外扩展$t_i-t_{i-1}$个长度（$l$减去这个数，$r$加上这个数）。然后和$[l_i,r_i]$取一下交集。看看最后$[l,r]$是否非空，如果非空，输出$YES$，否则$NO$。</p><h3 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h3><h4 id="如何得到这个算法的"><a href="#如何得到这个算法的" class="headerlink" title="如何得到这个算法的"></a>如何得到这个算法的</h4><p>（排序肯定是第一个想到的）</p><p>一开始我还以为这个是贪心之类的，然后我就在想，从第$i-1$个人到第$i$个人，到底该停留在哪个决策点呢？</p><p>后来我就从能得到的区间开始考虑：初始温度为$x$，经过$t$时刻，能得到的区间是$[x-t,x+t]$。</p><p>然后我就有了一个灵感：我们不用具体决策到哪一个点，我们只需要知道能到哪一个<strong>区间</strong>就珂以了！</p><p>于是就有了下面这个算法。</p><h4 id="算法的解释-amp-正确性"><a href="#算法的解释-amp-正确性" class="headerlink" title="算法的解释&amp;正确性"></a>算法的解释&amp;正确性</h4><p>$[l,r]$表示当前空调在满足所有顾客需求的情况下能调整到的温度范围。初始值为$[m,m]$是显然的（第$0$时刻，空调还没开）</p><p>然后从第$i-1$个人到第$i$个人，经过了$t_i-t_{i-1}$个时刻。最小的情况显然是全开制冷，最大的情况显然是全开制热。而且，容易证明，在这段区间中所有的温度都能得到。当然，我们还要考虑上新进来的第$i$个顾客，所以扩展完这个区间还要和$[l_i,r_i]$取一下交集。</p><p>然后到最后看看这个范围是否非空即珂。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 155555</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        F(i,<span class="number">1</span>,cnt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> t,l,r;&#125; a[N]; <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(node a,node b)&#123;<span class="keyword">return</span> a.t&lt;b.t;&#125;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Rd(<span class="number">2</span>,&amp;n,&amp;m);</span><br><span class="line">        F(i,<span class="number">1</span>,n) Rd(<span class="number">3</span>,&amp;a[i].t,&amp;a[i].l,&amp;a[i].r);</span><br><span class="line">        sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l=m,r=m;</span><br><span class="line">        F(i,<span class="number">1</span>,n)</span><br><span class="line">        &#123;</span><br><span class="line">            l-=(a[i].t-a[i<span class="number">-1</span>].t);</span><br><span class="line">            r+=(a[i].t-a[i<span class="number">-1</span>].t);</span><br><span class="line">            l=max(l,a[i].l);</span><br><span class="line">            r=min(r,a[i].r);</span><br><span class="line">            <span class="keyword">if</span> (l&gt;r) &#123;<span class="built_in">puts</span>(<span class="string">"NO"</span>);<span class="keyword">return</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t;R1(t);</span><br><span class="line">        F(i,<span class="number">1</span>,t)</span><br><span class="line">        &#123;</span><br><span class="line">            Input();</span><br><span class="line">            Soviet();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="思维" scheme="https://lightninguz2.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="贪心" scheme="https://lightninguz2.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>noi.ac 34 洛谷 4656 libreoj 2484 [CEOI2017]Palindromic Partitions 题解</title>
    <link href="https://lightninguz2.github.io/2020/02/16/noi-ac-34-%E6%B4%9B%E8%B0%B7-4656-libreoj-2484-CEOI2017-Palindromic-Partitions-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/02/16/noi-ac-34-洛谷-4656-libreoj-2484-CEOI2017-Palindromic-Partitions-题解/</id>
    <published>2020-02-16T05:40:06.000Z</published>
    <updated>2020-02-16T05:46:57.903Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>（noi.ac题面被改过了，题意是一样的）</p><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>给你一个字符串$S$，长度$1e6$。<br>$S$的一个$k$个串的划分$a_1,a_2…a_k$，满足：对于任意的$i$，$a_i=a_{k-i+1}$，这就是$S$的一个“回文划分”，它被分成了$k$块。<br>请你求$S$中被分成的块数最多的一个回文划分，输出这个最多的块数。</p><p>比如样例中的“bonobo”这个串，最大的划分就是“bo/no/bo”，3块。</p><h3 id="思路框架"><a href="#思路框架" class="headerlink" title="思路框架"></a>思路框架</h3><p>从两边往中间，每次找最短的串，使得它在前面和后面同时出现（哈希判断）。</p><p>到最后，如果$n$为奇数，或者中间一块不能再分了，就把答案$+1$（中间一块单独划分出来）。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;using namespace std;</span></span></span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 1666666</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> hint unsigned long long <span class="comment">//自然溢出的哈希</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        F(i,<span class="number">1</span>,cnt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> a[N]; <span class="keyword">int</span> n;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,a+<span class="number">1</span>); n=<span class="built_in">strlen</span>(a+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        hint base=<span class="number">79</span>;</span><br><span class="line">        hint s1=<span class="number">0</span>,s2=<span class="number">0</span>,b=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        F(i,<span class="number">1</span>,n/<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s1=s1*base+a[i]; <span class="comment">//在s1后面加入a[i]</span></span><br><span class="line">            s2=s2+a[n-i+<span class="number">1</span>]*b; <span class="comment">//在s2的前面加入a[i]</span></span><br><span class="line">            b*=base;</span><br><span class="line">            <span class="keyword">if</span> (s1==s2) &#123;ans+=<span class="number">2</span>;s1=s2=<span class="number">0</span>,b=<span class="number">1</span>;&#125; <span class="comment">//找到第一个满足条件就记录答案</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n%<span class="number">2</span> <span class="keyword">or</span> s1) ++ans;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t;R1(t);</span><br><span class="line">        <span class="keyword">while</span>(t--)</span><br><span class="line">        &#123;</span><br><span class="line">            Input();</span><br><span class="line">            Soviet();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="思维" scheme="https://lightninguz2.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="水题" scheme="https://lightninguz2.github.io/tags/%E6%B0%B4%E9%A2%98/"/>
    
      <category term="哈希" scheme="https://lightninguz2.github.io/tags/%E5%93%88%E5%B8%8C/"/>
    
  </entry>
  
  <entry>
    <title>noi.ac 36 列队 题解</title>
    <link href="https://lightninguz2.github.io/2020/02/15/noi-ac-36-%E5%88%97%E9%98%9F-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/02/15/noi-ac-36-列队-题解/</id>
    <published>2020-02-15T12:50:06.000Z</published>
    <updated>2020-02-15T12:57:58.935Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>有一个$n\times m$的矩阵$a$，每个数是$[1,n\times m]$之间的整数，并且互不相同。然后有$Q$次询问，每次询问给定$x,y$，问你有多少个数满足：它在行中是第$x$大，在列中是第$y$大。</p><p>$n,m&lt;=1000,Q&lt;=5e5$。</p><h3 id="思路框架"><a href="#思路框架" class="headerlink" title="思路框架"></a>思路框架</h3><p>设$x[i][j]$表示$a[i][j]$在第$i$行里第几大，$y[i][j]$表示$a[i][j]$在第$j$列第几大。<br>设$ans[i][j]$表示在行里排第$i$大，列里排第$j$大的数有多少。对于所有$i,j$，$ans[x[i][j]][y[i][j]$++。</p><p>每次询问输出$ans[x][y]$即珂。$O(nmlog(n+m)+Q)$</p><p>$x[i][j]$和$y[i][j]$，您珂以用一个$lower_bound$解决，或者像我一样$sb$的写一个树状数组。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 1333</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        F(i,<span class="number">1</span>,cnt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BIT</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">            <span class="keyword">int</span> tree[N*N];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">BuildTree</span><span class="params">(<span class="keyword">int</span> _len)</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                len=_len;</span><br><span class="line">                FK(tree);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> val=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=pos;i&lt;=len;i+=(i&amp;(-i)))</span><br><span class="line">                &#123;</span><br><span class="line">                    tree[i]+=val;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=pos;i&gt;<span class="number">0</span>;i-=(i&amp;(-i)))</span><br><span class="line">                &#123;</span><br><span class="line">                    ans+=tree[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;T;</span><br><span class="line">    <span class="keyword">int</span> n,m,q;</span><br><span class="line">    <span class="keyword">int</span> a[N][N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Rd(<span class="number">3</span>,&amp;n,&amp;m,&amp;q);</span><br><span class="line">        F(i,<span class="number">1</span>,n) F(j,<span class="number">1</span>,m) R1(a[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> line[N][N],col[N][N];</span><br><span class="line">    <span class="keyword">int</span> ans[N][N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        T.BuildTree(n*m);</span><br><span class="line">        F(i,<span class="number">1</span>,n) </span><br><span class="line">        &#123;</span><br><span class="line">            F(j,<span class="number">1</span>,m) T.Add(a[i][j],<span class="number">1</span>);</span><br><span class="line">            F(j,<span class="number">1</span>,m) line[i][j]=m-T.Query(a[i][j])+<span class="number">1</span>;</span><br><span class="line">            F(j,<span class="number">1</span>,m) T.Add(a[i][j],<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        F(j,<span class="number">1</span>,m)</span><br><span class="line">        &#123;</span><br><span class="line">            F(i,<span class="number">1</span>,n) T.Add(a[i][j],<span class="number">1</span>);</span><br><span class="line">            F(i,<span class="number">1</span>,n) col[i][j]=n-T.Query(a[i][j])+<span class="number">1</span>;</span><br><span class="line">            F(i,<span class="number">1</span>,n) T.Add(a[i][j],<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        F(i,<span class="number">1</span>,n) F(j,<span class="number">1</span>,m) ans[line[i][j]][col[i][j]]++;</span><br><span class="line">        F(i,<span class="number">1</span>,q)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x,y;Rd(<span class="number">2</span>,&amp;x,&amp;y);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[x][y]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Input();</span><br><span class="line">        Soviet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="思维" scheme="https://lightninguz2.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="树状数组" scheme="https://lightninguz2.github.io/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="预处理" scheme="https://lightninguz2.github.io/tags/%E9%A2%84%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>noi.ac 782 【CSP2019模拟 Day 2】a 题解</title>
    <link href="https://lightninguz2.github.io/2020/02/15/noi-ac-782-%E3%80%90CSP2019%E6%A8%A1%E6%8B%9F-Day-2%E3%80%91a-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/02/15/noi-ac-782-【CSP2019模拟-Day-2】a-题解/</id>
    <published>2020-02-15T12:24:38.000Z</published>
    <updated>2020-02-17T23:54:34.174Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>一个长度为$n&lt;=1e5$的序列，支持两种操作：</p><ol><li>等概率随机打乱区间$[l,r]$</li><li>求区间$[l,r]$和的期望值</li></ol><p>所有结果（珂能是分数形式）都对$998244353$取膜。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>打乱区间$[l,r]$相当于把$l,r$中的数都变成$a[l…r]$的平均值。线段树，区间覆盖区间求和，即珂。</p><h3 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h3><p>为什么这个思路是对的？</p><p>随机打乱区间$l,r$，对于$[l,r]$中的某一个数$x$，因为是等概率随机打乱，所以它出现在每一个位置的概率都是相等的，都是$\dfrac{1}{r-l+1}$。所以，$[l,r]$被打乱之后，每个位置的期望都是相等的，它都等于$a[l…r]$的平均值。</p><p>那至少区间不重叠的时候，这个算法就正确了。</p><p>那么如果我们的区间有重叠怎么办呢？重叠了还正确么？</p><p>我们先明确一下期望的概念：$E(x)$表示$x$的期望值，其中$x$是随机变量，而$E(x)$是一个<strong>确定的数</strong>，表示$x$的期望。</p><p>而我们知道，$E(C)=C$，也就是“常数的期望等于本身”。所以$E(E(x))=E(x)$，换句话说，期望套几层都是不变的。</p><p>所以我们在期望的基础上求期望，求“期望的期望”，求出来的还是“期望”，不是别的。</p><p>所以答案就是正确的了。膜数有点大，记得开$long long$。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 155555</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        F(i,<span class="number">1</span>,cnt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SegmentTree</span></span></span><br><span class="line"><span class="class">    //线段树</span></span><br><span class="line"><span class="class">    //<span class="title">Build</span>(<span class="title">l</span>,<span class="title">r</span>):</span> 建树,区间为l,r</span><br><span class="line">    <span class="comment">//Change(l,r,x): 覆盖x在[l,r]上</span></span><br><span class="line">    <span class="comment">//Query(l,r): 询问[l,r]的和</span></span><br><span class="line">    <span class="comment">//好了，请跳到第106行</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            <span class="keyword">int</span> l,r,s,a;</span><br><span class="line">        &#125;tree[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> ls index&lt;&lt;1</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rs index&lt;&lt;1|1</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> L tree[index].l</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> R tree[index].r</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> S tree[index].s</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> A tree[index].a</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lL tree[ls].l</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lR tree[ls].r</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lS tree[ls].s</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lA tree[ls].a</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rL tree[rs].l</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rR tree[rs].r</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rS tree[rs].s</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rA tree[rs].a</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            S=lS+rS;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            L=l,R=r;A=<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span> (l==r) &#123;R1(S);<span class="keyword">return</span>;&#125;</span><br><span class="line">            <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            Build(l,mid,ls); Build(mid+<span class="number">1</span>,r,rs);</span><br><span class="line">            Update(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">ChangeOne</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            x%=mod;</span><br><span class="line">            A=x;</span><br><span class="line">            S=(x*(R-L+<span class="number">1</span>))%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (A!=<span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ChangeOne(A,ls);</span><br><span class="line">                ChangeOne(A,rs);</span><br><span class="line">                A=<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Change</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l&gt;R <span class="keyword">or</span> L&gt;r) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> (l&lt;=L <span class="keyword">and</span> R&lt;=r) <span class="keyword">return</span> ChangeOne(x,index);</span><br><span class="line">            PushDown(index);</span><br><span class="line">            Change(l,r,x,ls); Change(l,r,x,rs);</span><br><span class="line">            Update(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l&gt;R <span class="keyword">or</span> L&gt;r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (l&lt;=L <span class="keyword">and</span> R&lt;=r) <span class="keyword">return</span> S;</span><br><span class="line">            PushDown(index);</span><br><span class="line">            <span class="keyword">return</span> (Query(l,r,ls)+Query(l,r,rs))%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;T;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Rd(<span class="number">2</span>,&amp;n,&amp;m);</span><br><span class="line">        T.Build(<span class="number">1</span>,n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> r=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (b&amp;<span class="number">1</span>) r=r*a%mod;</span><br><span class="line">            a=a*a%mod,b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">mod_div</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> a*qpow(b,mod<span class="number">-2</span>)%mod;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        F(i,<span class="number">1</span>,m)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> o,l,r;Rd(<span class="number">3</span>,&amp;o,&amp;l,&amp;r);</span><br><span class="line">            <span class="keyword">if</span> (o==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> s=T.Query(l,r)%mod,c=(r-l+<span class="number">1</span>);</span><br><span class="line">                T.Change(l,r,mod_div(s,c));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (o==<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,T.Query(l,r)%mod);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Input();</span><br><span class="line">        Soviet();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> int <span class="comment">//long long </span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="思维" scheme="https://lightninguz2.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="线段树" scheme="https://lightninguz2.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="期望" scheme="https://lightninguz2.github.io/tags/%E6%9C%9F%E6%9C%9B/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 1294E Obtain a Permutation 题解</title>
    <link href="https://lightninguz2.github.io/2020/02/13/Codeforces-1294E-Obtain-a-Permutation-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/02/13/Codeforces-1294E-Obtain-a-Permutation-题解/</id>
    <published>2020-02-13T13:24:37.000Z</published>
    <updated>2020-02-13T13:25:20.761Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>有一个$n$行$m$列的矩阵$a$，每次你可以做两个操作：</p><ol><li>改变某一个元素的值</li><li>对某一列做一次循环位移<br>然后你要使得每个i,j满足$a[i][j]=(i-1)\times n+j$。问最少需要多少次操作<br>$n\times m&lt;=2e5$，元素值域为$[1,2e5]$</li></ol><h3 id="思路框架"><a href="#思路框架" class="headerlink" title="思路框架"></a>思路框架</h3><p>列之间显然是不影响的。考虑每列单独出来考虑。接下来都是在列里面讨论问题的。</p><p>像这种问“循环位移需要多少次操作”的题目，一般要设一个数组$move[i]$表示移动$i$次能有多少匹配。这个很好处理，对于每个数，我们找到它应该在哪个位置，和它实际所在的位置相减去绝对值，设为$d$。那么$move[d]$++。其原因是，当前的这个数移动$d$次就到了它该在的地方，所以就给$move[d]$贡献了一个答案。$O(n)$就能预处理一遍。</p><p>然后我们枚举移动了多少下。移动$i$下之后，花费$i$的代价，能匹配上$move[i]$个。但是还剩下$n-move[i]$个，就需要用操作$1$来直接修改，花费的代价就是$n-move[i]$。<br>总代价就是$i+n-move[i]$。然后枚举$i$从$1$到$n$，取最小即珂。</p><p>每一列都这样求一遍答案，把答案加起来，就是总答案了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 255555</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        F(i,<span class="number">1</span>,cnt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a[N];</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Rd(<span class="number">2</span>,&amp;n,&amp;m);</span><br><span class="line">        F(i,<span class="number">0</span>,n<span class="number">-1</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            a[i].push_back(<span class="number">0</span>);</span><br><span class="line">            F(j,<span class="number">1</span>,m) &#123;<span class="keyword">int</span> x;R1(x);a[i].p_b(x);&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> move[N];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> col)</span> <span class="comment">//求第col列的答案</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        F(i,<span class="number">0</span>,n<span class="number">-1</span>) move[i]=<span class="number">0</span>; <span class="comment">//记得清空</span></span><br><span class="line">        <span class="comment">//不要用memset，万一n=1，m=1e5，就浪费时间了！</span></span><br><span class="line">        F(i,<span class="number">0</span>,n<span class="number">-1</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u=a[i][col]-col; </span><br><span class="line">            <span class="comment">//在第col列的满足条件的数有一个共同点，就是它%m==col。</span></span><br><span class="line">            <span class="keyword">if</span> (u%m==<span class="number">0</span>) <span class="keyword">if</span> (<span class="number">0</span>&lt;=u/m <span class="keyword">and</span> u/m&lt;n) ++move[(i-u/m+n)%n];</span><br><span class="line">            <span class="comment">//先判断它是否珂能属于这一列，然后计算它移动多少步能归位</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">        F(i,<span class="number">0</span>,n) ans=min(ans,i+n-move[i]); </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        F(i,<span class="number">1</span>,m) ans+=calc(i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Input();</span><br><span class="line">        Soviet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="思维" scheme="https://lightninguz2.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>noi.ac 73 道路重建 题解</title>
    <link href="https://lightninguz2.github.io/2020/02/13/noi-ac-73-%E9%81%93%E8%B7%AF%E9%87%8D%E5%BB%BA-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/02/13/noi-ac-73-道路重建-题解/</id>
    <published>2020-02-13T13:11:42.000Z</published>
    <updated>2020-02-13T13:16:20.050Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>有一个$n$个节点的图，还有$m$条边。找到一颗生成树，使得最大边和最小边之间差最小。</p><p>n&lt;=2000，m&lt;=15000，边权&lt;=2e9。</p><h3 id="思路框架"><a href="#思路框架" class="headerlink" title="思路框架"></a>思路框架</h3><p>边按边权排序；枚举最小边，枚举最大边，直到联通为止$break$。并查集维护。</p><p>看起来是$O(m^2)$，但实际情况会快很多。</p><h3 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h3><p>上面没有细讲的，有一个小优化：<br>我们枚举边$i$，$j$从$i$到$m$枚举最大边。</p><p>如果$j=m$了，而且此时图还不连通，就直接整个$break$。因为$i$越大，加入的边越少，就更加不连通了。</p><p>而且数据似乎比较水，所以对于每个$i$，往后枚举$n$个$j$左右，图就能完全联通了。所以实际跑起来，复杂度更接近$O(nm)$。</p><p>然后这题就水过去了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;using namespace std;namespace Flandre_Scarlet</span></span></span><br><span class="line">&#123;    <span class="meta">#<span class="meta-keyword">define</span> N 34444ll</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i<span class="meta-string">&lt;=r;++i)    #define D(i,r,l) for(int i=r;i&gt;=l;--i)    #define Fs(i,l,r,c) for(int i=l;i&lt;=r;c)    #define Ds(i,r,l,c) for(int i=r;i&gt;=l;c)    #define MEM(x,a) memset(x,a,sizeof(x))    #define FK(x) MEM(x,0)    #define Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))    #define p_b push_back</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())    #<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        F(i,<span class="number">1</span>,cnt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> u,v,w;&#125;E[N]; <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(node a,node b)&#123;<span class="keyword">return</span> a.w&lt;b.w;&#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DSU</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> Fa[N],Cnt[N];</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;F(i,<span class="number">1</span>,min(n,N<span class="number">-1</span>)) Fa[i]=i,Cnt[i]=<span class="number">1</span>;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">int</span>  <span class="title">Find</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">return</span> u==Fa[u]?u:Fa[u]=Find(Fa[u]);&#125;</span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> au=Find(u),av=Find(v);</span><br><span class="line">            <span class="keyword">if</span> (au==av) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (Cnt[au]&lt;Cnt[av]) Cnt[av]+=Cnt[au],Fa[au]=av;</span><br><span class="line">            <span class="keyword">else</span>                 Cnt[au]+=Cnt[av],Fa[av]=au;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;D;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Rd(<span class="number">2</span>,&amp;n,&amp;m);</span><br><span class="line">        F(i,<span class="number">1</span>,m)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u,v,w;Rd(<span class="number">3</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">            E[i]=(node)&#123;u,v,w&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(E+<span class="number">1</span>,E+m+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">1e18</span>;</span><br><span class="line">        F(i,<span class="number">1</span>,m) <span class="comment">//枚举最小边</span></span><br><span class="line">        &#123;</span><br><span class="line">            D.Init(n);</span><br><span class="line">            <span class="keyword">int</span> pos=<span class="number">-1</span>;</span><br><span class="line">            F(j,i,m) <span class="comment">//枚举最大边</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> u=E[j].u,v=E[j].v;</span><br><span class="line">                D.Merge(u,v);</span><br><span class="line">                <span class="keyword">if</span> (D.Cnt[D.Find(<span class="number">1</span>)]==n) &#123;pos=j;<span class="keyword">break</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pos==<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> ans=min(ans,E[pos].w-E[i].w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans==<span class="number">1e18</span>?<span class="number">-1</span>:ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Input();</span><br><span class="line">        Soviet();</span><br><span class="line">    &#125;    <span class="meta">#<span class="meta-keyword">undef</span> int <span class="comment">//long long &#125;int main()&#123;</span></span></span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="并查集" scheme="https://lightninguz2.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="生成树" scheme="https://lightninguz2.github.io/tags/%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>51nod 1105 第k大的数 题解</title>
    <link href="https://lightninguz2.github.io/2020/02/13/51nod-1105-%E7%AC%ACk%E5%A4%A7%E7%9A%84%E6%95%B0-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/02/13/51nod-1105-第k大的数-题解/</id>
    <published>2020-02-13T12:28:00.000Z</published>
    <updated>2020-02-20T15:09:12.771Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>有两个序列$a$和$b$，长度都是$n&lt;=1e5$，并且$a_i,b_i&lt;=1e9$。然后有一个矩阵$A$，其中$A[i][j]=a_i\times b_j$。找到矩阵中第$k$大的元素$k&lt;=1e9$且$k&lt;=n^2$。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>二分一个$mid$，然后找$A$中有多少个数大于$mid$。显然，$mid$越大，大于$mid$的个数就越小，满足单调性。</p><p>在一个都是整数的集合中，$x$是第$k$大，那么$x$是最小的满足大于$x$的数小于$k$个的。二分即珂。</p><h3 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h3><p>主要问题在于，我们如何求$A$中有多少个数比$x$大。</p><p>我们把$a$和$b$排一下序。原因是，我们只需要求$A$中第$k$大，只需要知道有哪些数就珂以了，具体的排列顺序不重要。</p><p>而排完了序以后，$A$矩阵的递增性应该是从上往下，从左往右的。（就是说，越靠下，右方的数的越大）。那么，$&gt;x$的数所在的区域就是右下角的一片三角形区域。草图大概就长这样：<br><img src="https://lightninguz2.github.io/addons/images/51nod1105_1.jpg" alt></p><p>设$p_i$表示第$i$行第一个满足条件的列号，那么该行满足条件的总数量就是$n-p_i+1$。而且，$p_i$还有单调性！维护一个单调的指针即珂（数组都不用！）</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 155555</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        F(i,<span class="number">1</span>,cnt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="keyword">int</span> a[N],b[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Rd(<span class="number">2</span>,&amp;n,&amp;k); </span><br><span class="line">        F(i,<span class="number">1</span>,n) Rd(<span class="number">2</span>,&amp;a[i],&amp;b[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">big</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">//求有多少个比x大</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> p=<span class="number">1</span>; <span class="comment">//单调指针p</span></span><br><span class="line">        D(i,n,<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(a[i]*b[p]&lt;=x <span class="keyword">and</span> p&lt;=n) ++p; <span class="comment">//p显然只会往右移</span></span><br><span class="line">            <span class="keyword">if</span> (p==n+<span class="number">1</span>) <span class="keyword">break</span>; <span class="comment">//记得及时break掉，现在就没有解，往上面数字更小，更加没有解了</span></span><br><span class="line">            ans+=(n-p+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//i会右移n次</span></span><br><span class="line">        <span class="comment">//p会右移总共n次</span></span><br><span class="line">        <span class="comment">//均摊O(n)</span></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>); sort(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line">        a[n+<span class="number">1</span>]=<span class="number">1e9</span>,b[n+<span class="number">1</span>]=<span class="number">1e9</span>; <span class="comment">//放一个边界，防止p越界</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">1e18</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (big(mid)&lt;k) r=mid; <span class="comment">//有&lt;k个比mid大，说明mid偏大（或者正好），要减小</span></span><br><span class="line">            <span class="keyword">else</span> l=mid+<span class="number">1</span>; <span class="comment">//否则mid严格偏小</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,l);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Input();</span><br><span class="line">        Soviet();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> int <span class="comment">//long long </span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="二分答案" scheme="https://lightninguz2.github.io/tags/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/"/>
    
      <category term="思维" scheme="https://lightninguz2.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>洛谷 6070 [RC-02]GCD 题解</title>
    <link href="https://lightninguz2.github.io/2020/02/10/%E6%B4%9B%E8%B0%B7-6070-RC-02-GCD-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/02/10/洛谷-6070-RC-02-GCD-题解/</id>
    <published>2020-02-09T16:32:33.572Z</published>
    <updated>2020-02-06T16:43:55.788Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>求$\sum\limits_{i=1}^{n}\sum\limits_{j=1}^{n} \sum\limits_{p=1}^{n/j} \sum\limits_{q=1}^{n/j} [gcd(i,j)==1][gcd(p,q)==1]$。答案对998244353取膜。</p><p>$n&lt;=2e9$。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>原式<br>$=\sum\limits_{i=1}^{n}\sum\limits_{j=1}^{n} [gcd(i,j)==1]\sum\limits_{p=1}^{n} \sum\limits_{q=1}^{n} [gcd(p,q)==j]$<br>$=\sum\limits_{i=1}^{n} \sum\limits_{p=1}^{n} \sum\limits_{q=1}^{n} [gcd(i,p,q)==1]$<br>$=\sum\limits_{d=1}^{n}\mu(d) \sum\limits_{i=1}^{n} \sum\limits_{p=1}^{n} \sum\limits_{q=1}^{n} [d|gcd(i,p,q)]$<br>$=\sum\limits_{d=1}^{n}\mu(d) \sum\limits_{i=1}^{n/d} \sum\limits_{p=1}^{n/d} \sum\limits_{q=1}^{n/d} [1|gcd(i,p,q)]$<br>$=\sum\limits_{d=1}^{n} \mu(d)\times (n/d)^3$</p><p>整除分块+杜教筛。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 1666666</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> mod 998244353ll</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        F(i,<span class="number">1</span>,cnt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> primes[N],mu[N];<span class="keyword">bool</span> notp[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=<span class="number">1e6</span>;</span><br><span class="line">        notp[<span class="number">1</span>]=<span class="number">1</span>; mu[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> &amp;cnt=primes[<span class="number">0</span>];</span><br><span class="line">        F(i,<span class="number">2</span>,n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!notp[i]) primes[++cnt]=i,mu[i]=<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt <span class="keyword">and</span> i*primes[j]&lt;=n;++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> u=primes[j];</span><br><span class="line">                notp[i*u]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (i%u) mu[i*u]=-mu[i];</span><br><span class="line">                <span class="keyword">else</span> &#123;mu[i*u]=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        F(i,<span class="number">2</span>,n) mu[i]+=mu[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; s; </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">smu</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">//求mu的和</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x&lt;=<span class="number">1e6</span>) <span class="keyword">return</span> mu[x];</span><br><span class="line">        <span class="keyword">if</span> (s[x]) <span class="keyword">return</span> s[x];</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">2</span>,r;l&lt;=x;l=r+<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            r=x/(x/l);</span><br><span class="line">            ans-=(r-l+<span class="number">1</span>)*smu(x/l);</span><br><span class="line">        &#125;</span><br><span class="line">        ans=(ans%mod+mod)%mod;</span><br><span class="line">        <span class="keyword">return</span> s[x]=ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        R1(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">RangeMu</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;<span class="keyword">return</span> (smu(r)%mod-smu(l<span class="number">-1</span>)%mod+mod)%mod;&#125; <span class="comment">//求区间[l,r]内mu的和，膜mod</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pow3</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x*x%mod*x%mod;&#125; <span class="comment">//求x^3%mod</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>,r;l&lt;=n;l=r+<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            r=n/(n/l);</span><br><span class="line">            ans+=RangeMu(l,r)*pow3(n/l)%mod;</span><br><span class="line">            ans%=mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Init();</span><br><span class="line">        Input();</span><br><span class="line">        Soviet();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> int <span class="comment">//long long </span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数论" scheme="https://lightninguz2.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="毒瘤" scheme="https://lightninguz2.github.io/tags/%E6%AF%92%E7%98%A4/"/>
    
      <category term="数论函数" scheme="https://lightninguz2.github.io/tags/%E6%95%B0%E8%AE%BA%E5%87%BD%E6%95%B0/"/>
    
      <category term="杜教筛" scheme="https://lightninguz2.github.io/tags/%E6%9D%9C%E6%95%99%E7%AD%9B/"/>
    
  </entry>
  
  <entry>
    <title>洛谷 5947 [POI2003]Trinomial 题解</title>
    <link href="https://lightninguz2.github.io/2020/02/10/%E6%B4%9B%E8%B0%B7-5947-POI2003-Trinomial-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/02/10/洛谷-5947-POI2003-Trinomial-题解/</id>
    <published>2020-02-09T16:32:33.564Z</published>
    <updated>2020-02-04T13:24:27.145Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>$T$组数据。给定$n,m$，求$(x^2+x+1)^n$中，$x^m$项的系数是多少。答案对$3$取膜。<br>（这个膜数很神奇！注意！突破点就在这！）</p><p>$T&lt;=1e4$，$n&lt;=1e15$，$m&lt;=2n$。</p><h3 id="思路框架"><a href="#思路框架" class="headerlink" title="思路框架"></a>思路框架</h3><p>答案是$C_{2n}^m\times (m\% 2+1)$，对$3$取膜（写个$Lucas$即可）</p><h3 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h3><p>首先，我们分括号讨论。因为是$(x^2+x+1)^n$，所以有$n$个括号，并且每个括号可以出$x^2,x,1$。然后我们要求，有多少种方案使得每个括号中出的数积为$x^m$。</p><p>我们开始打草稿：我们把$n$个括号从$1$到$n$顺序编号，每个括号上面有两个复选框。打了几个勾，就是代表出$x$的多少次方。具体来说就是：<br>一个都没打勾，代表出$x^0$（$x^0$就是$1$）；其中一个打了勾，代表出$x$；两个都打了勾，代表出$x^2$。</p><p>如图所示是$n=4$的情况：<br><img src="https://i.loli.net/2020/02/04/DsbuTYf5nrc3mRk.jpg" alt="blog1.jpg"></p><p>我们这样勾选：<br><img src="https://i.loli.net/2020/02/04/4E2JqIRoXkTnzha.jpg" alt="blog2.jpg"></p><p>那就相当于：<br>第一个括号出$x$<br>第二个括号出$x^2$<br>第三个括号出$x$<br>第四个括号出$x$<br>那它就会给$x^5$那一项贡献一种情况。</p><p>那么我们现在考虑$x^m$项的系数，换句话说就是有多少种方法凑出$x^m$。</p><p>显然，上面的复选框中，我们每打一个勾，乘出来就多一个$x$。（上面打了$5$个勾，乘起来就是$x^5$）然后一共有$2n$个复选框，所以答案就是$C_{2n}^m$。</p><p>这就完了？不！这样考虑有重复的！</p><p>假如第$i$个括号出的是$x$，那就相当于在$i$上面两个复选框中，<strong>其中一个</strong>要打勾。而我们<strong>只在意数量</strong>，具体打勾打上面那个框还是下面的那个，<strong>是一样的</strong>。那就会把一个答案算两遍，所以要除以$2$。</p><p>假设我们有$k$个括号出的是$x$，那么我们的答案就要除以一个$2^k$。</p><p>首先，$k$和$m$肯定是同奇偶的。</p><blockquote><p>稍微证一下（会证跳过）： 有$k$个括号出$x$，那剩下$x^{m-k}$都是由出$1$或$x^2$组成的。$m-k$由若干个$0$和$2$相加而成，所以$m-k$是偶数。所以$m$和$k$同奇偶。</p></blockquote><p>然后，在模三意义下，<strong>2的逆元就是其本身</strong>！所以，除以一个$2^k$，就相当于乘以一个$2^k$。</p><p>还没完，我们继续化。我们发现，$2$的幂除以$3$的余数是：$2,1,2,1,2,1…$。具体点说，$2^k\% 3=(k\% 2)+1$。而$k$和$m$又同奇偶，所以，所有的$k\% 2+1$都等于$m\% 2+1$。</p><p>综上，我们的答案就是$C_{2n}^m\times (m\% 2+1)$。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        F(i,<span class="number">1</span>,cnt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Rd(<span class="number">2</span>,&amp;n,&amp;m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> c[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span> <span class="comment">//卢卡斯定理求C(n,m)%3</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">0</span> <span class="keyword">and</span> m==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> C(n/<span class="number">3</span>,m/<span class="number">3</span>)*c[n%<span class="number">3</span>][m%<span class="number">3</span>]%<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        c[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        c[<span class="number">1</span>][<span class="number">1</span>]=c[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        c[<span class="number">2</span>][<span class="number">0</span>]=c[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">1</span>;c[<span class="number">2</span>][<span class="number">1</span>]=<span class="number">2</span>; <span class="comment">//预处理&lt;3的组合数</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,C(<span class="number">2</span>*n,m)*(m%<span class="number">2</span>+<span class="number">1</span>)%<span class="number">3</span>); <span class="comment">//用上面的式子</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t;R1(t);</span><br><span class="line">        F(i,<span class="number">1</span>,t)</span><br><span class="line">        &#123;</span><br><span class="line">            Input();</span><br><span class="line">            Soviet();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> int <span class="comment">//long long </span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="思维" scheme="https://lightninguz2.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="数论" scheme="https://lightninguz2.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="组合数学" scheme="https://lightninguz2.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
      <category term="转换思维" scheme="https://lightninguz2.github.io/tags/%E8%BD%AC%E6%8D%A2%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>洛谷 5826 【模板】子序列自动机 题解</title>
    <link href="https://lightninguz2.github.io/2020/02/10/%E6%B4%9B%E8%B0%B7-5826-%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%AD%90%E5%BA%8F%E5%88%97%E8%87%AA%E5%8A%A8%E6%9C%BA-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/02/10/洛谷-5826-【模板】子序列自动机-题解/</id>
    <published>2020-02-09T16:32:33.554Z</published>
    <updated>2019-12-21T16:16:25.827Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>你以为我只是单纯的子序列自动机吗？其实我是是子序列自动机+可持久化数组哒！</p><p>但是我看见一个大神给出了一个特别神仙又巧妙的思路！我不禁要写一篇题解记录下这神奇的思路！</p><p>而且<strong>代码贼短</strong>哦~比可持久化数组好写到不知道多少倍呢www</p><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>给定一个序列$A$长度&lt;=1e5，还要一些要询问的字符串$B$，长度和$&lt;=1e6$。对于每个$B$，询问其是否是$A$的子序列。序列中的每个值都在$1e5$以内。</p><h3 id="思路框架"><a href="#思路框架" class="headerlink" title="思路框架"></a>思路框架</h3><p>在暴力匹配子序列的时候，用链表（或者vector）记录哪些询问的答案会被更新即珂。复杂度$O(1e6+1e5)$。</p><h3 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h3><p>这个思路是洛谷上一个叫“丁文涛2004”的神仙写的一个“链式前向星-子序列自动机”。非常强大。借这篇文章膜一下这个巨佬。</p><p>正片开始。我们知道，朴素的子序列的查询是$O(|A|\times |B|)$的。我们大约是这样写的：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> p=<span class="number">1</span>;</span><br><span class="line">F(i,<span class="number">1</span>,|A|) <span class="keyword">if</span> (A[i]==B[p]) ++p;</span><br></pre></td></tr></table></figure></p><p>然后判断是否p==|B|。其中$p$表示我们当前匹配到了哪一个位置。</p><p>子序列自动机：设$nxt[i][j]$表示$i$往后第一个值为$j$的出现在哪一个位置。这样的确方便查询，但是这里值域$1e5$，这个做法显然没救了。</p><p>考虑优化第一个方法：把所有的询问放到一块来处理。那么，当我们找到一个A[i]的时候，所有满足B[p]==A[i]的p都会执行p++操作。</p><p>那么我们只要记录所有B[p]==A[i]的B[p]都在哪些位置就好了。所以，首先要用一个链表（链式前向星），把$B$的值按输入顺序串起来。然后要用一个链表把$B$按值域分类。具体的，记$head[i]$表示$B$中值为$i$的数最后一个出现的位置，$nxt[i]$表示$B$中前一个和$B[i]$相同的。然后我们令$cur=head[xxx]$，不断的令$cur=nxt[cur]$，就珂以找到$B$中所有值为$xxx$的位置了。</p><p>然后，我们在把$B$按输入顺序穿起来的时候，对于每个$B$的<strong>最后一个字符</strong>，我们令它的下一个值为$-i$，其中$i$为这个$B$在输入中的编号。这样，</p><blockquote><p>“既判定了匹配到了末尾，又判定了当前所在的字符串（的编号，博主注），可谓一举两得~”（作者原话）</p></blockquote><p>关于如何处理询问：<br>我们以$A$为基准，不断在$B$中找到匹配。对于每个$A[i]$，我们通过遍历前向星找到$B$中值为$A[i]$的位置。如果这个位置是最后一个位置，那么这个$B$就匹配成功，我们标记它是$A$的子序列。否则，我们把原来的指针指向$B[i]$的删掉，连接上$B[i+1]$，就是实现上面的$p++$操作。</p><p>然后我们发现，如果匹配成功了，也要删掉指针。那就不如在遍历到$A[i]$的时候，直接全部清空好了。（链式前向星清空很简单，只要令$head[A[i]]=0$即珂。）</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 1666666</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> type,n,q,m;<span class="comment">//type:没什么用，给你骗分用的。满分的代码是不需要骗分的。</span></span><br><span class="line">    <span class="keyword">int</span> a[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        R1(type);R1(n),R1(q),R1(m);</span><br><span class="line">        F(i,<span class="number">1</span>,n) R1(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len[N],nxtb[N],valb[N],cntb; <span class="comment">//按输入顺序记录B的链表们www</span></span><br><span class="line">    <span class="comment">//len[i]:  第i个询问中B的长度</span></span><br><span class="line">    <span class="comment">//nxtb[i]: 用来把B串起来。记录下标。一般nxt[i]=i+1。如果i到末尾了，那么nxtb[i]=-id。</span></span><br><span class="line">    <span class="comment">//id为这个B的编号。这一步的妙处上面说了</span></span><br><span class="line">    <span class="comment">//valb[i]: 和nxtb区别，这个是记录B的值。</span></span><br><span class="line">    <span class="comment">//cntb:    总共有多少个点。到最后，它的值就等于len[i]的和。  </span></span><br><span class="line">    <span class="keyword">int</span> node[N],head[N],nxt[N],cntval; <span class="comment">//按B的值域分类记录的链表们www</span></span><br><span class="line">    <span class="comment">//node[i]: 记录点在B中的编号,方便求出nxtb</span></span><br><span class="line">    <span class="comment">//head[i]: 记录B中最后一个值为i的位置(这边的位置是在链表中的位置，而不是B中的位置)。</span></span><br><span class="line">    <span class="comment">//nxt[i]:  记录B中下一个和i的值相同的位置。</span></span><br><span class="line">    <span class="keyword">bool</span> cxk[N];</span><br><span class="line">    <span class="comment">//cxk[i]:  第i个询问是否是子序列</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> <span class="comment">//B中值为u的位置添加上一个v</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        node[++cntval]=v;nxt[cntval]=head[u];head[u]=cntval;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> YES (putchar(<span class="meta-string">'Y'</span>),putchar(<span class="meta-string">'e'</span>),putchar(<span class="meta-string">'s'</span>),putchar(<span class="meta-string">'\n'</span>))</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> NO  (putchar(<span class="meta-string">'N'</span>),putchar(<span class="meta-string">'o'</span>),putchar(<span class="meta-string">'\n'</span>))</span></span><br><span class="line">        <span class="comment">//卡常数,putchar快，比puts快一些呢</span></span><br><span class="line"></span><br><span class="line">        cntval=cntb=<span class="number">0</span>; <span class="comment">//初始化(没什么用)</span></span><br><span class="line">        F(i,<span class="number">1</span>,q)</span><br><span class="line">        &#123;</span><br><span class="line">            R1(len[i]);</span><br><span class="line">            R1(valb[++cntb]);Add(valb[cntb],cntb); <span class="comment">//把B串起来，顺便记录值域</span></span><br><span class="line">            F(j,<span class="number">2</span>,len[i])</span><br><span class="line">            &#123;</span><br><span class="line">                nxtb[cntb]=cntb+<span class="number">1</span>;R1(valb[++cntb]); <span class="comment">//串起来B</span></span><br><span class="line">            &#125; </span><br><span class="line">            nxtb[cntb]=-i; <span class="comment">//好东西，上面讲了</span></span><br><span class="line">        &#125;</span><br><span class="line">        F(i,<span class="number">1</span>,n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> cur=head[a[i]];head[a[i]]=<span class="number">0</span>; <span class="comment">//删他娘的</span></span><br><span class="line">            <span class="keyword">for</span>(;cur!=<span class="number">0</span>;cur=nxt[cur])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> u=node[cur],v=nxtb[u];</span><br><span class="line">                <span class="keyword">if</span> (v&lt;<span class="number">0</span>) cxk[-v]=<span class="number">1</span>; <span class="comment">//v&lt;0，说明到了末尾</span></span><br><span class="line">                <span class="keyword">else</span> Add(valb[v],v); <span class="comment">//否则就新加上</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        F(i,<span class="number">1</span>,q)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (cxk[i]) YES;</span><br><span class="line">            <span class="keyword">else</span> NO;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Input();</span><br><span class="line">        Soviet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="字符串" scheme="https://lightninguz2.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="思维" scheme="https://lightninguz2.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="链表" scheme="https://lightninguz2.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>洛谷 5631 最小mex生成树</title>
    <link href="https://lightninguz2.github.io/2020/02/10/%E6%B4%9B%E8%B0%B7-5631-%E6%9C%80%E5%B0%8Fmex%E7%94%9F%E6%88%90%E6%A0%91/"/>
    <id>https://lightninguz2.github.io/2020/02/10/洛谷-5631-最小mex生成树/</id>
    <published>2020-02-09T16:32:33.544Z</published>
    <updated>2020-01-26T03:55:08.536Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>mex(S)表示集合S中没有出现的最小自然数。给定一个n个点m条边的带权无向图，求生成一颗树，使得边权集合的mex值最小。</p><p>n&lt;=1e6,m&lt;=2e6。边权范围是1e5。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>暴力思路：检验一个值x，把边权不等于x的边权加入，判断是否能生成树</p><p>小小优化：先把边按边权排序。然后用分治法，$calc(l,r)$表示：边权在$[l,r]$之间的边没有加入。每次添加$[l,mid]$求$[mid+1,r]$，添加$[mid+1,r]$求$[l,mid]$，递归求解，即珂。可撤销并查集维护。固定范围内的边权，显然具有单调性。传参数的时候再传一个单调指针。这样就不会在找边上浪费时间。</p><p>时间复杂度$O(nlogmlogw)$。然鹅完全跑不满，所以能过。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 2000006</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        F(i,<span class="number">1</span>,cnt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DSU</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> Fa[N],Cnt[N];</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;F(i,<span class="number">0</span>,N<span class="number">-1</span>) Fa[i]=i,Cnt[i]=<span class="number">1</span>;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> Fa[x]==x?x:Fa[x]=Find(Fa[x]);&#125;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> au=Find(u),av=Find(v);</span><br><span class="line">            <span class="keyword">if</span> (au==av) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (Cnt[au]&lt;Cnt[av]) &#123;Cnt[av]+=Cnt[au],Fa[au]=av;<span class="keyword">return</span> au;&#125;</span><br><span class="line">            <span class="keyword">else</span>                 &#123;Cnt[au]+=Cnt[av],Fa[av]=au;<span class="keyword">return</span> av;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Del</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;Cnt[Fa[u]]-=Cnt[u],Fa[u]=u;&#125;</span><br><span class="line">        <span class="comment">//与正常并查集不同，有删除操作</span></span><br><span class="line">    &#125;D;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> u,v,w;&#125;E[N]; <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(node a,node b)&#123;<span class="keyword">return</span> a.w&lt;b.w;&#125;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Rd(<span class="number">2</span>,&amp;n,&amp;m);</span><br><span class="line">        F(i,<span class="number">1</span>,m) Rd(<span class="number">3</span>,&amp;E[i].u,&amp;E[i].v,&amp;E[i].w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos)</span> <span class="comment">//pos：单调指针</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l==r)  <span class="comment">//只有一个没有加入</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//能形成生成树</span></span><br><span class="line">            <span class="keyword">if</span> (D.Cnt[D.Find(<span class="number">1</span>)]==n) &#123;<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,l);<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">            <span class="comment">//由于我们是先求[l,mid]，再求[mid+1,r]，所以到l==r的时候，应该是先找到小的，再找到大的（类似线段树）</span></span><br><span class="line">            <span class="comment">//那么，只要找到第一个就珂以exit(0)了</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> cur=pos,tmp=<span class="number">0</span>; <span class="comment">//加入[mid+1,r]，求[l,mid]的解</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">        <span class="keyword">for</span>(;E[pos].w&lt;=r <span class="keyword">and</span> pos&lt;=m;++pos) <span class="comment">//加入[mid+1,r]之间的边</span></span><br><span class="line">        <span class="comment">//用一个vector记录我们加入的哪些边（方便撤销）</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (E[pos].w&gt;mid <span class="keyword">and</span> (tmp=D.Merge(E[pos].u,E[pos].v))) v.p_b(tmp); </span><br><span class="line">        &#125;</span><br><span class="line">        calc(l,mid,cur);</span><br><span class="line">        D(i,sz(v)<span class="number">-1</span>,<span class="number">0</span>) D.Del(v[i]); <span class="comment">//记得撤销</span></span><br><span class="line">        v.clear();</span><br><span class="line"></span><br><span class="line">        pos=cur,tmp=<span class="number">0</span>; <span class="comment">//同理，加入[l,mid]的边，求[mid+1,r]的解</span></span><br><span class="line">        <span class="keyword">for</span>(;E[pos].w&lt;=mid <span class="keyword">and</span> pos&lt;=m;++pos) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (tmp=D.Merge(E[pos].u,E[pos].v)) v.p_b(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        calc(mid+<span class="number">1</span>,r,pos);</span><br><span class="line">        D(i,sz(v)<span class="number">-1</span>,<span class="number">0</span>) D.Del(v[i]);</span><br><span class="line">        v.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sort(E+<span class="number">1</span>,E+m+<span class="number">1</span>);</span><br><span class="line">        D.Init();</span><br><span class="line">        calc(<span class="number">0</span>,E[m].w,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Input();</span><br><span class="line">        Soviet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="思维" scheme="https://lightninguz2.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="生成树" scheme="https://lightninguz2.github.io/tags/%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
      <category term="分治" scheme="https://lightninguz2.github.io/tags/%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>洛谷 5080 Tweetuzki 爱序列 题解</title>
    <link href="https://lightninguz2.github.io/2020/02/10/%E6%B4%9B%E8%B0%B7-5080-Tweetuzki-%E7%88%B1%E5%BA%8F%E5%88%97-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/02/10/洛谷-5080-Tweetuzki-爱序列-题解/</id>
    <published>2020-02-09T16:32:33.533Z</published>
    <updated>2020-02-17T23:55:10.790Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>给一个集合$a$，大小为$n$。请你选出若干个数，按某种顺序排好，对于每个数（除了最后一个），它的下一个数要么是他两倍，要么是它$\dfrac{1}{3}$。你最多能从$a$选出多少个数满足这样的条件？</p><p>$n&lt;=1e5$，$1&lt;=a_i&lt;=3e18$。</p><p>比如${4,8,16,12,24}$，最多就是选出$4$个数，按$12,24,8,16$的顺序排好。容易验证，这样是最长的。</p><h3 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h3><p>我们开一个$map$，记为$pos$。$pos[x]$表示$x$出现的位置。然后$i$向$pos[2\times a[i]]$和$pos[a[i]/3]$连边，如果$pos!=0$。这样我们就建好了一张后继图。图上任意一条路径，就是一个合法的选择方案。（显然）</p><p>然后我们讲一下为什么是$DAG$。我们走一条边，要么是乘2，要么是除3，而$2$和$3$是互质的，所以$\dfrac{2^x}{3^y}$不珂能是$1$。也就是说，一个点不会到自己。再换句话，<strong>图上没环</strong>。</p><p>然后就是实现方面的问题了。记得开$longlong$。</p><h3 id="精髓总结"><a href="#精髓总结" class="headerlink" title="精髓总结"></a>精髓总结</h3><p>关键就是要想到图是个DAG！</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;using namespace std;</span></span></span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 255555</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        F(i,<span class="number">1</span>,cnt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n,a[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        R1(n);F(i,<span class="number">1</span>,n) R1(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pos;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nex[N];</span><br><span class="line">    <span class="keyword">int</span> ideg[N],odeg[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>&#123;nex[u].p_b(v);++ideg[v],++odeg[u];&#125;</span><br><span class="line">    <span class="keyword">int</span> dp[N],pre[N]; <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PrintPath</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pre[u]==<span class="number">-1</span>) &#123;<span class="built_in">printf</span>(<span class="string">"%lld"</span>,a[u]);<span class="keyword">return</span>;&#125;</span><br><span class="line">        PrintPath(pre[u]);<span class="built_in">printf</span>(<span class="string">" %lld"</span>,a[u]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        F(i,<span class="number">1</span>,n) pos[a[i]]=i;</span><br><span class="line">        F(i,<span class="number">1</span>,n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i]%<span class="number">3</span>==<span class="number">0</span> <span class="keyword">and</span> pos[a[i]/<span class="number">3</span>]!=<span class="number">0</span>) Add(i,pos[a[i]/<span class="number">3</span>]);</span><br><span class="line">            <span class="keyword">if</span> (pos[a[i]&lt;&lt;<span class="number">1</span>]) Add(i,pos[a[i]&lt;&lt;<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        FK(dp);</span><br><span class="line">        F(i,<span class="number">1</span>,n) <span class="keyword">if</span> (!ideg[i]) Q.push(i),dp[i]=<span class="number">1</span>,pre[i]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(!Q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u=Q.front();Q.pop();</span><br><span class="line">            F(j,<span class="number">0</span>,sz(nex[u])<span class="number">-1</span>)</span><br><span class="line">            &#123;<span class="keyword">int</span> v=nex[u][j];</span><br><span class="line">                <span class="keyword">if</span> (dp[u]+<span class="number">1</span>&gt;dp[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[v]=dp[u]+<span class="number">1</span>;pre[v]=u;</span><br><span class="line">                &#125;</span><br><span class="line">                --ideg[v];</span><br><span class="line">                <span class="keyword">if</span> (ideg[v]==<span class="number">0</span>) Q.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> Maxk=max_element(dp+<span class="number">1</span>,dp+n+<span class="number">1</span>)-dp;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dp[Maxk]);</span><br><span class="line">        PrintPath(Maxk);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Input();</span><br><span class="line">        Soviet();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> int <span class="comment">//long long </span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="思维" scheme="https://lightninguz2.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
</feed>
