<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Flandre Scarlet 的小屋</title>
  
  <subtitle>LightningUZ 的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lightninguz2.github.io/"/>
  <updated>2020-03-14T20:08:11.830Z</updated>
  <id>https://lightninguz2.github.io/</id>
  
  <author>
    <name>LightningUZ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>洛谷 5308 [COCI2019] Quiz 题解</title>
    <link href="https://lightninguz2.github.io/2020/03/15/%E6%B4%9B%E8%B0%B7-5308-COCI2019-Quiz-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/03/15/洛谷-5308-COCI2019-Quiz-题解/</id>
    <published>2020-03-14T20:07:08.000Z</published>
    <updated>2020-03-14T20:08:11.830Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>有 $n$ 个人，$k$ 轮比赛。每次如果淘汰了 $x$ 个人，还剩下 $m$ 个人，得分增加 $\dfrac{x}{m}$ 的奖金。。假设你能控制每次淘汰多少人，最大化得分。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>设 $dp[i]$ 表示现在还剩下 $i$ 个人的最优方案 （先不考虑轮数）。</p><p>那么 $dp[i]=max(dp[j]+\dfrac{i-j}{i})$，其中 $0\le j&lt;i$</p><p>显然能斜率优化。</p><p>觉得不显然的小伙伴们看一下：<br><div><div class="fold_hider"><div class="close hider_title">点击</div></div><div class="fold"><p>斜率优化式子：<br>若 $j\ge k$ 且 $j$ 优于 $k$，那么<br>$dp[j]+\dfrac{i-j}{i}&gt;dp[k]+\dfrac{i-k}{i}$<br>$dp[j]-\dfrac{j}{i}&gt;dp[k]-\dfrac{k}{i}$<br>$dp[j]-dp[k]&gt;\dfrac{j-k}{i}$<br>由于 $j\ge k$，所以 $j-k&gt;0$，直接除<br>$\dfrac{dp[j]-dp[k]}{j-k}&gt;\dfrac{1}{i}$</p><p>也就是 $slope(k,j)&gt;\dfrac{1}{i}$ 时，$k$ 就没用了。</p><p>而如果每一个时刻 $k$ 没用了，后面 $i$ 更大，$\dfrac{1}{i}$ 更小，$k$ 更不可能有用。这个是弹队首的条件。</p><p>其次可以看出来，这个队列是斜率单调递减的。这个就是加入队尾的条件。</p></div></div></p><p>然后我们就发现一个问题：$k$ 的限制怎么办？</p><p>上 $wqs$ 二分： 对于每个转移过来的 $j$，我们给他加上一个附加权值 $x$。显然，$x$ 加的越多，选的段数越少。转移的时候记录一下段数，二分即可。</p><p>最后的答案是 $ans-x\times k$，一定要记住了，是 $k$。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div><div class="fold_hider"><div class="close hider_title">点击</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 155555</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> EPS 1e-12</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> real long double</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),v=G.To(i);~i;i=G.Next(i),v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        F(i,<span class="number">1</span>,cnt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Rd(<span class="number">2</span>,&amp;n,&amp;k);</span><br><span class="line">    &#125;</span><br><span class="line">    real dp[N]; <span class="keyword">int</span> cnt[N];</span><br><span class="line">    <span class="function">real <span class="title">slope</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> (dp[x]-dp[y])/(<span class="number">1.0</span>*x<span class="number">-1.0</span>*y);&#125;</span><br><span class="line">    <span class="keyword">int</span> Q[N];</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">cxk</span><span class="params">(real mid)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> head=<span class="number">1</span>,tail=<span class="number">1</span>; Q[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        F(i,<span class="number">1</span>,n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(head+<span class="number">1</span>&lt;=tail <span class="keyword">and</span> slope(Q[head+<span class="number">1</span>],Q[head])<span class="number">-1.0</span>/i&gt;EPS) ++head;</span><br><span class="line">            <span class="keyword">int</span> j=Q[head];</span><br><span class="line">            dp[i]=dp[j]+(<span class="number">1.0</span>*i<span class="number">-1.0</span>*j)/(<span class="number">1.0</span>*i)-mid; cnt[i]=cnt[j]+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(head&lt;=tail<span class="number">-1</span> <span class="keyword">and</span> slope(Q[tail<span class="number">-1</span>],Q[tail])-slope(Q[tail],i)&lt;-EPS) --tail;</span><br><span class="line">            Q[++tail]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt[n]&gt;=k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        real l=<span class="number">0.00</span>,r=<span class="number">1e6</span>;</span><br><span class="line">        F(i,<span class="number">1</span>,<span class="number">100</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            real mid=(l+r)/<span class="number">2.0</span>; </span><br><span class="line">            <span class="keyword">if</span> (cxk(mid)) l=mid;</span><br><span class="line">            <span class="keyword">else</span> r=mid;</span><br><span class="line">        &#125;</span><br><span class="line">        cxk(l);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">9</span>)&lt;&lt;dp[n]+k*l&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Input();</span><br><span class="line">        Soviet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="毒瘤" scheme="https://lightninguz2.github.io/tags/%E6%AF%92%E7%98%A4/"/>
    
      <category term="wqs二分" scheme="https://lightninguz2.github.io/tags/wqs%E4%BA%8C%E5%88%86/"/>
    
      <category term="斜率优化" scheme="https://lightninguz2.github.io/tags/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 1252K Addition Robot 题解</title>
    <link href="https://lightninguz2.github.io/2020/03/15/Codeforces-1252K-Addition-Robot-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/03/15/Codeforces-1252K-Addition-Robot-题解/</id>
    <published>2020-03-14T19:49:54.000Z</published>
    <updated>2020-03-14T19:50:33.730Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>你有一个字符串，仅由 <code>A,B</code> 两种字符构成。长度 $n\le 10^5$。维护 $Q$ 次操作，格式为：<br><code>1 L R</code>  区间 $[L,R]$ 中，$A$ 变成 $B$，$B$ 变成 $A$。<br><code>2 L R A B</code> 你有两个数，初始是 $A$ 和 $B$。从 $L$ 遍历到 $R$ ，如果这一位是字符 <code>A</code>，那么 $A=A+B$，否则 $B=A+B$，输出最后 $A$ 和 $B$ 变成什么样。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><script type="math/tex; mode=display">[A+B,B]=[A,B]\times \begin{bmatrix}1 & 0\\1 & 1\end{bmatrix}</script><script type="math/tex; mode=display">[A,A+B]=[A,B]\times \begin{bmatrix}1 & 1\\0 & 1\end{bmatrix}</script><p>线段树区间维护矩阵积，然后用 $[A,B]$ 左乘这个矩阵积，就能得到最后的 $A,B$。</p><p>关于交换操作：我们维护矩阵积的时候，维护取反后的矩阵积 （就是把 $A$ 变成 $B$ ，把 $B$ 变成 $A$ 后的矩阵积）。交换的时候，把两个矩阵积换一下，然后下传标记即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div><div class="fold_hider"><div class="close hider_title">点击</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 155555</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),v=G.To(i);~i;i=G.Next(i),v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        F(i,<span class="number">1</span>,cnt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Matrix</span> //矩阵</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> S 5</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> a[S][S];</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        Matrix()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">            n=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Matrix(<span class="keyword">int</span> _n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">            n=_n;</span><br><span class="line">        &#125;</span><br><span class="line">        Matrix(<span class="keyword">int</span> _n,<span class="keyword">int</span> _x)</span><br><span class="line">        &#123;</span><br><span class="line">            n=_n;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;S;++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;S;++j)</span><br><span class="line">                &#123;</span><br><span class="line">                    a[i][j]=_x;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>* <span class="keyword">operator</span>[](<span class="keyword">int</span> i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *(a+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Identity</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;S;++i)</span><br><span class="line">            &#123;</span><br><span class="line">                a[i][i]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">undef</span> S <span class="comment">//5</span></span></span><br><span class="line">    &#125;A(<span class="number">2</span>,<span class="number">1</span>),B(<span class="number">2</span>,<span class="number">1</span>),I(<span class="number">2</span>,<span class="number">0</span>); </span><br><span class="line">    <span class="comment">// A: A=A+B 的变换矩阵</span></span><br><span class="line">    <span class="comment">// B: B=A+B 的变换矩阵</span></span><br><span class="line">    <span class="comment">// I: 单位矩阵</span></span><br><span class="line">    Matrix <span class="keyword">operator</span>*(Matrix x,Matrix y) <span class="comment">//并不需要用到快速幂的操作,于是我没写</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">Matrix <span class="title">ans</span><span class="params">(x.n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> n=ans.n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (x[i][j])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;++k)</span><br><span class="line">                    &#123;</span><br><span class="line">                        ans[i][k]=(ans[i][k]+<span class="number">1l</span>l*x[i][j]*y[j][k]%mod)%mod;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> a[N];</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SegmentTree</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> l,r; <span class="keyword">bool</span> c; Matrix w[<span class="number">2</span>];&#125;tree[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> ls index&lt;&lt;1</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rs index&lt;&lt;1|1</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> L tree[index].l</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> R tree[index].r</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> W tree[index].w</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> C tree[index].c</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lL tree[ls].l</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lR tree[ls].r</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lW tree[ls].w</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lC tree[ls].c</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rL tree[rs].l</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rR tree[rs].r</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rW tree[rs].w</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rC tree[rs].c</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            W[<span class="number">0</span>]=lW[<span class="number">0</span>]*rW[<span class="number">0</span>];</span><br><span class="line">            W[<span class="number">1</span>]=lW[<span class="number">1</span>]*rW[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            L=l,R=r;</span><br><span class="line">            <span class="keyword">if</span> (l==r)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[l]==<span class="string">'A'</span>) &#123;W[<span class="number">0</span>]=A; W[<span class="number">1</span>]=B;&#125; <span class="comment">// W[0] 维护当前矩阵，W[1] 维护取反后的矩阵</span></span><br><span class="line">                <span class="keyword">else</span>           &#123;W[<span class="number">0</span>]=B; W[<span class="number">1</span>]=A;&#125; <span class="comment">// 这个边界显然吧...</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            Build(l,mid,ls); Build(mid+<span class="number">1</span>,r,rs);</span><br><span class="line">            Update(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">FlipOne</span><span class="params">(<span class="keyword">int</span> index=<span class="number">1</span>)</span> </span>&#123;C^=<span class="number">1</span>; swap(W[<span class="number">0</span>],W[<span class="number">1</span>]);&#125; <span class="comment">// 交换一下 W[0] 和 W[1]</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(<span class="keyword">int</span> index=<span class="number">1</span>)</span> <span class="comment">//记得下传标记</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (C)</span><br><span class="line">            &#123;</span><br><span class="line">                FlipOne(ls); FlipOne(rs);</span><br><span class="line">                C=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Flip</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> index=<span class="number">1</span>)</span> <span class="comment">//区间反转</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l&gt;R <span class="keyword">or</span> L&gt;r) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> (l&lt;=L <span class="keyword">and</span> R&lt;=r) <span class="keyword">return</span> FlipOne(index);</span><br><span class="line">            PushDown(index);</span><br><span class="line">            Flip(l,r,ls); Flip(l,r,rs);</span><br><span class="line">            Update(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">Matrix <span class="title">Query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> index=<span class="number">1</span>)</span> <span class="comment">//注意：区间矩阵积返回的是一个矩阵</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l&gt;R <span class="keyword">or</span> L&gt;r) <span class="keyword">return</span> I;</span><br><span class="line">            <span class="keyword">if</span> (l&lt;=L <span class="keyword">and</span> R&lt;=r) <span class="keyword">return</span> W[<span class="number">0</span>];</span><br><span class="line">            PushDown(index);</span><br><span class="line">            <span class="keyword">return</span> Query(l,r,ls)*Query(l,r,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;T;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Rd(<span class="number">2</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,a+<span class="number">1</span>);</span><br><span class="line">        A[<span class="number">1</span>][<span class="number">2</span>]=<span class="number">0</span>; B[<span class="number">2</span>][<span class="number">1</span>]=<span class="number">0</span>; I.Identity();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        A=</span></span><br><span class="line"><span class="comment">        [1 0]</span></span><br><span class="line"><span class="comment">        [1 1]</span></span><br><span class="line"><span class="comment">        B=</span></span><br><span class="line"><span class="comment">        [1 1]</span></span><br><span class="line"><span class="comment">        [0 1]</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        T.Build(<span class="number">1</span>,n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        F(i,<span class="number">1</span>,m)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> o;R1(o);</span><br><span class="line">            <span class="keyword">if</span> (o==<span class="number">1</span>) &#123;<span class="keyword">int</span> l,r;Rd(<span class="number">2</span>,&amp;l,&amp;r); T.Flip(l,r);&#125;</span><br><span class="line">            <span class="keyword">if</span> (o==<span class="number">2</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> l,r,a,b; Rd(<span class="number">4</span>,&amp;l,&amp;r,&amp;a,&amp;b);</span><br><span class="line">                a%=mod; b%=mod;</span><br><span class="line">                <span class="function">Matrix <span class="title">Trans</span><span class="params">(<span class="number">2</span>,<span class="number">0</span>)</span></span>; Trans=T.Query(l,r); </span><br><span class="line">                <span class="comment">// 转移纠正</span></span><br><span class="line">                <span class="function">Matrix <span class="title">Init</span><span class="params">(<span class="number">2</span>,<span class="number">0</span>)</span></span>; Init[<span class="number">1</span>][<span class="number">1</span>]=a; Init[<span class="number">1</span>][<span class="number">2</span>]=b;</span><br><span class="line">                <span class="comment">// 初始矩阵就是 [A,B]</span></span><br><span class="line">                Init=Init*Trans;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,Init[<span class="number">1</span>][<span class="number">1</span>],Init[<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Input();</span><br><span class="line">        Soviet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="线段树" scheme="https://lightninguz2.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="矩阵乘法" scheme="https://lightninguz2.github.io/tags/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/"/>
    
      <category term="转换思维" scheme="https://lightninguz2.github.io/tags/%E8%BD%AC%E6%8D%A2%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>libreoj 10069 「一本通 3.1 练习 4」Tree  题解</title>
    <link href="https://lightninguz2.github.io/2020/03/15/libreoj-10069-%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A-3-1-%E7%BB%83%E4%B9%A0-4%E3%80%8DTree-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/03/15/libreoj-10069-「一本通-3-1-练习-4」Tree-题解/</id>
    <published>2020-03-14T19:36:31.000Z</published>
    <updated>2020-03-14T19:37:31.967Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>一个图有 $n$ 个点 $m$ 条边，每个边是白色或黑色。生成一棵树使得白边的数量恰好是 $k$，并且边权和最小。输出最小的边权和。</p><p>$1\le n,m\le 10^5$，边权在 $[1,100]$ 之间</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我们在跑朴素的 <code>Kruskal</code> 的时候，把每个白边都调的贵一点，或者便宜一点。把白边弄便宜的时候，就会多选几个白边，反之就会少选几个白边。</p><p>所以我们二分一个附加权值 $x$，可正可负。每个白边的权值都 <code>+=x</code> 。如果这样选出来的白边数量 $\le k$，那么 $x$ 应该更小一点（整便宜点，让我们可以多选几个），否则 $x$ 应该更大一点（同理）。</p><p>那么最后的答案就是 $sum-k\times x$。 （$sum$ 为附加值为 $x$ 时的最小生成树）<br>注意！是 $sum-k\times x$，而不是 $sum-white\times x$ （其中 $white$ 为选出的白边的数量）</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div><div class="fold_hider"><div class="close hider_title">点击</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 155555</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),v=G.To(i);~i;i=G.Next(i),v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        F(i,<span class="number">1</span>,cnt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DSU</span> //并查集</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> Fa[N],Cnt[N];</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;F(i,<span class="number">0</span>,N<span class="number">-1</span>) Fa[i]=i,Cnt[i]=<span class="number">1</span>;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">int</span>  <span class="title">Find</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;<span class="keyword">return</span> u==Fa[u]?u:Fa[u]=Find(Fa[u]);&#125;</span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> au=Find(u),av=Find(v);</span><br><span class="line">            <span class="keyword">if</span> (au==av) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (Cnt[au]&lt;Cnt[av]) Cnt[av]+=Cnt[au],Fa[au]=av;</span><br><span class="line">            <span class="keyword">else</span>                 Cnt[au]+=Cnt[av],Fa[av]=au;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;D;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> u,v,w,c;&#125;E[N]; <span class="comment">//存边</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(Edge a,Edge b)&#123;<span class="keyword">return</span> a.w&lt;b.w <span class="keyword">or</span> (a.w==b.w <span class="keyword">and</span> a.c&lt;b.c);&#125;</span><br><span class="line">    <span class="keyword">int</span> n,m,k;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Rd(<span class="number">3</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">        F(i,<span class="number">1</span>,m) &#123;<span class="keyword">int</span> u,v,w,c; Rd(<span class="number">4</span>,&amp;u,&amp;v,&amp;w,&amp;c); ++u,++v; E[i]=(Edge)&#123;u,v,w,c&#125;;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>,white=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MST</span><span class="params">(<span class="keyword">int</span> delt)</span> <span class="comment">//delt为附加权值</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sum=white=<span class="number">0</span>;</span><br><span class="line">        F(i,<span class="number">1</span>,m) <span class="keyword">if</span> (E[i].c==<span class="number">0</span>) E[i].w+=delt; <span class="comment">//每个白边权值都加上delt</span></span><br><span class="line">        D.Init(); </span><br><span class="line">        sort(E+<span class="number">1</span>,E+m+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        F(i,<span class="number">1</span>,m) <span class="keyword">if</span> (D.Find(E[i].u)!=D.Find(E[i].v))</span><br><span class="line">        &#123;</span><br><span class="line">            D.Merge(E[i].u,E[i].v);</span><br><span class="line">            sum+=E[i].w;</span><br><span class="line">            white+=(E[i].c==<span class="number">0</span>);</span><br><span class="line">            ++cnt;</span><br><span class="line">            <span class="keyword">if</span> (cnt==n<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        F(i,<span class="number">1</span>,m) <span class="keyword">if</span> (E[i].c==<span class="number">0</span>) E[i].w-=delt; <span class="comment">//记得改回来</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">-1000</span>,r=<span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">int</span> ans;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>; MST(mid);</span><br><span class="line">            <span class="keyword">if</span> (white&gt;=k) ans=sum-k*mid,l=mid+<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//答案是sum-k*mid，而不是sum-white*mid</span></span><br><span class="line">            <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Input();</span><br><span class="line">        Soviet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="wqs二分" scheme="https://lightninguz2.github.io/tags/wqs%E4%BA%8C%E5%88%86/"/>
    
      <category term="生成树" scheme="https://lightninguz2.github.io/tags/%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>点分治 笔记</title>
    <link href="https://lightninguz2.github.io/2020/03/15/%E7%82%B9%E5%88%86%E6%B2%BB-%E7%AC%94%E8%AE%B0/"/>
    <id>https://lightninguz2.github.io/2020/03/15/点分治-笔记/</id>
    <published>2020-03-14T19:16:26.000Z</published>
    <updated>2020-03-14T19:18:54.459Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h3><p>点分治用来统计树上满足某种条件的路径个数，一般具有可合并答案的性质（比如是否存在路径长度 $=k$等）。</p><h3 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h3><p>首先我们考虑经过根节点的满足条件的路径有多少。那比如我们就拿长度为 $k$ 举例，先从根节点 $DFS$ 一遍，求出每个节点的 $dis$。然后对于一个节点的 $dis[i]$，统计 $k-dis[i]$ 是否存在即可。如果存在，那么就有。</p><p>当然，并不是所有的路径都经过根节点。那么，不经过根节点的路径，一定经过根节点子树中的某个点。</p><p>那么我们把根节点的每个子树都分治一遍（递归），不就能求出答案了吗？</p><p>但是我们发现这样太慢了，复杂度为 $O(n\times C)$，其中 $C$ 为递归的次数。但是很显然，树为一条链的时候，$C=n$，复杂度变成 $O(n^2)$。</p><p>如何优化这个算法呢？也很简单，我们都有 $DFS$ 一遍的时间，顺便把每颗子树的重心都求出来好了。</p><p>然后对于每个子树，我们递归这个子树的时候，以重心为根。</p><p>这样，容易证明，递归次数 $C\le\log n$。</p><h3 id="模板题"><a href="#模板题" class="headerlink" title="模板题"></a>模板题</h3><p>洛谷 3806：给一颗树，多组询问是否存在长度为 $k$ 的路径。<br>$n\le 10^4,m\le 100$</p><p>解法：每次点分治的时候，维护一个 $bool$ 数组 $cxk$，$cxk[i]$ 表示是否存在 $dis[k]=i$。分治的时候，遍历每个询问 $k$，如果 $cxk[k-dis[i]]$，那么这个询问答案变成 $true$ （题目要求输出 <code>AYE</code>）</p><p>总的复杂度是 $O(nm\log n)$</p><h3 id="模板题代码"><a href="#模板题代码" class="headerlink" title="模板题代码"></a>模板题代码</h3><div><div class="fold_hider"><div class="close hider_title">点击</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 155555</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> K 100000007</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),v=G.To(i);~i;i=G.Next(i),v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        F(i,<span class="number">1</span>,cnt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Graph</span> // 图</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">            <span class="keyword">int</span> head[N];</span><br><span class="line">            <span class="keyword">int</span> EdgeCount;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">            &#123;</span></span><br><span class="line">                <span class="keyword">int</span> To,Label,Next;</span><br><span class="line">            &#125;Ed[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">int</span> _V=N,<span class="keyword">int</span> _E=N&lt;&lt;<span class="number">1</span>)</span> </span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="built_in">memset</span>(Ed,<span class="number">-1</span>,<span class="keyword">sizeof</span>(Edge)*(_E));</span><br><span class="line">                <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(_V));</span><br><span class="line">                EdgeCount=<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                Ed[++EdgeCount]=(Edge)&#123;v,w,head[u]&#125;;</span><br><span class="line">                head[u]=EdgeCount;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">Add2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w=<span class="number">1</span>)</span> </span>&#123;AddEdge(u,v,w);AddEdge(v,u,w);&#125;</span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">Start</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;<span class="keyword">return</span> head[u];&#125;</span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">To</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">return</span> Ed[u].To;&#125;</span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">Label</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">return</span> Ed[u].Label;&#125;</span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">Next</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">return</span> Ed[u].Next;&#125;</span><br><span class="line">    &#125;G;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">int</span> q[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Rd(<span class="number">2</span>,&amp;n,&amp;m);</span><br><span class="line">        G.clear();</span><br><span class="line">        F(i,<span class="number">1</span>,n<span class="number">-1</span>) &#123;<span class="keyword">int</span> u,v,w;Rd(<span class="number">3</span>,&amp;u,&amp;v,&amp;w); G.Add2(u,v,w);&#125;</span><br><span class="line">        F(i,<span class="number">1</span>,m) &#123;R1(q[i]);&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> vis[N];</span><br><span class="line">    <span class="built_in">bitset</span>&lt;K&gt; cxk,test;</span><br><span class="line">    <span class="comment">// cxk[i]  表示是否存在 dis[k]=i</span></span><br><span class="line">    <span class="comment">// test[i] 表示第 i 个询问的答案</span></span><br><span class="line">    <span class="keyword">int</span> size[N],bal[N];</span><br><span class="line">    <span class="keyword">int</span> root,sum;</span><br><span class="line">    <span class="comment">// 这些是求重心的</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">GetBal</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        size[u]=<span class="number">1</span>; bal[u]=<span class="number">0</span>;</span><br><span class="line">        Tra(i,u) <span class="keyword">if</span> (v!=f <span class="keyword">and</span> !vis[v])</span><br><span class="line">        &#123;</span><br><span class="line">            GetBal(v,u);</span><br><span class="line">            size[u]+=size[v];</span><br><span class="line">            bal[u]=max(bal[u],size[v]);</span><br><span class="line">        &#125;</span><br><span class="line">        bal[u]=max(bal[u],sum-size[u]);</span><br><span class="line">        <span class="keyword">if</span> (bal[u]&lt;bal[root]) root=u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> rec[N],dis[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">GetDis</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span> </span></span><br><span class="line"><span class="function">    <span class="comment">// 这个 DFS 用来求 dis，顺便把所有的 dis 数组记录在一个数组 rec 里</span></span></span><br><span class="line"><span class="function">    <span class="comment">// 由于是 1 编号，不用的 rec[0] 就用来存长度</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        rec[++rec[<span class="number">0</span>]]=dis[u];</span><br><span class="line">        Tra(i,u) <span class="keyword">if</span> (v!=f <span class="keyword">and</span> !vis[v])</span><br><span class="line">        &#123;</span><br><span class="line">            dis[v]=dis[u]+G.Label(i);</span><br><span class="line">            GetDis(v,u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> u)</span> <span class="comment">// 计算以 u 为根的答案</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; d;</span><br><span class="line">        Tra(i,u) <span class="keyword">if</span> (!vis[v])</span><br><span class="line">        &#123;</span><br><span class="line">            rec[<span class="number">0</span>]=<span class="number">0</span>; dis[v]=G.Label(i);</span><br><span class="line">            GetDis(v,u);</span><br><span class="line"></span><br><span class="line">            D(j,rec[<span class="number">0</span>],<span class="number">1</span>) F(k,<span class="number">1</span>,m) <span class="keyword">if</span> (q[k]&gt;=rec[j]) <span class="comment">// 注意 q[k]&gt;=rec[j]</span></span><br><span class="line">            &#123;</span><br><span class="line">                test[k]=test[k]|cxk[q[k]-rec[j]];</span><br><span class="line">            &#125;</span><br><span class="line">            D(j,rec[<span class="number">0</span>],<span class="number">1</span>) &#123;d.p_b(rec[j]); cxk[rec[j]]=<span class="number">1</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        F(i,<span class="number">0</span>,sz(d)<span class="number">-1</span>) cxk[d[i]]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        vis[u]=cxk[<span class="number">0</span>]=<span class="number">1</span>; </span><br><span class="line">        calc(u); <span class="comment">// 计算以 u 为根的答案</span></span><br><span class="line">        Tra(i,u) <span class="keyword">if</span> (!vis[v])</span><br><span class="line">        &#123;</span><br><span class="line">            sum=size[v]; bal[root=<span class="number">0</span>]=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">            GetBal(v,v);</span><br><span class="line">            DFS(root); <span class="comment">//求出重心，递归子树</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sum=bal[root=<span class="number">1</span>]=n;</span><br><span class="line">        GetBal(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        DFS(root);</span><br><span class="line">        F(i,<span class="number">1</span>,m) <span class="built_in">puts</span>(test[i]?<span class="string">"AYE"</span>:<span class="string">"NAY"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Input();</span><br><span class="line">        Soviet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="点分治" scheme="https://lightninguz2.github.io/tags/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>codeforces 916E Jamie and Tree 题解</title>
    <link href="https://lightninguz2.github.io/2020/03/15/codeforces-916E-Jamie-and-Tree-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/03/15/codeforces-916E-Jamie-and-Tree-题解/</id>
    <published>2020-03-14T17:47:11.000Z</published>
    <updated>2020-03-14T17:51:23.700Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>给定一个 $n\le 10^5$ 个点带权的树，初始根为 $1$。支持三种操作：<br><code>1 r</code> 把根换成 $r$<br><code>2 u v x</code> 把 $LCA(u,v)$ 的子树整体加 $x$<br><code>3 u</code> 查询 $u$ 的子树点权和</p><p>操作数$\le 10^5$。每个点权 $\le 10^8$ 。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>如果没有 $1$ 操作，那 $2,3$ 操作显然就是一个板子。</p><p>但是现在有了 $1$ 操作。 那么我们就要考虑几个问题：</p><ol><li>如何求 LCA</li><li>如何知道子树是哪一块 （对其进行求和或加值）</li></ol><p>当然，无根树肯定是不好讨论的。我们先假定 $1$ 为根。 然后判断以 $r$ 为根的子树长什么样。</p><p>为了不混淆，设：<br>$LCA(u,v,r)$ 表示以 $r$ 为根，$u,v$ 的 $LCA$。<br>$SUB(u,r)$ 表示以 $r$ 为根，$u$ 的子树。</p><p>路径不需要重新定义，因为路径是唯一确定的，和根无关。</p><h4 id="求LCA"><a href="#求LCA" class="headerlink" title="求LCA"></a>求LCA</h4><p>假设我们要求 $LCA(u,v,r)$。</p><ol><li>如果当前的根 $r$ 在 $u,v$ 的路径上，那么显然 $LCA(u,v,r)=r$。</li><li>否则，设 $L=LCA(u,v,1)$。 如果当前的根在 $SUB(L,1)$ 外，那么 $LCA(u,v,r)=L$，就不会有影响</li><li>再否则，$LCA(u,v,r)$ 就是 $u,v$ 路径上的某个点了。稍微想一下，这个点是 $LCA(u,r,1)$ 或者 $LCA(v,r,1)$ 中的一个。 再仔细想想，似乎是选深的那一个（以 $1$ 为根）。那么如果同样深怎么办呢？<br>继续想想，$LCA(u,r,1)$ 和 $LCA(v,r,1)$ 肯定一个是 $LCA(u,v,1)$ ，一个是 $LCA(u,v,r)$。如果深度相同，那就说明 $LCA(u,r,1)=LCA(v,r,1)=LCA(u,v,1)$ 。这个时候选哪个也无所谓了，反正都是对的。</li></ol><h4 id="求某个子树"><a href="#求某个子树" class="headerlink" title="求某个子树"></a>求某个子树</h4><p>假设我们要求 $SUB(u,r)$</p><ol><li>$u=r$。 最简单的情况，子树就是整棵树 （<strong>但是不能忘记特判！</strong>）</li><li>$r$ 在 $SUB(u,1)$ 之外。 这也很显然，$SUB(u,r)=SUB(u,1)$。</li><li>关键问题就是 $r$ 在 $SUB(u,1)$ 之内的情况咋整。</li></ol><p>我们画一张图：<br><img src="https://lightninguz2.github.io/blogimages/CF916E-2.jpg" alt></p><p>很明显，此时 $SUB(u,r)$ 就等于整棵树中减去 $SUB(k,1)。（这张图有一个没画全的地方，就是 $u$ 上面可能还有别的点）</p><p>而 $k$ 的值，也就是 $r$ 在 $u$ 的哪个子树里面，这个可以用倍增求。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>我们发现，最后的操作，只有子树加减，和单点求和的操作。甚至不用写树链剖分。这个用 $DFS$ 序维护就能解决。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div><div class="fold_hider"><div class="close hider_title">点击</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 255555</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),v=G.To(i);~i;i=G.Next(i),v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        F(i,<span class="number">1</span>,cnt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">            <span class="keyword">int</span> head[N];</span><br><span class="line">            <span class="keyword">int</span> EdgeCount;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">            &#123;</span></span><br><span class="line">                <span class="keyword">int</span> To,Label,Next;</span><br><span class="line">            &#125;Ed[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">int</span> _V=N,<span class="keyword">int</span> _E=N&lt;&lt;<span class="number">1</span>)</span> </span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="built_in">memset</span>(Ed,<span class="number">-1</span>,<span class="keyword">sizeof</span>(Edge)*(_E));</span><br><span class="line">                <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(_V));</span><br><span class="line">                EdgeCount=<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                Ed[++EdgeCount]=(Edge)&#123;v,w,head[u]&#125;;</span><br><span class="line">                head[u]=EdgeCount;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">Add2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w=<span class="number">1</span>)</span> </span>&#123;AddEdge(u,v,w);AddEdge(v,u,w);&#125;</span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">Start</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;<span class="keyword">return</span> head[u];&#125;</span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">To</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">return</span> Ed[u].To;&#125;</span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">Label</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">return</span> Ed[u].Label;&#125;</span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">Next</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">return</span> Ed[u].Next;&#125;</span><br><span class="line">    &#125;G;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SegmentTree</span> //线段树 区间加 区间求和</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> l,r,s,a;&#125;tree[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> ls index&lt;&lt;1</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rs index&lt;&lt;1|1</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> L tree[index].l</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> R tree[index].r</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> S tree[index].s</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> A tree[index].a</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lL tree[ls].l</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lR tree[ls].r</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lS tree[ls].s</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lA tree[ls].a</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rL tree[rs].l</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rR tree[rs].r</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rS tree[rs].s</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rA tree[rs].a</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            S=lS+rS;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            L=l,R=r;S=A=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (l==r) &#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">            <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            Build(l,mid,ls); Build(mid+<span class="number">1</span>,r,rs);</span><br><span class="line">            Update(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">AddOne</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            A+=x;</span><br><span class="line">            S+=(R-L+<span class="number">1</span>)*x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (A) &#123;AddOne(A,ls); AddOne(A,rs); A=<span class="number">0</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l&gt;R <span class="keyword">or</span> L&gt;r) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> (l&lt;=L <span class="keyword">and</span> R&lt;=r) <span class="keyword">return</span> AddOne(x,index);</span><br><span class="line">            PushDown(index);</span><br><span class="line">            Add(l,r,x,ls); Add(l,r,x,rs);</span><br><span class="line">            Update(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">int</span>  <span class="title">Query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l&gt;R <span class="keyword">or</span> L&gt;r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (l&lt;=L <span class="keyword">and</span> R&lt;=r) <span class="keyword">return</span> S;</span><br><span class="line">            PushDown(index);</span><br><span class="line">            <span class="keyword">return</span> Query(l,r,ls)+Query(l,r,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;T;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">int</span> a[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Rd(<span class="number">2</span>,&amp;n,&amp;m);</span><br><span class="line">        F(i,<span class="number">1</span>,n) R1(a[i]);</span><br><span class="line">        G.clear();</span><br><span class="line">        F(i,<span class="number">1</span>,n<span class="number">-1</span>) &#123;<span class="keyword">int</span> u,v;Rd(<span class="number">2</span>,&amp;u,&amp;v); G.Add2(u,v);&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> In[N],Out[N],Time=<span class="number">0</span>; </span><br><span class="line">    <span class="keyword">int</span> fa[N][<span class="number">22</span>],deep[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        In[u]=++Time;</span><br><span class="line">        deep[u]=(u==f)?<span class="number">0</span>:deep[f]+<span class="number">1</span>;</span><br><span class="line">        fa[u][<span class="number">0</span>]=f; F(i,<span class="number">1</span>,<span class="number">20</span>) fa[u][i]=fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">        Tra(i,u) <span class="keyword">if</span> (v!=f)</span><br><span class="line">        &#123;</span><br><span class="line">            DFS(v,u);</span><br><span class="line">        &#125;</span><br><span class="line">        Out[u]=Time;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">FindSon</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span> <span class="comment">//求 u 在 f 的哪个子树里 （u相对于f的k值）</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        D(i,<span class="number">20</span>,<span class="number">0</span>) <span class="keyword">if</span> (deep[fa[u][i]]&gt;deep[f]) u=fa[u][i];</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">IsFa</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span> <span class="comment">//这个判断f是否是u的祖先</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (deep[u]&lt;deep[f]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (u==f) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> fa[FindSon(u,f)][<span class="number">0</span>]==f;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//upd: 傻了，这个直接DFS序判断即可</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (deep[u]&lt;deep[v]) swap(u,v);</span><br><span class="line">        D(i,<span class="number">20</span>,<span class="number">0</span>) <span class="keyword">if</span> (deep[fa[u][i]]&gt;=deep[v]) u=fa[u][i];</span><br><span class="line">        <span class="keyword">if</span> (u==v) <span class="keyword">return</span> u;</span><br><span class="line">        D(i,<span class="number">20</span>,<span class="number">0</span>) <span class="keyword">if</span> (fa[u][i]!=fa[v][i]) u=fa[u][i],v=fa[v][i];</span><br><span class="line">        <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//非常正常的LCA</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">OnPath</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l=LCA(u,v);</span><br><span class="line">        <span class="keyword">if</span> (l==k) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> !IsFa(l,k) <span class="keyword">and</span> (IsFa(u,k) <span class="keyword">or</span> IsFa(v,k));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断k是否在u,v路径上</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SubtAdd</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> x)</span></span>&#123;T.Add(In[u],Out[u],x);&#125;</span><br><span class="line">    <span class="comment">//子树加</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span>  <span class="title">SubtSum</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;<span class="keyword">return</span> T.Query(In[u],Out[u]);&#125;</span><br><span class="line">    <span class="comment">//子树求和</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        DFS(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        T.Build(<span class="number">1</span>,n);</span><br><span class="line">        F(i,<span class="number">1</span>,n) T.Add(In[i],In[i],a[i]); <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">int</span> root=<span class="number">1</span>; <span class="comment">//这个别忘了</span></span><br><span class="line">        F(i,<span class="number">1</span>,m)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> o;R1(o);</span><br><span class="line">            <span class="keyword">if</span> (o==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> u;R1(u);</span><br><span class="line">                root=u; <span class="comment">//非常简单的换根操作</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (o==<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> u,v,x;Rd(<span class="number">3</span>,&amp;u,&amp;v,&amp;x);</span><br><span class="line">                <span class="keyword">int</span> l=LCA(u,v);</span><br><span class="line">                <span class="keyword">if</span> (OnPath(u,v,root)) </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//特判: 如果root在u,v路径上，那么LCA(u,v,root)==root，直接加整个树</span></span><br><span class="line">                    T.Add(<span class="number">1</span>,n,x);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (In[root]&lt;In[l] <span class="keyword">or</span> Out[l]&lt;In[root]) </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//如果root不在x子树内，那么没有影响，和根为1情况一样</span></span><br><span class="line">                    SubtAdd(l,x);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    T.Add(<span class="number">1</span>,n,x); <span class="comment">//整个加</span></span><br><span class="line">                    <span class="keyword">if</span> (deep[LCA(root,u)]&lt;deep[LCA(root,v)]) swap(u,v);</span><br><span class="line">                    <span class="keyword">int</span> k=FindSon(root,LCA(root,u));</span><br><span class="line">                    <span class="comment">//找到k</span></span><br><span class="line">                    SubtAdd(k,-x);</span><br><span class="line">                    <span class="comment">//把k的子树减掉</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (o==<span class="number">3</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> u;R1(u);</span><br><span class="line">                <span class="comment">//这个和上面类似的</span></span><br><span class="line">                <span class="keyword">if</span> (root==u) </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,T.Query(<span class="number">1</span>,n));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (In[root]&lt;In[u] <span class="keyword">or</span> Out[u]&lt;In[root]) </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,SubtSum(u));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> k=FindSon(root,u);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,T.Query(<span class="number">1</span>,n)-SubtSum(k));</span><br><span class="line">                    <span class="comment">//整棵树-k的子树</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Input();</span><br><span class="line">        Soviet();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> int <span class="comment">//long long </span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="树形结构" scheme="https://lightninguz2.github.io/tags/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/"/>
    
      <category term="毒瘤" scheme="https://lightninguz2.github.io/tags/%E6%AF%92%E7%98%A4/"/>
    
      <category term="倍增" scheme="https://lightninguz2.github.io/tags/%E5%80%8D%E5%A2%9E/"/>
    
      <category term="DFS序" scheme="https://lightninguz2.github.io/tags/DFS%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>libreoj 125 除数函数求和2 题解</title>
    <link href="https://lightninguz2.github.io/2020/03/14/libreoj-125-%E9%99%A4%E6%95%B0%E5%87%BD%E6%95%B0%E6%B1%82%E5%92%8C2-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/03/14/libreoj-125-除数函数求和2-题解/</id>
    <published>2020-03-14T12:59:35.000Z</published>
    <updated>2020-03-14T13:15:23.731Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>给定 $n$，求 $\sum\limits_{i=1}^{n} 2\sigma_2(i)+3\sigma_1(i)+5\sigma_0(i)$</p><p>$n&lt;=1e9$</p><p>其中 $\sigma_k(x)=x$ 所有因数的 $k$ 次方和。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我们反过来想，枚举每个因数对答案产生了多少贡献。</p><p>显然，一个因数 $d$ 对答案产生的贡献就是 $2d^2+3d+5$。</p><p>那么有多少 $i$ 算到了这个 $d$ 呢？只要是 $d$ 的倍数，都能算到，所以一共有 $\lfloor \dfrac{n}{d}\rfloor$ 个。</p><p>答案变成了 $\sum\limits_{d=1}^{n} (2d^2+3d+5)\lfloor \dfrac{n}{d}\rfloor$</p><p>整除分块，一次 $O(\sqrt{n})$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div><div class="fold_hider"><div class="close hider_title">点击</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> i2  499122177</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> i6  166374059</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        F(i,<span class="number">1</span>,cnt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        R1(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">s1</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;x%=mod; <span class="keyword">return</span> x*(x+<span class="number">1</span>)%mod*i2%mod;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">s2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;x%=mod; <span class="keyword">return</span> x*(x+<span class="number">1</span>)%mod*(<span class="number">2</span>*x+<span class="number">1</span>)%mod*i6%mod;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">S</span><span class="params">(<span class="keyword">int</span> x)</span>  </span>&#123;<span class="keyword">return</span> <span class="number">5</span>*x%mod+<span class="number">3</span>*s1(x)%mod+<span class="number">2</span>*s2(x)%mod;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>,r;l&lt;=n;l=r+<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            r=n/(n/l);</span><br><span class="line">            ans+=(n/l)%mod*(S(r)-S(l<span class="number">-1</span>)+mod)%mod;</span><br><span class="line">            ans%=mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Input();</span><br><span class="line">        Soviet();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> int <span class="comment">//long long </span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="思维" scheme="https://lightninguz2.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="数论" scheme="https://lightninguz2.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>libreoj 6029 「雅礼集训 2017 Day1」市场  题解</title>
    <link href="https://lightninguz2.github.io/2020/03/03/libreoj-6029-%E3%80%8C%E9%9B%85%E7%A4%BC%E9%9B%86%E8%AE%AD-2017-Day1%E3%80%8D%E5%B8%82%E5%9C%BA-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/03/03/libreoj-6029-「雅礼集训-2017-Day1」市场-题解/</id>
    <published>2020-03-03T11:42:50.000Z</published>
    <updated>2020-03-06T08:50:00.952Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>给定一个长度为 $n\le 10^5$ 的序列，初始值$\le 10^9$，支持：<br><code>1 l r x</code> 区间 $[l,r]$ 每个数加上 $x$ 。 $|x|&lt;=10^4,1\le l\le r\le n$<br><code>2 l r x</code> 区间 $[l,r]$ 每个数除以 $x$ （下取整），$2\le x\le 1e9,1\le l\le r\le n$<br><code>3 l r</code> 求 $[l,r]$ 中的最小值<br><code>4 l r</code> 求 $[l,r]$ 的和<br>询问数 $\le 10^5$</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>显然线段树。</p><p>我们把区间除法分解成区间内每个数都减去某个数。设 $d(a,x)$ 表示 $a$ 除以 $x$ 下取整的变化量，也就是 $a-a/x$。那么 $a\leftarrow a/x$ 的操作，就等价于 $a\leftarrow a-d(a,x)$。显然，当 $x$ 相同的时候， $d$ 函数单调不减。具体的说，如果 $a&lt;b$，则 $d(a,x)\le d(b,x)$ ，对于所有正整数 $x$。</p><p>那么对于一段区间，如果 $d(Max,x)=d(Min,x)$，那么这个区间中，所有数的变化量都一样了，直接上区间减法来解决。</p><p>否则我们继续把这个区间分成左右两个部分，直到这个区间满足上述条件即可。</p><h3 id="分析复杂度"><a href="#分析复杂度" class="headerlink" title="分析复杂度"></a>分析复杂度</h3><p>那么这个算法的复杂度是多少呢？看起来每次的最坏情况是暴力的 $O(r-l+1)$ ，但是我们注意到，加法操作中的 $x$ 最大才加 $10000$，但是一次除法操作每次至少除以 $2$。 </p><p>那比如我是毒瘤出题人，我要卡我的代码，那肯定是要尽量多的加法操作（因为会减慢除法操作），但是也不能少了除法操作（因为看起来很慢）。那假设数据里有 $5\times 10^4$ 个加法操作，还有 $5\times 10^4$ 个除法操作。然后每个数一开始都是 $10^9$ 的规模（不一定恰好是 $10^9$ ，全部相同反而会加快除法操作）。</p><p>那加完之后每个数都是 $1.5\times 10^9$ 左右。那么我们把它除个 $31$ 次就全部变成 $0$ 了，那肯定变化量相同，就是能用 $O(log)$ 的减法操作实现了。</p><p>那总共就相当于 $O(n \log n \log a)$ ，其中 $a$ 是初始的值域，$\log a$ 大约要到 $32$ 了。</p><h3 id="代码-今天测试一下展开功能"><a href="#代码-今天测试一下展开功能" class="headerlink" title="代码 (今天测试一下展开功能)"></a>代码 (今天测试一下展开功能)</h3><div><div class="fold_hider"><div class="close hider_title">点击</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 155555</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        F(i,<span class="number">1</span>,cnt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SegmentTree</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> l,r,s,m,x,a;&#125;tree[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> ls index&lt;&lt;1</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rs index&lt;&lt;1|1</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> L tree[index].l</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> R tree[index].r</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> S tree[index].s</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> M tree[index].m</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> X tree[index].x</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> A tree[index].a</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lL tree[ls].l</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lR tree[ls].r</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lS tree[ls].s</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lM tree[ls].m</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lX tree[ls].x</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lA tree[ls].a</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rL tree[rs].l</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rR tree[rs].r</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rS tree[rs].s</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rM tree[rs].m</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rX tree[rs].x</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rA tree[rs].a</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            S=lS+rS;</span><br><span class="line">            M=min(lM,rM);</span><br><span class="line">            X=max(lX,rX);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            L=l,R=r; A=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (l==r) &#123;R1(S);M=X=S;<span class="keyword">return</span>;&#125;</span><br><span class="line">            <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            Build(l,mid,ls); Build(mid+<span class="number">1</span>,r,rs);</span><br><span class="line">            Update(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">AddOne</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            A+=x; M+=x; X+=x;</span><br><span class="line">            S+=(R-L+<span class="number">1</span>)*x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (A)</span><br><span class="line">            &#123;</span><br><span class="line">                AddOne(A,ls); AddOne(A,rs);</span><br><span class="line">                A=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l&gt;R <span class="keyword">or</span> L&gt;r) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> (l&lt;=L <span class="keyword">and</span> R&lt;=r) <span class="keyword">return</span> AddOne(x,index);</span><br><span class="line">            PushDown(index);</span><br><span class="line">            Add(l,r,x,ls); Add(l,r,x,rs);</span><br><span class="line">            Update(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">fld</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> aa=<span class="built_in">abs</span>(a),bb=<span class="built_in">abs</span>(b);</span><br><span class="line">            <span class="keyword">if</span> ((a&gt;<span class="number">0</span>)^(b&gt;<span class="number">0</span>)) <span class="keyword">return</span> -(aa+bb<span class="number">-1</span>)/bb;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> aa/bb;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Div</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> d,<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l&gt;R <span class="keyword">or</span> L&gt;r) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> (l&lt;=L <span class="keyword">and</span> R&lt;=r)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> dmax=X-fld(X,d),dmin=M-fld(M,d);</span><br><span class="line">                <span class="keyword">if</span> (dmax==dmin)</span><br><span class="line">                &#123;</span><br><span class="line">                    AddOne(-dmax,index);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            PushDown(index);</span><br><span class="line">            Div(l,r,d,ls); Div(l,r,d,rs);</span><br><span class="line">            Update(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">QueryMin</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l&gt;R <span class="keyword">or</span> L&gt;r) <span class="keyword">return</span> <span class="number">0x3f3f3f3f3f3f3f3f</span>ll;</span><br><span class="line">            <span class="keyword">if</span> (l&lt;=L <span class="keyword">and</span> R&lt;=r) <span class="keyword">return</span> M;</span><br><span class="line">            PushDown(index);</span><br><span class="line">            <span class="keyword">return</span> min(QueryMin(l,r,ls),QueryMin(l,r,rs));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">QuerySum</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l&gt;R <span class="keyword">or</span> L&gt;r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (l&lt;=L <span class="keyword">and</span> R&lt;=r) <span class="keyword">return</span> S;</span><br><span class="line">            PushDown(index);</span><br><span class="line">            <span class="keyword">return</span> QuerySum(l,r,ls)+QuerySum(l,r,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;T;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Rd(<span class="number">2</span>,&amp;n,&amp;m);</span><br><span class="line">        T.Build(<span class="number">1</span>,n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        F(i,<span class="number">1</span>,m)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> o,l,r;Rd(<span class="number">3</span>,&amp;o,&amp;l,&amp;r);</span><br><span class="line">            ++l,++r;</span><br><span class="line">            <span class="keyword">if</span> (o==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> x;R1(x);T.Add(l,r,x);</span><br><span class="line">                <span class="comment">// F(i,1,n) printf("%lld ",T.QuerySum(i,i)); putchar('\n'); </span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (o==<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> d;R1(d);T.Div(l,r,d);</span><br><span class="line">                <span class="comment">// F(i,1,n) printf("%lld ",T.QuerySum(i,i)); putchar('\n'); </span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (o==<span class="number">3</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,T.QueryMin(l,r));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (o==<span class="number">4</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,T.QuerySum(l,r));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Input();</span><br><span class="line">        Soviet();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> int <span class="comment">//long long </span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="思维" scheme="https://lightninguz2.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="线段树" scheme="https://lightninguz2.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>noi.ac 357 partner 题解</title>
    <link href="https://lightninguz2.github.io/2020/03/03/noi-ac-357-partner-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/03/03/noi-ac-357-partner-题解/</id>
    <published>2020-03-03T10:57:10.000Z</published>
    <updated>2020-03-03T11:05:18.902Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>（数据结构做傻了系列）<br>给你一列数，求有多少对$(i,j)$满足 $0.9a_j\le a_i\le a_j$。</p><h3 id="思路框架"><a href="#思路框架" class="headerlink" title="思路框架"></a>思路框架</h3><p>显然先排序，设 $b_i=0.9a_i$ （<code>double</code>型即可），然后每次 $lower_bound$找一下即珂。</p><p>像这样的水题我居然会想用树状数组做…我也是数据结构做傻了</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 255555</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> real double</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        F(i,<span class="number">1</span>,cnt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n,a[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        R1(n); F(i,<span class="number">1</span>,n) R1(a[i]);</span><br><span class="line">        sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    real b[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        F(i,<span class="number">1</span>,n) b[i]=a[i]*<span class="number">0.9</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        F(i,<span class="number">1</span>,n<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> p2=upper_bound(b+i+<span class="number">1</span>,b+n+<span class="number">1</span>,(real)a[i])-b<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">int</span> p1=lower_bound(a+i+<span class="number">1</span>,a+p2,a[i])-a;</span><br><span class="line">            ans+=p2-p1+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Input();</span><br><span class="line">        Soviet();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> int <span class="comment">//long long </span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="二分答案" scheme="https://lightninguz2.github.io/tags/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/"/>
    
      <category term="思维" scheme="https://lightninguz2.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="水题" scheme="https://lightninguz2.github.io/tags/%E6%B0%B4%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>BSGS算法 笔记</title>
    <link href="https://lightninguz2.github.io/2020/03/02/BSGS%E7%AE%97%E6%B3%95-%E7%AC%94%E8%AE%B0/"/>
    <id>https://lightninguz2.github.io/2020/03/02/BSGS算法-笔记/</id>
    <published>2020-03-01T17:01:12.000Z</published>
    <updated>2020-03-01T17:02:09.311Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h3><p><code>BSGS</code>，全名叫<code>Big Step Giant Step</code>算法，在中国被称为“拔山盖世算法”，或者叫“北上广深”算法。</p><p>它用来求解最小的 $x$ 满足 $A^x \equiv B \pmod{p}$，你可以认为是数论意义下的开 $\log$。</p><p>我们这里只讨论 $p$ 为质数的情况。</p><h3 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h3><p>$BSGS$ 的精髓在于，我只求一部分答案，就能很快的求另一部分答案。</p><p>首先 $A^{x-1} \equiv 1 \pmod{p}$。那么我们的 $x$ 只要在 $[0,p-1]$ 内枚举即珂。</p><p>首先特判 $B=1$，则 $x=0$。</p><p>假设现在有一个 $m$ ，我们知道了 $x=[1,m]$ 时 $A^x$ 的值（存在<code>map&lt;&gt;</code>里面），如果满足条件的 $x\le m$，就直接得结果了。</p><p>否则，我们假设满足条件的 $x=m+i$（$1\le i\le m$）。那么 $A^m\times A^i \equiv B \pmod{p}$。 则 $A_i=B\times A^{-m} \pmod{p}$。由于 $1\le i\le m$ 这一段中 $A^x$ 的值我们记录过了，我们只要在<code>map</code>里面找是否存在 $B\times A^{-m}$ 即珂。</p><p>然后这样我们就求出了 $m+1,m+2…2m$ 间有没有解，只用了一次 <code>map</code> 的查询。</p><p>同理，我们假设满足条件的 $x=km+i$，$1\le i\le m$，就能进而求出 $[1,p]$ 中的所有解了。</p><p>这个算法的复杂度是 $O(min\{m\log m,\dfrac{p}{m}\log m\})$。</p><p>显然， $m=\sqrt{p}$ 的时候，这个式子最小，等于 $O(\sqrt{p} \log \sqrt{p})$。</p><h3 id="模板题"><a href="#模板题" class="headerlink" title="模板题"></a>模板题</h3><p>洛谷 4028<br>（洛谷上没有BSGS的板子，只有exBSGS，那个我不会）</p><h3 id="代码（仅BSBS部分）"><a href="#代码（仅BSBS部分）" class="headerlink" title="代码（仅BSBS部分）"></a>代码（仅BSBS部分）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> r=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(b)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">if</span> (b&amp;<span class="number">1</span>) r=r*a%m;</span><br><span class="line">                a=a*a%m,b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; x;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">bool</span>&gt; vis;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BSGS</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> p)</span> <span class="comment">//a^x=b (mod p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        x.clear(); vis.clear();</span><br><span class="line">        a%=p; b%=p;</span><br><span class="line">        <span class="keyword">if</span> (a==<span class="number">0</span>) &#123;<span class="keyword">return</span> <span class="number">-1</span>;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> m=(<span class="built_in">sqrt</span>(p+<span class="number">0.5</span>));</span><br><span class="line">        <span class="keyword">int</span> ia_m=qpow(a,p<span class="number">-2</span>,p); ia_m=qpow(ia_m,m,p); <span class="comment">//ia_m=a^-m</span></span><br><span class="line">        <span class="keyword">int</span> cur=<span class="number">1</span>;</span><br><span class="line">        F(i,<span class="number">0</span>,m<span class="number">-1</span>) &#123;x[cur]=(!vis[cur])?i:min(x[cur],i);vis[cur]=<span class="number">1</span>;cur=cur*a%p;&#125;</span><br><span class="line">        <span class="keyword">if</span> (vis[b]) <span class="keyword">return</span> x[b];</span><br><span class="line">        cur=<span class="number">1</span>;</span><br><span class="line">        F(i,<span class="number">1</span>,p/m)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp=b*qpow(ia_m,i,p)%p; <span class="comment">//tmp=b*a^(-mi)</span></span><br><span class="line">                <span class="keyword">if</span> (vis[tmp]) <span class="keyword">return</span> i*m+x[tmp];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数论" scheme="https://lightninguz2.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="BSGS" scheme="https://lightninguz2.github.io/tags/BSGS/"/>
    
      <category term="毒瘤" scheme="https://lightninguz2.github.io/tags/%E6%AF%92%E7%98%A4/"/>
    
  </entry>
  
  <entry>
    <title>洛谷 2472 [SCOI2007]蜥蜴 题解</title>
    <link href="https://lightninguz2.github.io/2020/03/02/%E6%B4%9B%E8%B0%B7-2472-SCOI2007-%E8%9C%A5%E8%9C%B4-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/03/02/洛谷-2472-SCOI2007-蜥蜴-题解/</id>
    <published>2020-03-01T16:30:59.000Z</published>
    <updated>2020-03-01T16:32:26.817Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>(这题超套路…)<br>有一个 $n\times m$ 的矩阵，其中一些位置上有蜥蜴。每个位置上有一个石柱，给你他们初始的高度 $a_{i,j}$。一个蜥蜴可以从一个石柱，跳到直线距离 $\le k$ 的另一个石柱上。当一只蜥蜴从一个石柱上离开的时候，这个石柱的高度就会减少 $1$ 。如果蜥蜴跳到了矩阵外面，就是逃离了。请你求最少有多少只不能逃离（其实就是最多能逃离几只）。</p><p>$1&lt;=n,m&lt;=20$，$k&lt;=4$。</p><p>【附】直线距离：从 $(x1,y1)$ 到 $(x2,y2)$ 的直线距离为： $\sqrt{(x1-x2)^2+(y1-y2)^2}$</p><h3 id="思路框架"><a href="#思路框架" class="headerlink" title="思路框架"></a>思路框架</h3><p>显然建网络流。首先我们把矩阵展开，就是把 $(i,j)$ 位置的点编号为 $(i-1)m+j$。</p><p>每个石柱上只能通过定量的蜥蜴，这显然是一个点限流。套路拆点，每个位置变成 $In(i,j)$ 和 $Out(i,j)$。设源点为 $S$ ，汇点为 $T$。</p><p>对于每个点 $(i,j)$：</p><p>$In(i,j) \xrightarrow[a_{i,j}]{} Out(i,j)$ （一个石柱上只能通过 $a_{i,j}$ 个蜥蜴）<br>$S \xrightarrow[1]{} In(i,j)$ （一个石柱上只能有一个蜥蜴）<br>$Out(i,j) \xrightarrow[inf]{} T$ （跳出终点就随便了）</p><p>对于点 $(i,j)$ 和点 $(u,v)$ 满足 $(i,j)$ 到 $(u,v)$ 直线距离 $\le k$：<br>$Out(i,j) \xrightarrow[inf]{} In(u,v)$ （点之间跳是不限的）<br>$Out(u,v) \xrightarrow[inf]{} In(i,j)$ </p><p>这样跑一个最大流即珂。</p><p>Q：为什么点到点，点到 $T$ 之间都是 $inf$ 的边呢？怎么就“随便”了？<br>A：其实并不是随便，我们知道，网络流上一个流能流过的值是其路径上的最小值。那么既然 $In(i,j)$ 到 $Out(i,j)$ 的时候，已经限过了一次 $a_{i,j}$ ，那我们从 $Out(i,j)$ 到 $In(u,v)$ 的时候，再限一次也没有必要了。当然，你如果实在要限这条边流量为 $a_{i,j}$，没有任何问题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 1333</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        F(i,<span class="number">1</span>,cnt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Graph</span> //这些是板子</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> EdgeCount;</span><br><span class="line">        <span class="keyword">int</span> head[N];</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            <span class="keyword">int</span> To,Label;</span><br><span class="line">            <span class="keyword">int</span> Next;</span><br><span class="line">        &#125;Ed[<span class="number">200100</span>];</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            MEM(head,<span class="number">-1</span>);</span><br><span class="line">            MEM(Ed,<span class="number">-1</span>);</span><br><span class="line">            EdgeCount=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            ++EdgeCount;</span><br><span class="line">            Ed[EdgeCount]=(Edge)&#123;v,w,head[u]&#125;;</span><br><span class="line">            head[u]=EdgeCount;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">AddFlow</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            AddEdge(u,v,w);</span><br><span class="line">            AddEdge(v,u,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> Source,Sink;</span><br><span class="line">        <span class="keyword">int</span> deep[N];</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q,EmptyQ;</span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Q=EmptyQ;</span><br><span class="line">            FK(deep);</span><br><span class="line"></span><br><span class="line">            Q.push(Source);</span><br><span class="line">            deep[Source]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> u=Q.front();Q.pop();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];~i;i=Ed[i].Next)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> v=Ed[i].To;</span><br><span class="line">                    <span class="keyword">if</span> (deep[v]==<span class="number">0</span> <span class="keyword">and</span> Ed[i].Label&gt;<span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        deep[v]=deep[u]+<span class="number">1</span>;</span><br><span class="line">                        Q.push(v);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">while</span>(!Q.empty());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (deep[Sink]==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> MinFlow)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (u==Sink) <span class="keyword">return</span> MinFlow;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];~i;i=Ed[i].Next)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v=Ed[i].To;</span><br><span class="line">                <span class="keyword">if</span> (deep[v]==deep[u]+<span class="number">1</span> <span class="keyword">and</span> Ed[i].Label!=<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> d=DFS(v,min(MinFlow,Ed[i].Label));</span><br><span class="line">                    <span class="keyword">if</span> (d&gt;<span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Ed[i].Label-=d;</span><br><span class="line">                        Ed[i^<span class="number">1</span>].Label+=d;</span><br><span class="line">                        <span class="keyword">return</span> d;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">Dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(BFS())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> d;</span><br><span class="line">                <span class="keyword">while</span>(d=DFS(Source,<span class="number">0x3f3f3f3f</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    ans+=d;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;Nt;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> S Nt.Source</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> T Nt.Sink</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> id(i,j,x) (x*n*m+(i-1)*m+j)</span></span><br><span class="line">    <span class="comment">//(x,y,0): In</span></span><br><span class="line">    <span class="comment">//(x,y,1): Out</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n,m,k; <span class="keyword">int</span> cnt;</span><br><span class="line">    <span class="keyword">int</span> a[N][N]; <span class="keyword">char</span> t[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Rd(<span class="number">3</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">        F(i,<span class="number">1</span>,n) F(j,<span class="number">1</span>,m) <span class="built_in">scanf</span>(<span class="string">"%1d"</span>,&amp;a[i][j]);</span><br><span class="line">        Nt.clear();</span><br><span class="line">        S=<span class="number">2</span>*n*m+<span class="number">1</span>,T=<span class="number">2</span>*n*m+<span class="number">2</span>;</span><br><span class="line">        F(i,<span class="number">1</span>,n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,t+<span class="number">1</span>);</span><br><span class="line">            F(j,<span class="number">1</span>,m) <span class="keyword">if</span> (t[j]==<span class="string">'L'</span> <span class="keyword">and</span> a[i][j]&gt;<span class="number">0</span>) </span><br><span class="line">           <span class="comment">//如果一开始石柱就没了，我们就忽略这个蜥蜴</span></span><br><span class="line">            &#123;</span><br><span class="line">                ++cnt;</span><br><span class="line">                Nt.AddFlow(S,id(i,j,<span class="number">0</span>),<span class="number">1</span>); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        F(i,<span class="number">1</span>,n) F(j,<span class="number">1</span>,m)     Nt.AddFlow(id(i,j,<span class="number">0</span>),id(i,j,<span class="number">1</span>),a[i][j]);</span><br><span class="line">        <span class="comment">//建In(i,j)到Out(i,j)的边</span></span><br><span class="line">        F(i,<span class="number">1</span>,n) F(j,<span class="number">1</span>,m) <span class="keyword">if</span> (i-k&lt;<span class="number">1</span> <span class="keyword">or</span> j-k&lt;<span class="number">1</span> <span class="keyword">or</span> i+k&gt;n <span class="keyword">or</span> j+k&gt;m)</span><br><span class="line">        &#123;</span><br><span class="line">            Nt.AddFlow(id(i,j,<span class="number">1</span>),T,INF);</span><br><span class="line">           <span class="comment">//建立到终点的边</span></span><br><span class="line">        &#125;</span><br><span class="line">        F(i,<span class="number">1</span>,n) F(j,<span class="number">1</span>,m) F(u,max(i-k,<span class="number">1</span>),min(i+k,n)) F(v,max(j-k,<span class="number">1</span>),min(j+k,m)) <span class="keyword">if</span> (a[i][j] <span class="keyword">and</span> a[u][v])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i==u <span class="keyword">and</span> v==j) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> ((i-u)*(i-u)+(j-v)*(j-v)&lt;=k*k)</span><br><span class="line">           <span class="comment">//直线距离&lt;=k</span></span><br><span class="line">            &#123;</span><br><span class="line">                Nt.AddFlow(id(i,j,<span class="number">1</span>),id(u,v,<span class="number">0</span>),INF);</span><br><span class="line">                Nt.AddFlow(id(u,v,<span class="number">1</span>),id(i,j,<span class="number">0</span>),INF);</span><br><span class="line">              <span class="comment">//建边</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt-Nt.Dinic());</span><br><span class="line">       <span class="comment">//蜥蜴的数量-最大的能逃脱的数量，就是最少的不能逃脱的数量</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Input();</span><br><span class="line">        Soviet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="水题" scheme="https://lightninguz2.github.io/tags/%E6%B0%B4%E9%A2%98/"/>
    
      <category term="网络流" scheme="https://lightninguz2.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>洛谷 5242 [USACO19FEB]Cow Dating P 题解</title>
    <link href="https://lightninguz2.github.io/2020/03/02/%E6%B4%9B%E8%B0%B7-5242-USACO19FEB-Cow-Dating-P-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/03/02/洛谷-5242-USACO19FEB-Cow-Dating-P-题解/</id>
    <published>2020-03-01T16:03:35.000Z</published>
    <updated>2020-03-01T16:03:35.923Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>noi.ac 41 最短路 题解</title>
    <link href="https://lightninguz2.github.io/2020/02/27/noi-ac-41-%E6%9C%80%E7%9F%AD%E8%B7%AF-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/02/27/noi-ac-41-最短路-题解/</id>
    <published>2020-02-27T13:42:32.000Z</published>
    <updated>2020-02-27T13:42:58.617Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>给你一个 $n$ 个点的边带权的树，还有 $m$ 个新增的修建计划，以及 $Q$ 个询问。每一个询问的格式是：给定 $s,t,l,r$ ，问你，如果动用 $[l,r]$ 之间的修建计划，从 $s$ 到 $t$ 的路径中，边权异或和最小是多少？  </p><p>询问之间是独立的，在某一个询问里加入的修建计划，询问完就会拆掉。并且修建计划保证不是树上原来就有的边。</p><p>$n,m,q\le 3\times 10^5$，所有的边权（树上和修建计划） $\le 10^9$。对于每个询问，$1\le s,t\le n$，并且$1\le l\le r\le m$。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>由 <code>bzoj 2115</code> 的结论得，一张图上从 $s$ 到 $t$ 的路径的异或和，可以由另外一条路径的异或和，异或上几个环的异或和得到。</p><p>然后我们珂以先取初始值为 $s$ 到 $t$ 树上路径的异或和，然后在把所有环的异或和放到线性基里，求最小异或和。</p><p>本题还限制了只能动用 $[l,r]$ 之间的修建计划。那就按 $r$ 排个序，对于每个位置 $i$ ，记录所有 $r=i$ 的询问。然后在插入线性基的时候，顺便维护上修建计划的编号。对于每个询问，我们只考虑 $[1,r]$ 的修建计划，不用考虑动用 $&gt;r $的修建计划的问题，只要满足修建计划的编号 $\ge l$ 即珂。线性基求最小异或和的时候，顺便维护下即珂。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 355555</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        F(i,<span class="number">1</span>,cnt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">            <span class="keyword">int</span> head[N];</span><br><span class="line">            <span class="keyword">int</span> EdgeCount;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">            &#123;</span></span><br><span class="line">                <span class="keyword">int</span> To,Label,Next;</span><br><span class="line">            &#125;Ed[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">int</span> _V=N,<span class="keyword">int</span> _E=N&lt;&lt;<span class="number">1</span>)</span> </span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="built_in">memset</span>(Ed,<span class="number">-1</span>,<span class="keyword">sizeof</span>(Edge)*(_E));</span><br><span class="line">                <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(_V));</span><br><span class="line">                EdgeCount=<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                Ed[++EdgeCount]=(Edge)&#123;v,w,head[u]&#125;;</span><br><span class="line">                head[u]=EdgeCount;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">Add2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w=<span class="number">1</span>)</span> </span>&#123;AddEdge(u,v,w);AddEdge(v,u,w);&#125;</span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">Start</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;<span class="keyword">return</span> head[u];&#125;</span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">To</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">return</span> Ed[u].To;&#125;</span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">Label</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">return</span> Ed[u].Label;&#125;</span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">Next</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">return</span> Ed[u].Next;&#125;</span><br><span class="line">    &#125;G;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> n,m,q;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Rd(<span class="number">3</span>,&amp;n,&amp;m,&amp;q);</span><br><span class="line">        G.clear();</span><br><span class="line">        F(i,<span class="number">1</span>,n<span class="number">-1</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u,v,w;Rd(<span class="number">3</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">            G.Add2(u,v,w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> d[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span> <span class="comment">//先预处理出每个点到根的异或和：d[i]</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Tra(i,u)</span><br><span class="line">        &#123;<span class="keyword">int</span> v=__v;</span><br><span class="line">            <span class="keyword">if</span> (v!=f)</span><br><span class="line">            &#123;</span><br><span class="line">                d[v]=d[u]^G.Label(i);</span><br><span class="line">                DFS(v,u);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> w[N];</span><br><span class="line">    <span class="keyword">int</span> l[N],r[N];</span><br><span class="line">    <span class="keyword">int</span> p[<span class="number">32</span>],id[<span class="number">32</span>]; <span class="comment">//p是线性基，id是线性基顺便维护的修建计划编号</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pos[N];</span><br><span class="line">    <span class="keyword">int</span> ans[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        DFS(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        F(i,<span class="number">1</span>,m) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u,v,len;Rd(<span class="number">3</span>,&amp;u,&amp;v,&amp;len);</span><br><span class="line">            w[i]=d[u]^d[v]^len; <span class="comment">//第i个修建计划从u到v，那就会产生一个环，这个环的异或和为：u到v树上路径的异或和，再以后上修建计划的边权</span></span><br><span class="line">        &#125;</span><br><span class="line">        F(i,<span class="number">1</span>,q) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> s,t;Rd(<span class="number">2</span>,&amp;s,&amp;t);</span><br><span class="line">            ans[i]=d[s]^d[t]; <span class="comment">//初始答案就是s到t的树上路径异或</span></span><br><span class="line">            Rd(<span class="number">2</span>,&amp;l[i],&amp;r[i]); </span><br><span class="line">            pos[r[i]].p_b(i); <span class="comment">//离线，按r排序，把r相同的询问一块考虑</span></span><br><span class="line">        &#125;</span><br><span class="line">        F(t,<span class="number">1</span>,m)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x=w[t],r=t;</span><br><span class="line">            D(i,<span class="number">30</span>,<span class="number">0</span>) <span class="keyword">if</span> ((x&gt;&gt;i)&amp;<span class="number">1</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!p[i])&#123;p[i]=x;id[i]=r;<span class="keyword">break</span>;&#125;</span><br><span class="line">                <span class="keyword">if</span> (id[i]&lt;r) swap(p[i],x),swap(id[i],r);</span><br><span class="line">                x^=p[i];</span><br><span class="line">            &#125; <span class="comment">//插入线性基的时候顺便维护编号</span></span><br><span class="line">            F(k,<span class="number">0</span>,sz(pos[t])<span class="number">-1</span>)</span><br><span class="line">            &#123;<span class="keyword">int</span> v=pos[t][k];</span><br><span class="line">                D(i,<span class="number">30</span>,<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (id[i]&gt;=l[v]) ans[v]=min(ans[v],ans[v]^p[i]);</span><br><span class="line">                 <span class="comment">//在考虑编号&gt;=l的情况下，求最小异或和</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        F(i,<span class="number">1</span>,q) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Input();</span><br><span class="line">        Soviet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="图论" scheme="https://lightninguz2.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="毒瘤" scheme="https://lightninguz2.github.io/tags/%E6%AF%92%E7%98%A4/"/>
    
      <category term="线性基" scheme="https://lightninguz2.github.io/tags/%E7%BA%BF%E6%80%A7%E5%9F%BA/"/>
    
  </entry>
  
  <entry>
    <title>洛谷 3073 [USACO13FEB]Tractor S 题解</title>
    <link href="https://lightninguz2.github.io/2020/02/27/%E6%B4%9B%E8%B0%B7-3073-USACO13FEB-Tractor-S-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/02/27/洛谷-3073-USACO13FEB-Tractor-S-题解/</id>
    <published>2020-02-27T13:08:36.000Z</published>
    <updated>2020-02-27T13:16:40.693Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>给定一个 $n\times n$ 的矩阵 $a$，两个相邻的格子之间的代价，就是两个格子 $a$ 值之差的绝对值。请你找到一个联通块，使得它格子数超过 $\lfloor \dfrac{n^2}{2} \rfloor$ ，并且最大的边权最小。</p><p>$n\le 1000$，$a_{i,j}\le 10^6$，对于所有$1\le i,j\le n$</p><h3 id="思路框架"><a href="#思路框架" class="headerlink" title="思路框架"></a>思路框架</h3><p>比较基础的问题，首先“最大值最小”想到二分，然后对于相邻的两个格子，如果 $a$ 值之差的绝对值 $&lt;=mid$ ，就用并查集合并起来这两个点，最后找并查集里有没有 $size&gt;\lfloor \dfrac{n^2}{2} \rfloor$ 的联通块即珂。</p><p>注意：并查集是一维的结构，把二维压缩到一维的方法：$(i,j)\rightarrow (i-1)n+j$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;using namespace std;</span></span></span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> N 1333</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">            <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">            x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            va_list args;</span><br><span class="line">            va_start(args,cnt);</span><br><span class="line">            F(i,<span class="number">1</span>,cnt) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">            &#125;</span><br><span class="line">            va_end(args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">DSU</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">                <span class="keyword">int</span> Fa[N*N],Cnt[N*N];</span><br><span class="line">                <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;F(i,<span class="number">1</span>,min(n,N*N<span class="number">-1</span>)) Fa[i]=i,Cnt[i]=<span class="number">1</span>;&#125;</span><br><span class="line">                <span class="comment">// 一定要注意这里是N*N</span></span><br><span class="line">                <span class="comment">// 我在这里都写的N，然后挂了...</span></span><br><span class="line">                <span class="function"><span class="keyword">int</span>  <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x==Fa[x]?x:Fa[x]=Find(Fa[x]);&#125;</span><br><span class="line">                <span class="function"><span class="keyword">bool</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">                </span>&#123;</span><br><span class="line">                        <span class="keyword">int</span> au=Find(u),av=Find(v);</span><br><span class="line">                        <span class="keyword">if</span> (au==av) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">if</span> (Cnt[au]&lt;Cnt[av]) Cnt[av]+=Cnt[au],Fa[au]=av;</span><br><span class="line">                        <span class="keyword">else</span>                                   Cnt[au]+=Cnt[av],Fa[av]=au;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;D;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n,a[N][N];</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                R1(n);</span><br><span class="line">                F(i,<span class="number">1</span>,n) F(j,<span class="number">1</span>,n) R1(a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> id(i,j) ((i-1)*n+j) <span class="comment">//二维转化成一维</span></span></span><br><span class="line">        <span class="keyword">int</span> dx[<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,dy[<span class="number">2</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>&#125;; </span><br><span class="line">        <span class="comment">//为了避免重复枚举，每个点只考虑它正下，正右方的点</span></span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">cxk</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                D.Init(n*n);</span><br><span class="line">                F(i,<span class="number">1</span>,n) F(j,<span class="number">1</span>,n) F(k,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">int</span> nx=i+dx[k],ny=j+dy[k];</span><br><span class="line">                        <span class="keyword">if</span> (nx&lt;=n <span class="keyword">and</span> ny&lt;=n <span class="keyword">and</span> <span class="built_in">abs</span>(a[i][j]-a[nx][ny])&lt;=x) </span><br><span class="line">                        <span class="comment">//在矩阵内 并且 a值差的绝对值&lt;=mid</span></span><br><span class="line">                        &#123;</span><br><span class="line">                                D.Merge(id(i,j),id(nx,ny));</span><br><span class="line">                                <span class="comment">//合并这两个点</span></span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> Max=<span class="number">-1</span>;</span><br><span class="line">                F(i,<span class="number">1</span>,n*n) Max=max(Max,D.Cnt[D.Find(i)]);</span><br><span class="line">                <span class="keyword">return</span> Max&gt;=n*n/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">2e6</span>;</span><br><span class="line">                <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">if</span> (cxk(mid)) r=mid;</span><br><span class="line">                        <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,l);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">        <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                Input();</span><br><span class="line">                Soviet();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Flandre_Scarlet::IsMyWife();</span><br><span class="line">        getchar();getchar();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="二分答案" scheme="https://lightninguz2.github.io/tags/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/"/>
    
      <category term="水题" scheme="https://lightninguz2.github.io/tags/%E6%B0%B4%E9%A2%98/"/>
    
      <category term="并查集" scheme="https://lightninguz2.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>noi.ac 405 bzoj 4403 序列统计 题解</title>
    <link href="https://lightninguz2.github.io/2020/02/24/noi-ac-405-bzoj-4403-%E5%BA%8F%E5%88%97%E7%BB%9F%E8%AE%A1-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/02/24/noi-ac-405-bzoj-4403-序列统计-题解/</id>
    <published>2020-02-24T06:52:31.000Z</published>
    <updated>2020-02-24T06:53:26.794Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>noi.ac再次蒯题，实锤了…</p><p>请你求长度在 $[1,n]$ 范围内，值域在 $[l,r]$ 范围内的序列中，不下降序列有多少个。答案对  $1000003$（是质数）取膜。</p><p>多组数据，数组组数 $T\le 100$ ，每组数据 $n,l,r\le 1e9$ ，并且保证$l\le r$</p><h3 id="思路框架"><a href="#思路框架" class="headerlink" title="思路框架"></a>思路框架</h3><p>首先，在 $[l,r]$ 范围内，和在 $[1,r-l+1]$ 范围内，没有本质上的区别。<br>设 $m=r-l+1$，然后答案就是 $C_{n+m}^{m}-1$</p><h3 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h3><p>我们先求长度固定为 $k$ 的时候，有多少满足条件的序列，然后取遍 $k=1,2\cdots n$ ，求和。</p><h4 id="求有多少固定长度非严格上升子序列"><a href="#求有多少固定长度非严格上升子序列" class="headerlink" title="求有多少固定长度非严格上升子序列"></a>求有多少固定长度非严格上升子序列</h4><h5 id="严格上升怎么做"><a href="#严格上升怎么做" class="headerlink" title="严格上升怎么做"></a>严格上升怎么做</h5><p>长度为 $k$ 的时候，值域在 $[1,m]$ 内的<strong>严格上升</strong>序列的格式就是 $C_{m}^{k}$ 。因为我们只要在 $[1,m]$ 内选出来 $k$ 个数，然后把它排一下序，那就能得到一个长度为 $k$ ，值域在 $[1,m]$ 内的一个<strong>严格上升</strong>序列了。</p><h5 id="如何转化成非严格上升"><a href="#如何转化成非严格上升" class="headerlink" title="如何转化成非严格上升"></a>如何转化成非严格上升</h5><p>我们在选严格上升序列的时候，假设我们当前选到的数为 $x$，那么下一个位置珂以是 $x+1,x+2…m$，有 $m-x$ 种选择。而选非严格上升序列的时候，却有 $m-x+1 $种选择。</p><p>那这个时候，我们只要把 $m$ 变成 $m+1$ ，那答案就和严格上升的时候一样了！！</p><p>序列的长度为 $k$ ，那么我们在选第 $[1,k-1]$这些位置的时候，都要把 $m$ 变成 $m+1$。那一共就是变成 $m+k-1$。</p><p>总结一下，长度为 $k$ 值域在 $[1,m]$ 之间的非严格上升序列个数为 $C_{m+k-1}^{k}$</p><h4 id="优化求和"><a href="#优化求和" class="headerlink" title="优化求和"></a>优化求和</h4><p>我们要求 $\sum\limits_{i=1}^{n} C_{m+i-1}^{i}=C_{m}^1+C_{m+1}^2+C_{m+2}^3…+C_{m+n-1}^{n}$</p><p>显然，$C_{n}^{m}=C_{n-1}^{m}+C_{n-1}^{m-1}$</p><p>那也就是说，我们珂以用两个相邻的 $C_{n}^{xxx}$ 得到一个 $C_{n+1}^{xxx}$。</p><p>那么我们考虑给第一项加上一个 $C_{m}^{0}$，也就是 $1$，然后最后减掉一个 $C_{m}^{0}$。</p><p>那我们开始推式子了，系好安全带（为了方便理解，我拆开$\Sigma$）：<br>原式<br>$=C_{m}^{0}+C_{m}^{1}+C_{m+1}^{2}+C_{m+2}^3…+C_{m+n-1}^n-1$<br>$=C_{m+1}^{1}+C_{m+1}^{2}+C_{m+2}^3+…+C_{m+n-1}^n-1$<br>$=C_{m+2}^{2}+C_{m+2}^{3}+….+C_{m+n-1}^n-1$<br>$=C_{m+n-1}^{n-1}+C_{m+n-1}^{n}-1$<br>$=C_{m+n}^{n}-1$</p><p>所以答案就是 $C_{m+n}^{n}-1$。预处理阶乘（逆元）+Lucas定理。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> mod 1000003</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N (mod&lt;&lt;1)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        F(i,<span class="number">1</span>,cnt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> fac[N],ifac[N];</span><br><span class="line">    <span class="comment">//阶乘，和阶乘的逆元</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        F(i,<span class="number">1</span>,mod<span class="number">-1</span>) fac[i]=fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">        ifac[mod<span class="number">-1</span>]=mod<span class="number">-1</span>;</span><br><span class="line">       <span class="comment">//mod是质数，那么(mod-1)! %mod=mod-1，这个是Wilson定理</span></span><br><span class="line">       <span class="comment">//然后mod-1的逆元，显然是mod-1</span></span><br><span class="line">        D(i,mod<span class="number">-2</span>,<span class="number">0</span>) ifac[i]=ifac[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n,l,r;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Rd(<span class="number">3</span>,&amp;n,&amp;l,&amp;r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span> <span class="comment">//Lucas定理</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m&gt;n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (n&lt;mod <span class="keyword">and</span> m&lt;mod)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> fac[n]*ifac[m]%mod*ifac[n-m]%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> C(n/mod,m/mod)*C(n%mod,m%mod)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=r-l+<span class="number">1</span>; <span class="comment">//len就是m了</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(C(n+len,len)+mod<span class="number">-1</span>)%mod);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Init();</span><br><span class="line">        <span class="keyword">int</span> t;R1(t);</span><br><span class="line">        F(i,<span class="number">1</span>,t)</span><br><span class="line">        &#123;</span><br><span class="line">            Input();</span><br><span class="line">            Soviet();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> int <span class="comment">//long long </span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="思维" scheme="https://lightninguz2.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="组合数学" scheme="https://lightninguz2.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
      <category term="毒瘤" scheme="https://lightninguz2.github.io/tags/%E6%AF%92%E7%98%A4/"/>
    
  </entry>
  
  <entry>
    <title>noi.ac 716 答案是整数 题解</title>
    <link href="https://lightninguz2.github.io/2020/02/23/noi-ac-716-%E7%AD%94%E6%A1%88%E6%98%AF%E6%95%B4%E6%95%B0-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/02/23/noi-ac-716-答案是整数-题解/</id>
    <published>2020-02-23T13:27:33.000Z</published>
    <updated>2020-02-23T13:37:17.746Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>求<br>$\sum\limits_{i=1}^{n}\sum\limits_{j=1}^{n}\dfrac{ij}{\gcd (i,j)}$。</p><p>对 $998244353$ 取模。$n&lt;=10^7,m&lt;=10^{14}$。</p><p>注：空间限制只有64MB，只够开 $10^7$ 的<code>int</code>型数组。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h4 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h4><p>设 $n\le m$，因为 $n,m$ 对称。<br>设 $g=\gcd(i,j)$ （简写）<br>$\sum\limits_{i=1}^{n}\sum\limits_{j=1}^{m} \dfrac{ij}{g^2}$<br>$\sum\limits_{d=1}^{n}\sum\limits_{i=1}^{n/d}\sum\limits_{j=1}^{m/d}[g=1]ij$ （枚举$\gcd$）<br>$\sum\limits_{q=1}^{n}\mu(q)\sum\limits_{d=1}^{n}\sum\limits_{i=1}^{n/d}\sum\limits_{j=1}^{m/d}[q|g]ij$<br>$\sum\limits_{q=1}^{n}\mu(q)\sum\limits_{d=1}^{n}\sum\limits_{i=1}^{n/dq}\sum\limits_{j=1}^{m/dq}iq\times jq$<br>$\sum\limits_{q=1}^{n}\mu(q)q^2\sum\limits_{d=1}^{n}\sum\limits_{i=1}^{n/dq}\sum\limits_{j=1}^{m/dq}ij$<br>设 $s(x)=\sum\limits_{i=1}^x i$<br>原式化为：<br>$\sum\limits_{q=1}^n\mu(q)q^2\sum\limits_{d=1}^{n}s(n/dq)s(m/dq)$<br>我们发现， $dq&gt;n$ 时，$s(n/dq)=0$，也就不会有贡献了。那么我们珂以缩小 $d$ 的范围：<br>$\sum\limits_{q=1}^{n}\mu(q)q^2\sum\limits_{d=1}^{n/q}s(n/dq)s(m/dq)$</p><p>整除分块两次，是 $O(n)$ 的（？）。</p><p>但是似乎这个复杂度还和 $m$ 有点关系，我不是很清楚…总之，它TLE了，只有 $80$ 分。（亲测）</p><p>那么我们考虑枚举 $q\times d$，设为 $T$。它的贡献就是 $s(n/T)s(m/T)$ 。而它被算到的此时，显然， $T=dq$ 是 $q$ 的倍数，所以 $q$ 是 $T=dq$ 的因数。那 $dq=T$ 被算到的次数就是 $\sum\limits_{q|T} \mu(q)q^2$。将这个值设为 $f(T)$。</p><p>式子化一下，变成：$\sum\limits_{T=1}^{n}f(T)\times s(n/T)\times s(m/T)$。</p><p>那么问题就在于我们怎么筛这个 $f(T)$ ，还要严格线性，因为 $n&lt;=10^7$。</p><h4 id="如何筛f函数"><a href="#如何筛f函数" class="headerlink" title="如何筛f函数"></a>如何筛f函数</h4><p>显然，$f(1)=1$，而且当 $p$ 和 $q$ 互质时，$f(p\times q)=f(p)\times f(q)$。这说明它也许能线性筛。</p><p>考虑质数情况。当 $p$ 为质数时，$f(p)=1-p^2$。</p><p>接着，$f(p^k)=\sum\limits_{d|p^k}\mu(d)d^2$。显然，$p^k$ 的因数只有 $p^0,p^1\cdots p^k$。而对于 $p^j$ （$2\le j \le k$），显然，$\mu(p^j)=0$，也就不会有贡献了。因此，有贡献的只有 $p^0$ 和 $p^1$ 。</p><p>那也就是说，$f(p^k)=f(p)$！！！（换句话说，同一个质因子乘多少遍都不会改变 $f$ 的值）</p><p>那么我们在线性筛的时候有这样一步：枚举 $i$，找一个质数 $u$。如果 $u$ 不是 $i$ 的因数，那么显然 $i$ 和 $u$ 互质，$f(i\times u)=f(i)\times f(u)$。否则 $u$ 是 $i$ 的质因子，然后我们要计算 $f(i\times u)$ 的值，并 <code>break</code>。</p><p>由上面那个性质得，$u$ 是 $i$ 的质因子，而我们又把它乘了一遍，并不会改变 $f$ 的值。也就是 $f(i\times u)=f(i)\times f(u)$。</p><p>知道了这些，就能线性筛这个 $f$ 函数了！！！</p><p>线性筛出来了 $f$ 之后，整除分块都不用，直接 $O(n)$ 暴力就能求出原式的值了。而且是很稳的 $O(n)$ 哦！</p><h3 id="极-限-卡-常"><a href="#极-限-卡-常" class="headerlink" title="极 限 卡 常"></a>极 限 卡 常</h3><p>上面说了，空间限制只有 64MB ，只能开的下一个 $10^7$ 个<code>int</code>数组，两个就不行了。</p><p>说的具体点，能开的下 $16 777 216$个 <code>int</code>。</p><p>但是我们常见的线性筛，需要一个<code>int primes[1e7]</code>保存质数，还有一个<code>bool notp[1e7]</code>标记是否不是素数，然后才是我们的<code>f</code>数组。这可怎么办呢？</p><p>首先，$[1,n]$ 中的质数个数和 $n$ 绝对不是同一个级别。具体的说，大概是 $\dfrac{n}{\ln(n)}$ 级别的。$[1,1e7]$ 中的质数，经过测试，还不足 $10^6$ 个。那么我们的 <code>primes</code> 数组就珂以开的小一点了。</p><p>接着，<code>bool notp[1e7]</code> 珂以用一个 <code>bitset</code> 存储，空间直接少掉 $32$ 倍，你说爽不爽。</p><p>然后我们就能卡进空间常数了！nice！</p><p>还有，记得不要全开<code>long long</code> 啊！</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 10000007    </span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> mod 998244353ll</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> i6  166374059ll</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> i2  499122177ll</span></span><br><span class="line">    <span class="comment">// 模数，2的逆元，6的逆元 </span></span><br><span class="line">    <span class="comment">// 只是打个板子，并不是所有的数都有用上</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="comment">//并不想用快读，数据小</span></span><br><span class="line"></span><br><span class="line">    ll n,m;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> f[N];</span><br><span class="line">    <span class="keyword">int</span> primes[N/<span class="number">10</span>]; <span class="comment">//N/10足够了</span></span><br><span class="line">    <span class="built_in">bitset</span>&lt;N&gt; notp; <span class="comment">//STL万岁</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> &amp;cnt=primes[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> n=<span class="number">1e7</span>;</span><br><span class="line">        f[<span class="number">1</span>]=notp[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        F(i,<span class="number">2</span>,n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!notp[i])</span><br><span class="line">            &#123;</span><br><span class="line">                f[i]=(mod+<span class="number">1</span><span class="number">-1l</span>l*i*i%mod)%mod;</span><br><span class="line">                <span class="comment">// 上面说了，i为质数的时候，f[i]=1-i*i</span></span><br><span class="line">                <span class="comment">// 别忘了取模啊</span></span><br><span class="line">                primes[++cnt]=i;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt <span class="keyword">and</span> i*primes[j]&lt;=n;++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> u=primes[j];</span><br><span class="line">                notp[i*u]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (i%u!=<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    f[i*u]=<span class="number">1l</span>l*f[i]*f[u]%mod;</span><br><span class="line">                    <span class="comment">//利用积性性质，f[i*u]=f[i]*f[u]</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    f[i*u]=f[i];</span><br><span class="line">                    <span class="comment">//上面特意讲了，此时f[i*u]=f[i]</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">s</span><span class="params">(ll x)</span></span>&#123;x%=mod;<span class="keyword">return</span> x*(x+<span class="number">1</span>)%mod*i2%mod;&#125;</span><br><span class="line">    <span class="comment">//计算1+2+3...+x的和，也就是x*(x+1)/2</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n&gt;m) swap(n,m);</span><br><span class="line">        <span class="comment">//令n&lt;=m</span></span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        F(i,<span class="number">1</span>,n)</span><br><span class="line">        &#123;</span><br><span class="line">            ans+=<span class="number">1l</span>l*f[i]*s(n/i)%mod*s(m/i)%mod;</span><br><span class="line">            <span class="comment">//每次ans+=f[i]*s(n/i)*s(m/i)</span></span><br><span class="line">            <span class="comment">//别忘了取模啊！</span></span><br><span class="line">            ans%=mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Init();</span><br><span class="line">        Input();</span><br><span class="line">        Soviet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="毒瘤" scheme="https://lightninguz2.github.io/tags/%E6%AF%92%E7%98%A4/"/>
    
      <category term="莫比乌斯反演" scheme="https://lightninguz2.github.io/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 1304E 1-Trees and Queries 题解</title>
    <link href="https://lightninguz2.github.io/2020/02/21/Codeforces-1304E-1-Trees-and-Queries-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/02/21/Codeforces-1304E-1-Trees-and-Queries-题解/</id>
    <published>2020-02-21T01:16:23.000Z</published>
    <updated>2020-02-21T07:45:31.230Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>$n$ 个节点的树，每条边权都是 $1$。有 $q$ 个询问，每次给定 $x,y,a,b,k$，表示你在树上加一条边 $(x\leftrightarrow y)$ ，并求从 $a$ 到 $b$ 走 $k$ 条边的最短路。其中每条边和点都允许<strong>重复经过</strong>。求完询问后，把 $(x\leftarrow y)$ 这条边删掉（即：询问之间都是独立的）。</p><p>$n\le 1e5; q\le 1e5; 1\le x,y,a,b \le n; 1\le k \le 1e9$</p><h3 id="思路框架"><a href="#思路框架" class="headerlink" title="思路框架"></a>思路框架</h3><p>首先倍增LCA维护两点之间的最短路。</p><p>由于边能重复经过，参考今年普及 T4 的思路，我们只要找一条长度 $\le k$ 并且和 $k$ 同奇偶的路即可。</p><p>原先$a,b$之间的最短路只能有一条。但是加上边 $x,y$ 之后，就多了两条：<br>$a\rightarrow x \rightarrow y \rightarrow b$，长度为 $Q(a,x)+1+Q(y,b)$<br>$a\rightarrow y \rightarrow x \rightarrow b$，长度为 $Q(a,y)+1+Q(x,b)$<br>（其中 $Q(u,v)$ 表示 $u$ 到 $v$ 的最短路，代码里叫<code>PathLen</code>）<br>这三条里面判断一下，哪条能满足：长度 $\le k$ 且长度和$k$同奇偶</p><p>有一个就输出<code>YES</code>，否则<code>NO</code>。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 155555</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        F(i,<span class="number">1</span>,cnt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">            <span class="keyword">int</span> head[N];</span><br><span class="line">            <span class="keyword">int</span> EdgeCount;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">            &#123;</span></span><br><span class="line">                <span class="keyword">int</span> To,Label,Next;</span><br><span class="line">            &#125;Ed[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">int</span> _V=N,<span class="keyword">int</span> _E=N&lt;&lt;<span class="number">1</span>)</span> </span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="built_in">memset</span>(Ed,<span class="number">-1</span>,<span class="keyword">sizeof</span>(Edge)*(_E));</span><br><span class="line">                <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(_V));</span><br><span class="line">                EdgeCount=<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                Ed[++EdgeCount]=(Edge)&#123;v,w,head[u]&#125;;</span><br><span class="line">                head[u]=EdgeCount;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">Add2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w=<span class="number">1</span>)</span> </span>&#123;AddEdge(u,v,w);AddEdge(v,u,w);&#125;</span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">Start</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;<span class="keyword">return</span> head[u];&#125;</span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">To</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">return</span> Ed[u].To;&#125;</span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">Label</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">return</span> Ed[u].Label;&#125;</span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">Next</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">return</span> Ed[u].Next;&#125;</span><br><span class="line">    &#125;G;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        R1(n);</span><br><span class="line">        G.clear();</span><br><span class="line">        F(i,<span class="number">1</span>,n<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u,v;Rd(<span class="number">2</span>,&amp;u,&amp;v);</span><br><span class="line">            G.Add2(u,v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> fa[N][<span class="number">22</span>],deep[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        deep[u]=(u==f)?<span class="number">0</span>:deep[f]+<span class="number">1</span>; <span class="comment">//deep[i] 表示从 i 到根经过的 **边数** </span></span><br><span class="line">        <span class="comment">//所以 deep[根] 是 0 哦</span></span><br><span class="line">        fa[u][<span class="number">0</span>]=f; </span><br><span class="line">        F(i,<span class="number">1</span>,<span class="number">20</span>) fa[u][i]=fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">        Tra(i,u)</span><br><span class="line">        &#123;<span class="keyword">int</span> v=__v;</span><br><span class="line">            <span class="keyword">if</span> (v!=f) DFS(v,u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> <span class="comment">//求a,b的LCA</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (deep[a]&lt;deep[b]) swap(a,b);</span><br><span class="line">        D(i,<span class="number">20</span>,<span class="number">0</span>) <span class="keyword">if</span> (deep[fa[a][i]]&gt;=deep[b]) a=fa[a][i];</span><br><span class="line">        <span class="keyword">if</span> (a==b) <span class="keyword">return</span> a;</span><br><span class="line">        D(i,<span class="number">20</span>,<span class="number">0</span>) <span class="keyword">if</span> (fa[a][i]!=fa[b][i]) a=fa[a][i],b=fa[b][i];</span><br><span class="line">        <span class="keyword">return</span> fa[a][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">PathLen</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deep[a]+deep[b]<span class="number">-2</span>*deep[LCA(a,b)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">cxk</span><span class="params">(<span class="keyword">int</span> path,<span class="keyword">int</span> k)</span></span>&#123;<span class="keyword">return</span> path&lt;=k <span class="keyword">and</span> (k-path)%<span class="number">2</span>==<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        DFS(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> q;R1(q);</span><br><span class="line">        F(i,<span class="number">1</span>,q)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> a,b,x,y,k;</span><br><span class="line">            Rd(<span class="number">5</span>,&amp;x,&amp;y,&amp;a,&amp;b,&amp;k);</span><br><span class="line">            <span class="keyword">int</span> path1=PathLen(a,b);</span><br><span class="line">            <span class="keyword">int</span> path2=PathLen(a,x)+<span class="number">1</span>+PathLen(y,b);</span><br><span class="line">            <span class="keyword">int</span> path3=PathLen(a,y)+<span class="number">1</span>+PathLen(x,b); <span class="comment">//上面讨论的三条路</span></span><br><span class="line">            <span class="keyword">if</span> (cxk(path1,k) <span class="keyword">or</span> cxk(path2,k) <span class="keyword">or</span> cxk(path3,k)) <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Input();</span><br><span class="line">        Soviet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后记：-版权问题"><a href="#后记：-版权问题" class="headerlink" title="后记： 版权问题"></a>后记： 版权问题</h3><p>（不想看就算了）<br>考场上，我想出了这个算法（第一个）。然后我把这个算法告诉了我的好朋友<code>lym</code>。他又把这个算法告诉了他的好朋友<code>zhk</code>。</p><p>最近<code>zhk</code>也像我一样搭了一个hexo博客，他就来找我帮他调试博客的功能。然后我发现了他有一篇文章，就是这个的题解，同步发表于洛谷博客的。我一看这思路似乎很眼熟，便去问他你是怎么想出这思路的。</p><p>（开始回溯）他说，是<code>lym</code>告诉他的，<code>lym</code>给了他一张截图。</p><p>截图：<br><img src="https://lightninguz2.github.io/addons/images/Codeforces1304E_1.png" alt></p><p>你们看这个头像和我的是否有几分相像呢（滑稽）。这真是 缘 分 的 天 空 啊。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="思维" scheme="https://lightninguz2.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="树形结构" scheme="https://lightninguz2.github.io/tags/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>noi.ac 307 洛谷 2391 白雪皑皑(flower) 题解</title>
    <link href="https://lightninguz2.github.io/2020/02/19/noi-ac-307-%E6%B4%9B%E8%B0%B7-2391-%E7%99%BD%E9%9B%AA%E7%9A%91%E7%9A%91-flower-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/02/19/noi-ac-307-洛谷-2391-白雪皑皑-flower-题解/</id>
    <published>2020-02-19T12:23:26.000Z</published>
    <updated>2020-02-19T12:25:58.786Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p><del>老铁们，虽然不是同一个题目，但是是一样的题意，今天我来给大家打一个暴力模拟线段树，奥利给</del></p><p>一个长度为 $n$ 的序列，初始全 $0$ 。有 $m$ 次修改操作。给你两个常数 $p,q$，第 $i$ 次操作会把第 $(i\times p+q)\mod n+1$ 和 $(i\times q+p)\mod n+1$ 之间的所有数赋值为 $i$。求出最后$n$个数的状态。</p><p>$n\le 10^6,m\le 10^7$。</p><h3 id="思路框架"><a href="#思路框架" class="headerlink" title="思路框架"></a>思路框架</h3><p>这个是不一样的做法，是线段树+一点点思维优化。</p><p>（大家似乎都是写的链表做法啊…我不会打链表啊…）</p><p>我们发现$(i\times p+q)\mod n+1$这个式子，可以先把$i$对$n$取膜之后再算！！！也就是说，有很多次区间覆盖操作都是覆盖的同一块区间！</p><p>那么本质不同的修改操作就只有$n$个，再加上最后$m\mod n$个除不尽的。</p><p>特判$m&lt;n$的情况。</p><p>无论哪种情况，复杂度都是$O(n \log n)$的。对于$n\le 10^6$的数据，足够了。</p><h3 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h3><p>显然，在同一个同余系里，最后面那次覆盖的颜色是答案。那么我们把$m$次操作，每$n$个分一块（除不尽的先不管）。显然，最后一块的操作可以把前面几块的操作全部都覆盖掉。所以最后一块是唯一有用的一块。</p><p>$m$除以$n$，可以画出这样的图：</p><p><img src="https://i.loli.net/2020/02/18/XlqZi1oEI9UYnsN.jpg" alt></p><p><code>last</code>指针表示最后一块有用的区间<strong>前面一个位置</strong>，那么最后一块有用的染色操作就是$i=last+1,last+2\cdots last+n$的时候。</p><p>容易计算出 <code>last</code> 指针为：$n(\lfloor\dfrac{m}{n}\rfloor-1)$</p><p>最后$m\mod n$个特判掉。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 1666666</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        F(i,<span class="number">1</span>,cnt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SegmentTree</span> //线段树，区间覆盖，单点求值</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            <span class="keyword">int</span> l,r,c,s;</span><br><span class="line">        &#125;tree[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> ls index&lt;&lt;1</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rs index&lt;&lt;1|1</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> L tree[index].l</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> R tree[index].r</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> S tree[index].s</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> C tree[index].c</span></span><br><span class="line"> </span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lL tree[ls].l</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lR tree[ls].r</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lS tree[ls].s</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lC tree[ls].c</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rL tree[rs].l</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rR tree[rs].r</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rS tree[rs].s</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rC tree[rs].c</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            L=l,R=r;</span><br><span class="line">            <span class="keyword">if</span> (l==r) &#123;S=C=<span class="number">0</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">            <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            Build(l,mid,ls); Build(mid+<span class="number">1</span>,r,rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">ChangeOne</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            C=S=x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(<span class="keyword">int</span> index=<span class="number">1</span>)</span> </span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (C)</span><br><span class="line">            &#123;</span><br><span class="line">                ChangeOne(C,ls); ChangeOne(C,rs);</span><br><span class="line">                C=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Change</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        <span class="comment">//l到r覆盖上x</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l&gt;R <span class="keyword">or</span> L&gt;r) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> (l&lt;=L <span class="keyword">and</span> R&lt;=r) <span class="keyword">return</span> ChangeOne(x,index);</span><br><span class="line">            PushDown(index);</span><br><span class="line">            Change(l,r,x,ls); Change(l,r,x,rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        <span class="comment">//查询第pos个位置的值</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (pos&lt;L <span class="keyword">or</span> R&lt;pos) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (L==R) <span class="keyword">return</span> S;</span><br><span class="line">            PushDown(index);</span><br><span class="line">            <span class="keyword">return</span> Query(pos,ls)+Query(pos,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;T;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n,m,p,q;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Rd(<span class="number">4</span>,&amp;n,&amp;m,&amp;p,&amp;q);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> ll(i) ((i*p+q)%n+1)</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rr(i) ((i*q+p)%n+1)</span></span><br><span class="line">        T.Build(<span class="number">1</span>,n);</span><br><span class="line">        <span class="keyword">if</span> (m&lt;n) <span class="comment">//m&lt;n直接特判</span></span><br><span class="line">        &#123;</span><br><span class="line">            F(i,<span class="number">1</span>,m) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> l=ll(i),r=rr(i); <span class="keyword">if</span> (l&gt;r) swap(l,r);</span><br><span class="line">                <span class="comment">//记得判断l&gt;r的情况</span></span><br><span class="line">                T.Change(l,r,i);</span><br><span class="line">            &#125;</span><br><span class="line">            F(i,<span class="number">1</span>,n) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,T.Query(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> last=(m/n<span class="number">-1</span>)*n;</span><br><span class="line">            F(i,<span class="number">1</span>,n) <span class="comment">//找到最后一块有用的区间</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> l=ll(i),r=rr(i); <span class="keyword">if</span> (l&gt;r) swap(l,r);</span><br><span class="line">                T.Change(l,r,++last);</span><br><span class="line">            &#125;</span><br><span class="line">            F(i,last+<span class="number">1</span>,m) <span class="comment">//最后m%n个也判掉</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> l=ll(i),r=rr(i); <span class="keyword">if</span> (l&gt;r) swap(l,r);</span><br><span class="line">                T.Change(l,r,i);</span><br><span class="line">            &#125;</span><br><span class="line">            F(i,<span class="number">1</span>,n) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,T.Query(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Input();</span><br><span class="line">        Soviet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="思维" scheme="https://lightninguz2.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="数论" scheme="https://lightninguz2.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="线段树" scheme="https://lightninguz2.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>洛谷 2572 bzoj 1858 [SCOI2010]序列操作 题解</title>
    <link href="https://lightninguz2.github.io/2020/02/17/%E6%B4%9B%E8%B0%B7-2572-bzoj-1858-SCOI2010-%E5%BA%8F%E5%88%97%E6%93%8D%E4%BD%9C-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/02/17/洛谷-2572-bzoj-1858-SCOI2010-序列操作-题解/</id>
    <published>2020-02-17T10:45:21.000Z</published>
    <updated>2020-02-17T11:08:22.410Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>你有一个长度为$n$的01序列，支持$m$个操作，操作分五种，形式分别是：</p><ul><li><code>0 l r</code> 从$l$到$r$都变成$0$</li><li><code>1 l r</code> 从$l$到$r$都变成$1$</li><li><code>2 l r</code> 从$l$到$r$全部取反（$0$变成$1$，$1$变成$0$）</li><li><code>3 l r</code> 询问$l$到$r$有多少$1$</li><li><code>4 l r</code> 询问$l$到$r$最长的连续的$1$有多长</li></ul><h3 id="思路框架"><a href="#思路框架" class="headerlink" title="思路框架"></a>思路框架</h3><p>线段树多标记。</p><h3 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h3><p>线段树，分几个方面讲</p><ol><li>每个节点存什么信息</li><li>如何维护这些信息（<code>Update</code> 函数）</li><li><code>lazytag</code> 的优先级，以及如何单节点修改，还有如何 <code>PushDown</code>。</li></ol><h4 id="节点信息"><a href="#节点信息" class="headerlink" title="节点信息"></a>节点信息</h4><p>我们按操作顺序考虑。首先是区间覆盖的操作，那么我们就要维护一个标记，设为 $cover$ 标记（简记为 $C$）。由于 $C$ 取 $0/1$ 都是有意义的，那么就只好用 $-1$ 表示没有标记了。</p><p>然后还有取反操作。那么我们维护一个 $flip$ 标记（简记为 $F$ ），$F=0/1$ 表示区间被取反了$F$ 次。由于取反两次就相当于没有取反，所以 $F$ 只需要设置为 $0/1$ 即珂。</p><p>然后询问有多少个 $1$。显然我们需要维护区间有多少个 $1$ ，设为 $s[1]$ （$s$ 就是 $sum$ 啦）。然后我们发现，取反完之后， $0$ 变成 $1$，$1$ 变成$0$。所以$1$有的标记，$0$ 都要有。所以我们还有维护区间有多少 $0$，设为 $s[0]$。</p><p>然后询问连续的 $1$ 。这个是套路：我们维护从左边起最大连续的 $0/1$ ，设为 $lc[0/1]$（就是<code>left  consecutive</code>的简写 ），还有从右边起最大连续的 $0/1$，设为 $rc[0/1]$。还有最长的连续 $0/1$，记为$x$。（这个名字是瞎jb取的，因为没有名字了）</p><h4 id="如何维护"><a href="#如何维护" class="headerlink" title="如何维护"></a>如何维护</h4><p>众所周知，<code>update</code> 的时候，<code>lazytag</code> 是不重要的。我们直接将其设置为空标记即珂。</p><p>显然，$s[0/1]$ 就直接左子树+右子树即珂。</p><p>$lc[0/1]$ 就先设置成左子树的 $lc$。如果发现它占满了整个左子树，那就要跨越到右子树去了。此时再加上右子树的 $lc$ 即珂。<br>$rc$ 同理。</p><p>然后 $x$（最长连续的 $0/1$）的维护也很容易，就是左子树连续的 $1$，右子树连续的 $1$，还有左子树的右连续（$rc$）+右子树的左连续（$lc$），三个取 $max$。</p><p>（实现小技巧：我们珂以把节点打个 $struct$，然后封装一个加号）<br>先放个代码上来，方便理解<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> l,r,f,c,lc[<span class="number">2</span>],rc[<span class="number">2</span>],s[<span class="number">2</span>],x[<span class="number">2</span>];&#125;; </span><br><span class="line"><span class="comment">//l,r表示当前节点表示的区间</span></span><br><span class="line"><span class="comment">//f,c是两个tag</span></span><br><span class="line"><span class="comment">//lc,rc,s,x和上面一样，表示左连续，右连续，总计数，最大连续</span></span><br><span class="line">node <span class="keyword">operator</span>+(node ls,node rs)</span><br><span class="line">&#123;</span><br><span class="line">    node ans;</span><br><span class="line">    ans.l=ls.l; ans.r=rs.r; <span class="comment">//这个不用我讲吧...</span></span><br><span class="line">    ans.f=<span class="number">0</span>,ans.c=<span class="number">-1</span>; <span class="comment">//标记</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ans.lc[i]=ls.lc[i]; <span class="keyword">if</span> (ls.lc[i]==ls.r-ls.l+<span class="number">1</span>) ans.lc[i]+=rs.lc[i];</span><br><span class="line">        <span class="comment">//默认直接取左儿子的。如果满了，再加上右儿子的左连续</span></span><br><span class="line">        ans.rc[i]=rs.rc[i]; <span class="keyword">if</span> (rs.rc[i]==rs.r-rs.l+<span class="number">1</span>) ans.rc[i]+=ls.rc[i];</span><br><span class="line">        <span class="comment">//rc同理</span></span><br><span class="line">        ans.s[i]=ls.s[i]+rs.s[i];</span><br><span class="line">        <span class="comment">//总计数比较方便，直接左右加起来即珂</span></span><br><span class="line">        ans.x[i]=max(max(ls.x[i],rs.x[i]),ls.rc[i]+rs.lc[i]);</span><br><span class="line">        <span class="comment">//最长连续要分三种情况讨论</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="lazytag的优先级-amp-如何维护lazytag"><a href="#lazytag的优先级-amp-如何维护lazytag" class="headerlink" title="lazytag的优先级&amp;如何维护lazytag"></a>lazytag的优先级&amp;如何维护lazytag</h4><h5 id="单区间修改"><a href="#单区间修改" class="headerlink" title="单区间修改"></a>单区间修改</h5><ol><li><p>覆盖操作：显然，覆盖的优先级绝对大于取反，所以先令 $F=0$。接着，假设我们都覆盖上了$c$，$c=0/1$。然后 $lc[c],rc[c],s[c],x[c]$ 都等于区间长度，而另一个颜色（$c$ 取反）的$lc,rc,s,x$ 都等于$0$。</p></li><li><p>如果是取反的操作，因为是低优先级的操作，所以直接修改 $F$ 标记即珂。由于取反完之后，$0$ 变成 $1$，$1$ 变成 $0$，所以我们只需要把 $lc,rc,s,x$的$0/1$ 两维交换一下即珂。</p></li></ol><h5 id="PushDown"><a href="#PushDown" class="headerlink" title="PushDown"></a>PushDown</h5><p><code>PushDown</code> 的时候，先操作 $C$ 标记，再操作 $F$ 标记。我们下传标记的时候，只对儿子作修改，而不对本身作修改（因为在 <code>PushDown</code> 前面一次单区间修改的时候，应该已经改过了）。所以如果遇到“先覆盖后翻转”的情况，就不会错误地把 $F$ 标记删掉了。而两个儿子也是 $C$ 标记先到，$F$ 后到，所以儿子节点的 $F$ 标记也不会被错删掉。</p><h4 id="一个小问题：如何写最长连续1的Query函数（代码中的QueryLen）"><a href="#一个小问题：如何写最长连续1的Query函数（代码中的QueryLen）" class="headerlink" title="一个小问题：如何写最长连续1的Query函数（代码中的QueryLen）"></a>一个小问题：如何写最长连续1的Query函数（代码中的QueryLen）</h4><p><code>Query</code> 函数返回一个线段树节点即珂。最后取节点的 $x[1]$ 属性，就是最长连续 $1$ 的长度了。</p><h3 id="完整代码（超长）"><a href="#完整代码（超长）" class="headerlink" title="完整代码（超长）"></a>完整代码（超长）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 155555</span></span><br><span class="line">    <span class="comment">// #define F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="comment">// 为了不和F标记重名，删掉了这个define</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125; <span class="comment">//这些都是次要内容</span></span><br><span class="line">    <span class="comment">//以下正片</span></span><br><span class="line">    <span class="comment">//==============================</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> l,r,f,c,lc[<span class="number">2</span>],rc[<span class="number">2</span>],s[<span class="number">2</span>],x[<span class="number">2</span>];&#125;; </span><br><span class="line">    <span class="comment">//一个线段树节点</span></span><br><span class="line">    node <span class="keyword">operator</span>+(node ls,node rs) <span class="comment">//这一段上面有</span></span><br><span class="line">    &#123;</span><br><span class="line">        node ans;</span><br><span class="line">        ans.l=ls.l; ans.r=rs.r;</span><br><span class="line">        ans.f=<span class="number">0</span>,ans.c=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            ans.lc[i]=ls.lc[i]; <span class="keyword">if</span> (ls.lc[i]==ls.r-ls.l+<span class="number">1</span>) ans.lc[i]+=rs.lc[i];</span><br><span class="line">            ans.rc[i]=rs.rc[i]; <span class="keyword">if</span> (rs.rc[i]==rs.r-rs.l+<span class="number">1</span>) ans.rc[i]+=ls.rc[i];</span><br><span class="line">            ans.s[i]=ls.s[i]+rs.s[i];</span><br><span class="line">            ans.x[i]=max(max(ls.x[i],rs.x[i]),ls.rc[i]+rs.lc[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SegmentTree</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        node tree[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> ls index&lt;&lt;1</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rs index&lt;&lt;1|1</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> LC tree[index].lc</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> RC tree[index].rc</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> S  tree[index].s</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> X  tree[index].x</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> L  tree[index].l</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> R  tree[index].r</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> C  tree[index].c</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> F  tree[index].f</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lLC tree[ls].lc</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lRC tree[ls].rc</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lS  tree[ls].s</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lX  tree[ls].x</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lL  tree[ls].l</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lR  tree[ls].r</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lC  tree[ls].c</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> lF  tree[ls].f</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rLC tree[rs].lc</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rRC tree[rs].rc</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rS  tree[rs].s</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rX  tree[rs].x</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rL  tree[rs].l</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rR  tree[rs].r</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rC  tree[rs].c</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> rF  tree[rs].f <span class="comment">//中二define，让代码简介一点</span></span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> index=<span class="number">1</span>)</span> <span class="comment">//这个似乎就很好写了对吧</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            tree[index]=tree[ls]+tree[rs];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            L=l,R=r;</span><br><span class="line">            <span class="keyword">if</span> (l==r)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">                C=<span class="number">-1</span>;F=<span class="number">0</span>; <span class="comment">// 注意: C的空标记为-1</span></span><br><span class="line">                S[x]=LC[x]=RC[x]=X[x]=<span class="number">1</span>;</span><br><span class="line">                x^=<span class="number">1</span>;</span><br><span class="line">                S[x]=LC[x]=RC[x]=X[x]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            Build(l,mid,ls); Build(mid+<span class="number">1</span>,r,rs);</span><br><span class="line">            Update(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">FlipOne</span><span class="params">(<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            F^=<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//注意: F^=1即珂</span></span><br><span class="line">            swap(LC[<span class="number">0</span>],LC[<span class="number">1</span>]); </span><br><span class="line">            swap(RC[<span class="number">0</span>],RC[<span class="number">1</span>]); </span><br><span class="line">            swap(S[<span class="number">0</span>],S[<span class="number">1</span>]); </span><br><span class="line">            swap(X[<span class="number">0</span>],X[<span class="number">1</span>]);</span><br><span class="line">            <span class="comment">//把0和1对应的属性换一下</span></span><br><span class="line">        &#125; </span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">ChangeOne</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            F=<span class="number">0</span>; <span class="comment">//清空F标记</span></span><br><span class="line">            C=x; </span><br><span class="line">            S[x]=LC[x]=RC[x]=X[x]=R-L+<span class="number">1</span>; <span class="comment">//x的属性全部设置为区间长度,x^1的属性全部为0</span></span><br><span class="line">            x^=<span class="number">1</span>;</span><br><span class="line">            S[x]=LC[x]=RC[x]=X[x]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//封装单区间修改函数，代码看起来结构清晰些(?)</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(<span class="keyword">int</span> index=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">//先传C标记，再传F标记</span></span><br><span class="line">            <span class="keyword">if</span> (~C)</span><br><span class="line">            &#123;</span><br><span class="line">                ChangeOne(C,ls); ChangeOne(C,rs);</span><br><span class="line">                C=<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (F)</span><br><span class="line">            &#123;</span><br><span class="line">                FlipOne(ls); FlipOne(rs);</span><br><span class="line">                F=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Change</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> index=<span class="number">1</span>)</span> <span class="comment">//覆盖[l,r]为x</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l&gt;R <span class="keyword">or</span> L&gt;r) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> (l&lt;=L <span class="keyword">and</span> R&lt;=r) <span class="keyword">return</span> ChangeOne(x,index);</span><br><span class="line">            PushDown(index);</span><br><span class="line">            Change(l,r,x,ls); Change(l,r,x,rs);</span><br><span class="line">            Update(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Flip</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> index=<span class="number">1</span>)</span> <span class="comment">//区间[l,r]翻转</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l&gt;R <span class="keyword">or</span> L&gt;r) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> (l&lt;=L <span class="keyword">and</span> R&lt;=r) <span class="keyword">return</span> FlipOne(index);</span><br><span class="line">            PushDown(index);</span><br><span class="line">            Flip(l,r,ls); Flip(l,r,rs);</span><br><span class="line">            Update(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">Query1</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> index=<span class="number">1</span>)</span> <span class="comment">//询问[l,r]中1的数量</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l&gt;R <span class="keyword">or</span> L&gt;r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (l&lt;=L <span class="keyword">and</span> R&lt;=r) <span class="keyword">return</span> S[<span class="number">1</span>];</span><br><span class="line">            PushDown(index);</span><br><span class="line">            <span class="keyword">return</span> Query1(l,r,ls)+Query1(l,r,rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">node <span class="title">QueryLen</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> index=<span class="number">1</span>)</span> <span class="comment">//询问[l,r]中连续1的长度</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (l&lt;=L <span class="keyword">and</span> R&lt;=r) <span class="keyword">return</span> tree[index]; <span class="comment">//返回一个线段树节点</span></span><br><span class="line">            PushDown(index);</span><br><span class="line">            <span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (r&lt;=mid) <span class="keyword">return</span> QueryLen(l,r,ls);</span><br><span class="line">            <span class="keyword">if</span> (l&gt;mid)  <span class="keyword">return</span> QueryLen(l,r,rs);</span><br><span class="line">            <span class="keyword">return</span> QueryLen(l,mid,ls)+QueryLen(mid+<span class="number">1</span>,r,rs); <span class="comment">//这样用节点合并就珂以了，是不是很简单呢</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;T;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Rd(<span class="number">2</span>,&amp;n,&amp;m);</span><br><span class="line">        T.Build(<span class="number">1</span>,n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> o,l,r;Rd(<span class="number">3</span>,&amp;o,&amp;l,&amp;r);</span><br><span class="line">            ++l,++r; <span class="comment">//0编号转1编号</span></span><br><span class="line">            <span class="keyword">if</span> (o==<span class="number">0</span>) T.Change(l,r,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (o==<span class="number">1</span>) T.Change(l,r,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (o==<span class="number">2</span>) T.Flip(l,r);</span><br><span class="line">            <span class="keyword">if</span> (o==<span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,T.Query1(l,r));</span><br><span class="line">            <span class="keyword">if</span> (o==<span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,T.QueryLen(l,r).x[<span class="number">1</span>]); <span class="comment">//取x[1]属性就是答案啦</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Input();</span><br><span class="line">        Soviet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="毒瘤" scheme="https://lightninguz2.github.io/tags/%E6%AF%92%E7%98%A4/"/>
    
      <category term="线段树" scheme="https://lightninguz2.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 1169E And Reachability 题解</title>
    <link href="https://lightninguz2.github.io/2020/02/16/Codeforces-1169E-And-Reachability-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/02/16/Codeforces-1169E-And-Reachability-题解/</id>
    <published>2020-02-16T06:56:26.000Z</published>
    <updated>2020-02-16T06:56:41.881Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>给定$n$个数$a1,a2…an$。如果$i&lt;j$且$a[i]\&amp;a[j]$（$\&amp;$ 是按位与运算）非零，则$i\rightarrow j$连一条有向边。$q$次询问，每次给定$xi$和$yi$，查询$xi$是否能到$yi$。</p><p>每个输入的数都&lt;=3e5，并且1&lt;=xi&lt;yi&lt;=n。</p><h3 id="思路框架"><a href="#思路框架" class="headerlink" title="思路框架"></a>思路框架</h3><p>处理$dp[i][j]$表示$i$往后第一个能到并且包含二进制第$j$位的位置。</p><p>然后看是否存在$k$使得$dp[x][k]&lt;y$即珂。</p><h3 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h3><p>讲讲$nex$如何处理。显然$dp[n+1][x]=n+1$，对于所有$x$。维护$dp$同时维护一个$nex[]$，$nex[j]$表示当前位置往后第一个包含二进制第$j$位的数在哪个位置。</p><p>显然，$i\rightarrow nex[j]$是联通的（$\&amp;$一下，至少还有第$j$位）。<br>然后对于一个$i$，枚举$j$如果$i$包含第$j$位，则对于所有$k$，用$dp[nex[j]][k]$更新$dp[i][k]$的最小值。</p><p>然后我们不是枚举$i$中包含第$j$位么，更新完$dp$之后，更新$nex$：$nex[j]=i$。然后记得$dp[i][j]=i$。（自己也能到自己）</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 1666666</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        F(i,<span class="number">1</span>,cnt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n,q,a[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Rd(<span class="number">2</span>,&amp;n,&amp;q);F(i,<span class="number">1</span>,n) R1(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> dp[N][<span class="number">22</span>];</span><br><span class="line">    <span class="keyword">int</span> nex[<span class="number">22</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        MEM(dp,<span class="number">0x3f</span>);</span><br><span class="line">        F(i,<span class="number">0</span>,<span class="number">20</span>) nex[i]=n+<span class="number">1</span>,dp[n+<span class="number">1</span>][i]=n+<span class="number">1</span>;</span><br><span class="line">        D(i,n,<span class="number">1</span>) F(j,<span class="number">0</span>,<span class="number">20</span>) <span class="keyword">if</span> (a[i]&amp;(<span class="number">1</span>&lt;&lt;j))</span><br><span class="line">        &#123;</span><br><span class="line">            F(k,<span class="number">0</span>,<span class="number">20</span>) dp[i][k]=min(dp[i][k],dp[nex[j]][k]); </span><br><span class="line">            dp[i][j]=i;</span><br><span class="line">            nex[j]=i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        F(i,<span class="number">1</span>,q)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x,y;Rd(<span class="number">2</span>,&amp;x,&amp;y);</span><br><span class="line">            <span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">            F(j,<span class="number">0</span>,<span class="number">20</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((a[y]&amp;(<span class="number">1</span>&lt;&lt;j)) <span class="keyword">and</span> dp[x][j]&lt;=y) &#123;flag=<span class="number">1</span>;<span class="keyword">break</span>;&#125; <span class="comment">//找到一个就有解</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">puts</span>(flag?<span class="string">"Shi"</span>:<span class="string">"Fou"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Input();</span><br><span class="line">        Soviet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="预处理" scheme="https://lightninguz2.github.io/tags/%E9%A2%84%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>洛谷 3660 bzoj 4994 Why Did the Cow Cross the Road III 题解</title>
    <link href="https://lightninguz2.github.io/2020/02/16/%E6%B4%9B%E8%B0%B7-3660-bzoj-4994-Why-Did-the-Cow-Cross-the-Road-III-%E9%A2%98%E8%A7%A3/"/>
    <id>https://lightninguz2.github.io/2020/02/16/洛谷-3660-bzoj-4994-Why-Did-the-Cow-Cross-the-Road-III-题解/</id>
    <published>2020-02-16T06:39:23.000Z</published>
    <updated>2020-02-16T06:40:45.324Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>（bzoj，十分简洁，直接蒯来了）<br>给定长度为2N的序列，1~N各处现过2次，i第一次出现位置记为ai，第二次记为bi，求满足ai&lt;aj&lt;bi&lt;bj的对数<br>n&lt;=1e5。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>相当于有$n$个区间$a_i,b_i$，求相交的区间对数。</p><p>那么我们把它转化为，对于每个$a_i,b_i$，统计区间里面包含多少其它区间的左端点或右端点，而它的另一个端点不能出现在$[a_i,b_i]$中。</p><p>那么能否直接求包含的端点数呢？可以！我们把区间按长度从大到小排序，那么已经考虑的区间肯定比当前的区间长，不珂能出现两个端点同时在里面的情况。然后直接用树状数组统计端点数即珂。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;using namespace std;</span></span></span><br><span class="line"><span class="keyword">namespace</span> Flandre_Scarlet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 155555</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> int long long  <span class="comment">//记得开long long </span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> D(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Fs(i,l,r,c) for(int i=l;i&lt;=r;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Ds(i,r,l,c) for(int i=r;i&gt;=l;c)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MEM(x,a) memset(x,a,sizeof(x))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FK(x) MEM(x,0)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p_b push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> sz(a) ((int)a.size())</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> iter(a,p) (a.begin()+p)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R1</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x=<span class="number">0</span>;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;<span class="string">'0'</span> <span class="keyword">or</span> c&gt;<span class="string">'9'</span>) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span> <span class="keyword">and</span> c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">        x=(f==<span class="number">1</span>)?x:-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Rd</span><span class="params">(<span class="keyword">int</span> cnt,...)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args,cnt);</span><br><span class="line">        F(i,<span class="number">1</span>,cnt) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>* x=va_arg(args,<span class="keyword">int</span>*);R1(*x);</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BIT</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">            <span class="keyword">int</span> tree[N];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">BuildTree</span><span class="params">(<span class="keyword">int</span> _len)</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                len=_len;</span><br><span class="line">                FK(tree);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> val=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=pos;i&lt;=len;i+=(i&amp;(-i)))</span><br><span class="line">                &#123;</span><br><span class="line">                    tree[i]+=val;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=pos;i&gt;<span class="number">0</span>;i-=(i&amp;(-i)))</span><br><span class="line">                &#123;</span><br><span class="line">                    ans+=tree[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">RQuery</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;<span class="keyword">return</span> Query(r)-Query(l<span class="number">-1</span>);&#125;</span><br><span class="line">    &#125;T;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> l,r;&#125;a[N]; <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(node a,node b)&#123;<span class="keyword">return</span> a.r-a.l&gt;b.r-b.l;&#125; <span class="comment">//从大到小排序</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        MEM(a,<span class="number">-1</span>);</span><br><span class="line">        R1(n);</span><br><span class="line">        F(i,<span class="number">1</span>,<span class="number">2</span>*n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x;R1(x);</span><br><span class="line">            <span class="keyword">if</span> (a[x].l==<span class="number">-1</span>) a[x].l=i;</span><br><span class="line">            <span class="keyword">else</span> a[x].r=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//读入的时候顺便求出n个区间的左端点，右端点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Soviet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        T.BuildTree(<span class="number">100000</span>);</span><br><span class="line">        F(i,<span class="number">1</span>,n)</span><br><span class="line">        &#123;</span><br><span class="line">            ans+=T.RQuery(a[i].l,a[i].r);</span><br><span class="line">            T.Add(a[i].l,<span class="number">1</span>); T.Add(a[i].r,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Flan void</span></span><br><span class="line">    <span class="function">Flan <span class="title">IsMyWife</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Input();</span><br><span class="line">        Soviet();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> int <span class="comment">//long long </span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Flandre_Scarlet::IsMyWife();</span><br><span class="line">    getchar();getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="思维" scheme="https://lightninguz2.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="树状数组" scheme="https://lightninguz2.github.io/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="枚举顺序" scheme="https://lightninguz2.github.io/tags/%E6%9E%9A%E4%B8%BE%E9%A1%BA%E5%BA%8F/"/>
    
  </entry>
  
</feed>
